{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2024-09-24T01:42:10.014498+00:00",
  "repo": "junyechen1996/draft-chen-cfrg-vdaf-pine",
  "labels": [
    {
      "name": "bug",
      "description": "Something isn't working",
      "color": "d73a4a"
    },
    {
      "name": "documentation",
      "description": "Improvements or additions to documentation",
      "color": "0075ca"
    },
    {
      "name": "duplicate",
      "description": "This issue or pull request already exists",
      "color": "cfd3d7"
    },
    {
      "name": "enhancement",
      "description": "New feature or request",
      "color": "a2eeef"
    },
    {
      "name": "good first issue",
      "description": "Good for newcomers",
      "color": "7057ff"
    },
    {
      "name": "help wanted",
      "description": "Extra attention is needed",
      "color": "008672"
    },
    {
      "name": "invalid",
      "description": "This doesn't seem right",
      "color": "e4e669"
    },
    {
      "name": "question",
      "description": "Further information is requested",
      "color": "d876e3"
    },
    {
      "name": "wontfix",
      "description": "This will not be worked on",
      "color": "ffffff"
    }
  ],
  "issues": [
    {
      "number": 3,
      "id": "I_kwDOJWdxls5o_PNO",
      "title": "Chris P.: editorial",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/issues/3",
      "state": "CLOSED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "- [x] Abstract: \"A new VDAF...\": Once this document is an RFC it won't be \"new\", so I'd just say \"A VDAF...\"\r\n- [x] Introduction: Define \"federated learning\".\r\n- [x] Introduction: Most readers won't now what \"L2 norm\" means. I think you should define it and say why it's needed for federated learning.\r\n- [x] Introduction: \"that conforms to the VDAF protocol\": I think you mean \"VDAF interface\" here. \r\n- [ ] Introduction: \"introduces a Prio3 scheme\": Do you mean a scheme that's \"like\" Prio3?\r\n- [ ] Introduction: \"a new kind of joint randomness\": I think we should rename this so we don't conflate it with `joint_rand` in Prio3. What about \"encoding randomness\"?\r\n- [x] Section 3: Add a citation for IEEE-754.\r\n- [x] Section 3.1: Title: \"Encoding Real Numbers ...\": I wonder if it makes sense to be more precise here about what you mean \"real number\"? How about \"Encoding a float64 into a Field Integer\"\r\n- [ ] `~~~` blocks should have line breaks at 70 characters in order to avoid going over the column limit. This results in the horizontal scrollbar, which is kinda ugly: \r\n![image](https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/assets/3453007/6c68a5bb-b543-48b1-92c3-463d572b0ac0)\r\n- [ ] Section 3.4: Title: \"Protocols in PINE\": This is an odd way to describe these things. I wouldn't say they're protocols, rather they are properties of the measurement that are verified by the Aggregators. \r\n- [ ] Section 3.4.1: \"The Aggregators MUST verify the indices that are expected to be bits are indeed 0 or 1.\" This isn't really how MUST, SHOULD, MAY, etc. are meant to be used. Here we're talking about a property we want from the system, not defining the behavior of that system. See https://www.rfc-editor.org/rfc/rfc2119 for details.\r\n- [ ] '': \"The Client and Aggregators can follow...\": \"can\" here is problematic since it sounds like this may be optional. You intend one and only one scheme to be used for this check, correct?\r\n- [ ] '':  \"the security and privacy guarantee of this protocol is characterized by the following\": s/is/are\r\n- [ ] Section 3.4.2: \"which is the squared L2-norm bound in field integer\": minor grammar issue here: meaning of \"in field integer\" is unclear here.\r\n- [ ] Section 3.4.2: \"with \\beta_1 equal to 0, and \\beta_2\": sadly we can't use LaTeX to render math in I-Ds. I'd rename these to something more readable, like `beta_1` and `beta_2`\r\n- [ ] This claim is made in a few sections: \"Zero-Knowledge: This protocol is perfect honest-verifier zero-knowledge.\" A couple of things. First, this comes across (to me, anyway) as an assertion of a security property. You will want to provide a pointer to the PINE paper where you prove this (or at least argue it informally some how).\r\n- [ ] Section 4.1: Title: This is not an FLP, it's a VDAF.",
      "createdAt": "2023-06-16T22:06:52Z",
      "updatedAt": "2023-08-17T00:54:34Z",
      "closedAt": "2023-08-17T00:54:33Z",
      "comments": [
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing this one because I don't think this the right level of feedback at this stage.",
          "createdAt": "2023-08-17T00:54:33Z",
          "updatedAt": "2023-08-17T00:54:33Z"
        }
      ]
    },
    {
      "number": 4,
      "id": "I_kwDOJWdxls5o_W5f",
      "title": "Chris P.: References to PINE paper",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/issues/4",
      "state": "CLOSED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I would add a stub reference to the PINE paper so that you can change \"per Section 4.1 of the PINE paper\" to \"per {{PINE, Section 4.1}}\" now without having to update all of these references later on.",
      "createdAt": "2023-06-16T22:38:33Z",
      "updatedAt": "2023-08-17T00:54:06Z",
      "closedAt": "2023-08-17T00:54:06Z",
      "comments": [
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "Done.",
          "createdAt": "2023-08-17T00:54:06Z",
          "updatedAt": "2023-08-17T00:54:06Z"
        }
      ]
    },
    {
      "number": 5,
      "id": "I_kwDOJWdxls5o_mAx",
      "title": "Chris P.: `Field64` seems too small for robustness",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/issues/5",
      "state": "CLOSED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "In our analysis of Prio3 (https://eprint.iacr.org/2023/130) we found that robustness requires a field large enough to overcome a computationally bounded attacker that can do offline precomutation with the PRG.\r\n\r\nThe key term is the multipliciative loss via RO queries (the first term): \r\n![image](https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/assets/3453007/54ed04af-60d0-45fb-a11c-4daa8035b72d)\r\n\r\nBasically, if the soundness error is $\\epsilon = 2^{128}$, then allowing $2^{64}$ RO queries drops the robustness bound to at least $2^{64}$. We believe this bound is relatively tight.\r\n\r\nRepeating the verification step multiple times might help, but I think you would also need independent joint randomness for each trial.\r\n\r\nI would recommend going with a 128-bit field, i.e., `Field128`.\r\n\r\n ",
      "createdAt": "2023-06-16T23:35:37Z",
      "updatedAt": "2024-02-20T22:37:20Z",
      "closedAt": "2024-02-20T22:37:20Z",
      "comments": []
    },
    {
      "number": 6,
      "id": "I_kwDOJWdxls5pJEPH",
      "title": "Is float64 -> field element encoding underspecified?",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/issues/6",
      "state": "CLOSED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "While implementing Section 3.1 I had a couple of questions about edge cases with floating point numbers:\r\n1. How are NaN and infinity meant to be represented? If they aren't, then the spec needs to say so.\r\n2. I was poking around the rust docs and found this thing called a [\"subnormal\" number](https://en.wikipedia.org/wiki/Subnormal_number), which I've never heard of. Is it safe to treat these as \"normal\" numbers?\r\n3. If the number is less than or equal to zero, then we're supposed to flip its sign in the field. But there are two representations of zero in flaoting points, negative zero and positive zero. Is this condition meant to be both?\r\n\r\nThese questions might seem kind of nit-picky, but they're important to resolve becasue they potentially impact interop. The goal here is to take the **bit representation of `x`** and map it to an element of the field unambiguously.",
      "createdAt": "2023-06-19T18:08:57Z",
      "updatedAt": "2023-08-09T18:52:17Z",
      "closedAt": "2023-08-09T18:52:16Z",
      "comments": [
        {
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "body": "Closed by #14 .",
          "createdAt": "2023-08-09T18:52:16Z",
          "updatedAt": "2023-08-09T18:52:16Z"
        }
      ]
    },
    {
      "number": 7,
      "id": "I_kwDOJWdxls5pJmaF",
      "title": "What is the purpose of Section 4.3 (\"FLP Execution\")?",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/issues/7",
      "state": "CLOSED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The text just seems to be re-iterating the syntax for FLPs described in the VDAF spec. If so, it should just be removed.",
      "createdAt": "2023-06-19T19:41:08Z",
      "updatedAt": "2023-08-17T00:57:30Z",
      "closedAt": "2023-08-17T00:57:30Z",
      "comments": []
    },
    {
      "number": 8,
      "id": "I_kwDOJWdxls5pJrt2",
      "title": "Composition of the three \"protocols\" is underspecified",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/issues/8",
      "state": "CLOSED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Based on the definition of the VDAF sharding algorithm (Section 4.4.1), it looks like there is a single FLP used to perform the validity checks described in Section 3.4 (0/1 bit check, L2-norm sum check, and wraparound check). Further, in the overview section it suggests that the `FlpGeneric` construction from the VDAF draft is used for this. Using this construction one would need to specify a \"validity circuit\" that combines these checks in some way. However this circuit is not specified as far as I can tell.",
      "createdAt": "2023-06-19T20:00:14Z",
      "updatedAt": "2023-07-13T20:20:45Z",
      "closedAt": "2023-07-13T20:20:45Z",
      "comments": [
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "It looks like the PR will solve this.",
          "createdAt": "2023-07-13T20:20:45Z",
          "updatedAt": "2023-07-13T20:20:45Z"
        }
      ]
    },
    {
      "number": 12,
      "id": "I_kwDOJWdxls5rgvfZ",
      "title": "Split Table 2 into \"VDAF parameters\", \"FLP parameters\", and \"PINE parameters\"",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/issues/12",
      "state": "CLOSED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This monolithic table makes it hard to tell which parameter are needed to fulfill the VDAF interface vs. the FLP interface versus what paramters are needed for PINE.",
      "createdAt": "2023-07-13T20:49:50Z",
      "updatedAt": "2023-08-17T00:57:20Z",
      "closedAt": "2023-08-17T00:57:20Z",
      "comments": [
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed in favor of #16.",
          "createdAt": "2023-08-17T00:57:20Z",
          "updatedAt": "2023-08-17T00:57:20Z"
        }
      ]
    },
    {
      "number": 13,
      "id": "I_kwDOJWdxls5smKT2",
      "title": "Better parameter names?",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/issues/13",
      "state": "CLOSED",
      "author": "junyechen1996",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "Currently the draft defines variables to be aligned with what are used in the paper, but it might be better to define better names for them.",
      "createdAt": "2023-07-26T09:16:22Z",
      "updatedAt": "2024-02-20T22:37:02Z",
      "closedAt": "2024-02-20T22:37:02Z",
      "comments": [
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "The goal here should be to pick names that are easy for an implementer, not someone reading the paper.",
          "createdAt": "2023-08-17T00:56:56Z",
          "updatedAt": "2023-08-17T00:56:56Z"
        }
      ]
    },
    {
      "number": 15,
      "id": "I_kwDOJWdxls5tSo23",
      "title": "A section to discuss security analysis of PINE",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/issues/15",
      "state": "CLOSED",
      "author": "junyechen1996",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "as titled",
      "createdAt": "2023-08-02T17:16:46Z",
      "updatedAt": "2024-02-22T15:54:43Z",
      "closedAt": "2024-02-22T15:54:42Z",
      "comments": [
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "This will be \"security considerations\". Our goal will be to parameterize PINE such that the user doesn't have to worry about any sharp edges that aren't already there for comparable VDAFs, like Prio3.",
          "createdAt": "2024-02-22T15:54:42Z",
          "updatedAt": "2024-02-22T15:54:42Z"
        }
      ]
    },
    {
      "number": 16,
      "id": "I_kwDOJWdxls5ugvv-",
      "title": "Split parameters into \"user\" parameters and \"operational\" parameters",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/issues/16",
      "state": "CLOSED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The user parameters are:\r\n* dimension\r\n* fractional bits\r\n* l2 norm bound\r\n\r\nAll other parameters are \"operational\" and need to be hidden from the users. We should instead just choose safe defaults.",
      "createdAt": "2023-08-17T00:56:33Z",
      "updatedAt": "2024-02-22T15:55:26Z",
      "closedAt": "2024-02-22T15:55:26Z",
      "comments": []
    },
    {
      "number": 19,
      "id": "I_kwDOJWdxls5u4mD-",
      "title": "Set up reference code",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/issues/19",
      "state": "CLOSED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We want to check in the dependencies from the VDAF spec in a submodule.",
      "createdAt": "2023-08-21T23:50:43Z",
      "updatedAt": "2023-08-22T07:57:43Z",
      "closedAt": "2023-08-22T07:57:43Z",
      "comments": []
    },
    {
      "number": 22,
      "id": "I_kwDOJWdxls5u_9dV",
      "title": "Explain why bounded L2 norm is important for federated learning",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/issues/22",
      "state": "OPEN",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "junyechen1996"
      ],
      "labels": [],
      "body": "              Good point. Most papers that I read simply say it (L2-norm) is a popular way to bound the contribution from a client, I don't have a good citation for it yet, still will leave this item open for now until I have a good source to cite. I think intuitively L2-norm bound is a good way of limiting client contribution across all coordinates, i.e. the exact distribution across coordinates is unknown, some are higher, some are lower. Having a range check at each coordinate is not as flexible, and if we try to allow flexibility such as allowing each coordinate to be bounded by 1.0, then the overall L2 norm of the vector can be as large as sqrt(d), so a Client can still send a vector that has much larger influence than other clients.\r\n\r\nHaving a bounded L2-norm also allows federated learning applications to apply DP noise (e.g. Gaussian) based on the established norm bound, so Client first clips its vector with `l2_norm_bound`, then applies noise.\r\n\r\n_Originally posted by @junyechen1996 in https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/18#discussion_r1301379275_\r\n            ",
      "createdAt": "2023-08-22T21:56:47Z",
      "updatedAt": "2024-04-09T17:01:28Z",
      "closedAt": null,
      "comments": [
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "@junyechen1996 I still think a bit more context here would be helpful. Maybe a short paragraph in the intro?",
          "createdAt": "2024-02-22T15:56:35Z",
          "updatedAt": "2024-02-22T15:56:35Z"
        }
      ]
    },
    {
      "number": 23,
      "id": "I_kwDOJWdxls5vDvmA",
      "title": "Prior work in Introduction",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/issues/23",
      "state": "CLOSED",
      "author": "junyechen1996",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "Better summarize prior work in Introduction, to show the advantage of PINE.",
      "createdAt": "2023-08-23T12:38:13Z",
      "updatedAt": "2024-02-22T15:52:52Z",
      "closedAt": "2024-02-22T15:52:52Z",
      "comments": [
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "I think we do a reasonable job selling PINE in the intro. For more evidence that this is better for fedreated learning than Prio3, see the paper :)",
          "createdAt": "2024-02-22T15:52:52Z",
          "updatedAt": "2024-02-22T15:52:52Z"
        }
      ]
    },
    {
      "number": 24,
      "id": "I_kwDOJWdxls5vHDC7",
      "title": "Fix some of the operational parameters",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/issues/24",
      "state": "CLOSED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "```rust\r\n// XXX Junye will follow up with Guy about what numbers to pick here.\r\n// python3: eta = 1/1000000000; math.ceil(math.sqrt(math.log(2/eta)))\r\nconst ALPHA: u128 = 8;\r\nconst TAU: f64 = 0.75;\r\nconst WR_TEST_COUNT: usize = 135;\r\nconst WR_TEST_PASSES: usize = (TAU * WR_TEST_COUNT as f64) as usize;\r\n```",
      "createdAt": "2023-08-23T22:50:47Z",
      "updatedAt": "2024-01-08T21:35:23Z",
      "closedAt": "2024-01-08T21:35:23Z",
      "comments": []
    },
    {
      "number": 25,
      "id": "I_kwDOJWdxls5vHEd7",
      "title": "ParallelSum gadget optimization",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/issues/25",
      "state": "CLOSED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "cjpatton"
      ],
      "labels": [],
      "body": "The bit checks can be compressed using the ParallelSum gadget.\r\nNote that we'll need to upgrade to VDAF-07 when it's out.",
      "createdAt": "2023-08-23T22:59:08Z",
      "updatedAt": "2023-09-28T15:54:40Z",
      "closedAt": "2023-09-28T15:54:40Z",
      "comments": []
    },
    {
      "number": 26,
      "id": "I_kwDOJWdxls5vKTrI",
      "title": "Rework {{flp}} section",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/issues/26",
      "state": "CLOSED",
      "author": "junyechen1996",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "should include the following checks:\r\n\r\n- range check with lower bound `\\beta_1`, upper bound `\\beta_2`. See section 4.1 in paper.\r\n- L2-norm check, which uses range check as-is, by plugging in the right `\\beta_1` and `\\beta_2`.\r\n- wraparound check, which uses range check, and some other logic. See section 4.2 in paper.",
      "createdAt": "2023-08-24T11:38:44Z",
      "updatedAt": "2024-02-22T15:51:29Z",
      "closedAt": "2024-02-22T15:51:28Z",
      "comments": [
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing this issue because it's pretty stale.",
          "createdAt": "2024-02-22T15:51:28Z",
          "updatedAt": "2024-02-22T15:51:28Z"
        }
      ]
    },
    {
      "number": 29,
      "id": "I_kwDOJWdxls5wjmKC",
      "title": "Side-channel considerations",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/issues/29",
      "state": "OPEN",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "cjpatton"
      ],
      "labels": [],
      "body": "A couple of observations about sharding.\r\n\r\nFirst, the wraparound randomness needs to be sampled from a specific distribution, which is simulated by the following algorithm:\r\n```python3\r\nrand_bits = sample_bytes_from_an_rng()\r\nif rand_bits == 0b00:\r\n    rand_field = self.Field(self.Field.MODULUS - 1)\r\nelif rand_bits == 0b01 or rand_bits == 0b10:\r\n    rand_field = self.Field(0)\r\nelse:\r\n    rand_field = self.Field(1)\r\n```\r\n\r\nBranch prediction might leak the value of `rand_bits`. The risk here is that if I know the randomness the client uses and can observe its computation, I might be able to learn which wraparound tests failed.\r\n\r\nSecond (and probably worse), the encoding finalization step might leak which wraparound tests failed (and which were skipped).\r\n```python3\r\n    if is_in_range:\r\n                # If the result of the current wraparound check is\r\n                # in range, and number of passing repetitions hasn't\r\n                # reached `self.NUM_PASS_WR_REPS`, set success bit\r\n                # to be 1, otherwise set it to be 0.\r\n                if num_passed_wr_reps < self.NUM_PASS_WR_REPS:\r\n                    success_bit = self.Field(1)\r\n                    num_passed_wr_reps += 1\r\n                else:\r\n                    success_bit = self.Field(0)\r\n            else:\r\n                # Set the wraparound check result to be zero,\r\n                # and success bit to be zero.\r\n                curr_wr_res = self.Field(0)\r\n                success_bit = self.Field(0)\r\n```\r\n\r\nImplementations will probably want to make these things constant-time, if possible. We should figure out how we might do this and add some guidance to the draft.",
      "createdAt": "2023-09-08T21:28:01Z",
      "updatedAt": "2024-04-09T17:06:46Z",
      "closedAt": null,
      "comments": [
        {
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "body": "I think the `z` vector is known to both prover and verifiers, but the `x` vector and bits for wraparound check results are both secret-shared, so verifiers won't learn the dot product, or which wraparound test failed. Quote from the paper in section 4.2: \"The verifiers will not learn whether any of the individual repetitions succeeded, but only whether \u201cmany\u201d of them succeeded.\". \r\n\r\nCould you elaborate on \"Implementations will probably want to make these things constant-time, if possible\"?",
          "createdAt": "2023-09-11T13:43:49Z",
          "updatedAt": "2023-09-11T13:44:06Z"
        },
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "> Could you elaborate on \"Implementations will probably want to make these things constant-time, if possible\"?\r\n\r\nThe goal would be to have an algorithm whose runtime doesn't depend on secret state. This is to make [side-channel attacks](https://en.wikipedia.org/wiki/Side-channel_attack) harder.\r\n\r\nBy the way, there's no reason to worry about this right now, but eventually we'll need to think this through.\r\n\r\n\r\n\r\n> I think the `z` vector is known to both prover and verifiers, but the `x` vector and bits for wraparound check results are both secret-shared, so verifiers won't learn the dot product, or which wraparound test failed.\r\n\r\nIt's not the server side computation that is the (potential) issue: it's the client side. Imagine the attacker gets to observe how long it takes the client to run the sharding algorithm; if the runtime depends on secret state, then the attacker can potentially learn that state.\r\n\r\n> Quote from the paper in section 4.2: \"The verifiers will not learn whether any of the individual repetitions succeeded, but only whether \u201cmany\u201d of them succeeded.\".\r\n\r\nThis is true only in the absence of side channels, which the paper doesn't account for. By the way this is not to suggest there is a problem with the paper -- typically considering side channels is left to implementation.\r\n",
          "createdAt": "2023-09-11T15:04:11Z",
          "updatedAt": "2023-09-11T15:04:11Z"
        }
      ]
    },
    {
      "number": 30,
      "id": "I_kwDOJWdxls5wrQLW",
      "title": "Move the subroutines of encoding field into bits and vice versa into standard VDAF draft",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/issues/30",
      "state": "CLOSED",
      "author": "junyechen1996",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "as titled. It is also useful for `Prio3Sum` and `Prio3SumVec`.",
      "createdAt": "2023-09-11T12:19:56Z",
      "updatedAt": "2023-09-15T09:41:14Z",
      "closedAt": "2023-09-15T09:41:14Z",
      "comments": [
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "Any chance you could do this today? The sooner the better :)",
          "createdAt": "2023-09-11T15:04:55Z",
          "updatedAt": "2023-09-11T15:04:55Z"
        },
        {
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "body": "Proposed a PR here: https://github.com/cfrg/draft-irtf-cfrg-vdaf/pull/295, would love some feedback.",
          "createdAt": "2023-09-11T18:49:07Z",
          "updatedAt": "2023-09-11T18:49:07Z"
        },
        {
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "body": "VDAF PR merged.",
          "createdAt": "2023-09-15T09:41:14Z",
          "updatedAt": "2023-09-15T09:41:14Z"
        }
      ]
    },
    {
      "number": 31,
      "id": "I_kwDOJWdxls5wrfWJ",
      "title": "sync with latest draft",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/issues/31",
      "state": "CLOSED",
      "author": "junyechen1996",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "as titled. The latest draft renamed PRG to XOF.",
      "createdAt": "2023-09-11T12:54:28Z",
      "updatedAt": "2023-09-11T13:38:17Z",
      "closedAt": "2023-09-11T13:38:16Z",
      "comments": [
        {
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "body": "Addressed in #28 ",
          "createdAt": "2023-09-11T13:38:16Z",
          "updatedAt": "2023-09-11T13:38:16Z"
        }
      ]
    },
    {
      "number": 34,
      "id": "I_kwDOJWdxls5xeHEz",
      "title": "Treat subnormal float as 0 or error",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/issues/34",
      "state": "OPEN",
      "author": "junyechen1996",
      "authorAssociation": "OWNER",
      "assignees": [
        "junyechen1996"
      ],
      "labels": [],
      "body": "Investigate whether model gradient can have subnormal float values.",
      "createdAt": "2023-09-19T21:01:54Z",
      "updatedAt": "2024-04-09T17:01:20Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 39,
      "id": "I_kwDOJWdxls5592wW",
      "title": "Analyze end-to-end robustness of PINE",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/issues/39",
      "state": "OPEN",
      "author": "junyechen1996",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "As titled. We will need to recommend the field size and number of proofs like Prio3.",
      "createdAt": "2023-12-18T10:10:37Z",
      "updatedAt": "2023-12-18T10:10:38Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 43,
      "id": "I_kwDOJWdxls56Xw3L",
      "title": "Use of `Flp.encode()` is slightly abusive",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/issues/43",
      "state": "CLOSED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "cjpatton"
      ],
      "labels": [],
      "body": "The circuit expects a string of length `MEAS_LEN` [which is meant to match the output length of `Flp.encode()`](https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vdaf-08#section-7.1.1-2.1.1). But our `Flp.encode()` produces a shorter string (that is missing the `wr_dot_prods`.\r\n\r\nI'd suggest we not overload `encode()` and simply use a function with a different name. `encode_gradient()` would probably make sense.",
      "createdAt": "2023-12-21T20:56:53Z",
      "updatedAt": "2024-01-10T23:00:13Z",
      "closedAt": "2024-01-10T23:00:13Z",
      "comments": []
    },
    {
      "number": 44,
      "id": "I_kwDOJWdxls56Yk3t",
      "title": "How should we implement `Pine.domain_separation_tag()`?",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/issues/44",
      "state": "CLOSED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "junyechen1996"
      ],
      "labels": [],
      "body": "This depends on variable `VERSION` in the base draft: https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vdaf-08#section-6.2.3-4\r\n\r\nIs this intended? We probably should avoid this dependency.",
      "createdAt": "2023-12-22T01:59:26Z",
      "updatedAt": "2024-01-10T21:56:58Z",
      "closedAt": "2024-01-10T21:56:58Z",
      "comments": [
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "Resolution: define VERSION ourselves and don't use the method from the base draft.",
          "createdAt": "2024-01-09T16:25:29Z",
          "updatedAt": "2024-01-09T16:25:29Z"
        },
        {
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "body": "Addressed by #49 .",
          "createdAt": "2024-01-10T21:56:58Z",
          "updatedAt": "2024-01-10T21:56:58Z"
        }
      ]
    },
    {
      "number": 46,
      "id": "I_kwDOJWdxls57cw4t",
      "title": "Bounds for gradient coordinates (i.e., how to pick the upper bound for `num_frac_bits`)",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/issues/46",
      "state": "CLOSED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Currently we require that `num_frac_bits` is at most 128, but [double precision floats only have 53 bits for the fractional part](https://en.wikipedia.org/wiki/Double-precision_floating-point_format#/media/File:IEEE_754_Double_Floating_Point_Format.svg). \r\n\r\nIn fact, the largest value we can accommodate is probably smaller than 53:\r\n\r\n1. `x * 2**num_frac_bits` might be too big to represent as a float.\r\n2. `x * 2**num_frac_bits` might be too large to represent as a field element (the unsigned part must be smaller than 1/2 of the field modulus).\r\n\r\nI think what we really want to do is come up with a bounds check for each coordinate and the field modulus.",
      "createdAt": "2024-01-08T20:04:41Z",
      "updatedAt": "2024-01-09T16:34:50Z",
      "closedAt": "2024-01-09T16:34:50Z",
      "comments": [
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "ACtually, you can represent really big numbers as floating point numbers, but not with useful precision when doing arithmetic.",
          "createdAt": "2024-01-09T16:33:46Z",
          "updatedAt": "2024-01-09T16:33:46Z"
        }
      ]
    },
    {
      "number": 50,
      "id": "I_kwDOJWdxls57qr-C",
      "title": "FLP: Run the gadget calls in dependency order",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/issues/50",
      "state": "CLOSED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "cjpatton"
      ],
      "labels": [],
      "body": "Right now we do the bit checks, then the norm checks, then the wraparound checks. The validity of each check depends on the validity of other checks:\r\n1. wraparound checks are only valid if the bit checks succeeded\r\n2. norm check is only valid if the bit checks and the wrap around checks succeeded\r\n\r\nLogically I think it makes sense to order the checks such that all dependencies are satisfied before a check is made:\r\n1. bit checks\r\n2. wraparound checks\r\n3. norm check\r\n\r\nThis ought to improve readability.\r\n\r\nNote that this is a breaking change since it changes the order of the gadget calls.\r\n",
      "createdAt": "2024-01-10T16:57:51Z",
      "updatedAt": "2024-01-12T20:23:53Z",
      "closedAt": "2024-01-12T20:23:53Z",
      "comments": [
        {
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "body": "Breaking change is fine. And I think 2 and 3 can run in parallel theoretically, so I don't have a strong opinion which runs first.",
          "createdAt": "2024-01-10T19:35:02Z",
          "updatedAt": "2024-01-10T19:35:02Z"
        }
      ]
    },
    {
      "number": 53,
      "id": "I_kwDOJWdxls58B28k",
      "title": "Multiproof optimization: Move squared norm equality check to a separate FLP",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/issues/53",
      "state": "CLOSED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "junyechen1996"
      ],
      "labels": [],
      "body": "The FLP circuit evaluation is the most expensive part PINE. Since we might generate multiple proofs, we want to de-duplicate any redundant computation that we can.\r\n\r\nOur current FLP circuit is composed of three sub-circuits, which produce five intermediate outputs:\r\n```python\r\n        bit_checks_result = self.eval_bit_checks(r_bit_check,\r\n                                                 bit_checked,\r\n                                                 shares_inv)\r\n\r\n        (wr_checks_result, wr_success_count_check_result) = \\\r\n            self.eval_wr_checks(r_wr_check,\r\n                                wr_check_v_bits,\r\n                                wr_check_g,\r\n                                wr_check_results,\r\n                                shares_inv)\r\n\r\n        (sq_norm_equality_check_result, sq_norm_range_check_result) = \\\r\n            self.eval_norm_check(encoded_gradient,\r\n                                 sq_norm_v_bits,\r\n                                 sq_norm_u_bits,\r\n                                 shares_inv)\r\n```\r\n\r\nConsider the computation of each intermediate output:\r\n* `bit_checks_result`\r\n* `wr_checks_result`\r\n* `wr_success_count_check_result`\r\n* `sq_norm_equality_check_result`\r\n* `sq_norm_range_check_result`\r\n\r\n**Observation 1:** We can't avoid repeating any computation that depends on the joint randomness, as the joint randomness needs to be fresh for each proof. Only `bit_checks_result` and `wr_checks_result` depend on the joint randomness; the others need only be computed once.\r\n\r\n**Observation 2**: Re-computing an intermediate output is only expensive if the computation is non-linear, as this requires calling the gadget, which increases the size of the proof and verifier. Linear computations do not have this side-effect. Only \r\n`bit_checks_result`, `wr_checks_result`, and `sq_norm_equality_check_result` are non-linear.\r\n\r\n**Idea:** We can avoid re-computing `sq_norm_equality_check_result` since it does not depend on the joint randomness. Plus, doing so is worth it because it is non-linear (and particularly expensive because the number of gadget calls depends on the dimension).\r\n\r\nConcretely, we can compute the squared norm check with a separate FLP that is evaluated once and does not take joint randomness. During VDAF preparation, the Aggregators would need to verify two FLPs: one for `sq_norm_equality_check_result` and another for all the intermediate outputs and does the reduction.",
      "createdAt": "2024-01-14T19:15:53Z",
      "updatedAt": "2024-08-13T20:22:22Z",
      "closedAt": "2024-08-13T20:22:21Z",
      "comments": [
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "Question (raised by @junyechen1996 on 2024/1/16 sync): Is the soundness error for the squared norm FLP good enough if we don't do multiproof? Perhaps since we don't lose any soundness in the circuit and this part is not vulnearble to pre-computation attacks. More analysis needed.",
          "createdAt": "2024-01-16T16:22:07Z",
          "updatedAt": "2024-01-16T16:22:07Z"
        }
      ]
    },
    {
      "number": 54,
      "id": "I_kwDOJWdxls58unCY",
      "title": "Reduce unit test runtime",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/issues/54",
      "state": "CLOSED",
      "author": "junyechen1996",
      "authorAssociation": "OWNER",
      "assignees": [
        "junyechen1996"
      ],
      "labels": [],
      "body": "One way is to add internal operational parameters as optional parameters",
      "createdAt": "2024-01-21T13:46:49Z",
      "updatedAt": "2024-02-20T22:21:14Z",
      "closedAt": "2024-02-20T22:21:14Z",
      "comments": [
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "@junyechen1996 I don't think we need this anymore. The tests finish in a reasonable amount of time (about 6 seconds on my machine). A real implementation of PINE would be much faster; this doesn't need to be fast because it's just the reference code.",
          "createdAt": "2024-02-20T22:21:14Z",
          "updatedAt": "2024-02-20T22:21:14Z"
        }
      ]
    },
    {
      "number": 59,
      "id": "I_kwDOJWdxls5_39lU",
      "title": "Bit lengths seem to be computed incorrectly",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/issues/59",
      "state": "CLOSED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We compute the bit length for the squared norm and wraparound range checks as `math.ceil(math.log2(m))` where `m` is the largest, valid value:\r\n\r\nhttps://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/blob/21c43447f9b3ed283cc44500001ab4e9411a72c7/poc/flp_pine.py#L82\r\n\r\nhttps://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/blob/21c43447f9b3ed283cc44500001ab4e9411a72c7/poc/flp_pine.py#L101\r\n\r\nThis appears to be incorrect when `m` is a power of 2:\r\n\r\n| m | bit encoding | bit length |\r\n| - | - | - |\r\n| 1 | 1 | 1 |\r\n| 2 | 10 | 2 |\r\n| 4 | 100 | 3 |\r\n| 8 | 1000 | 4 |\r\n| 16 | 10000 | 5 |\r\n\r\nWhat we want instead is `math.floor(math.log2(m)+1)`.\r\n\r\nThanks to @jhoyla for pointing out this bug.\r\n",
      "createdAt": "2024-02-20T22:10:02Z",
      "updatedAt": "2024-02-21T17:41:18Z",
      "closedAt": "2024-02-21T17:41:17Z",
      "comments": [
        {
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "body": "Both look correct to me?\r\n\r\nm = 1, math.ceil(math.log2(m + 1)) = 1, math.floor(math.log2(m) + 1) = 1\r\nm = 2, math.ceil(math.log2(m + 1)) = 2, math.floor(math.log2(m) + 1) = 2\r\nm = 4, math.ceil(math.log2(m + 1)) = 3, math.floor(math.log2(m) + 1) = 3",
          "createdAt": "2024-02-21T08:07:58Z",
          "updatedAt": "2024-02-21T08:07:58Z"
        },
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "Ohhh right, the +1 is important.",
          "createdAt": "2024-02-21T17:41:17Z",
          "updatedAt": "2024-02-21T17:41:17Z"
        }
      ]
    },
    {
      "number": 60,
      "id": "I_kwDOJWdxls5_4LF_",
      "title": "Optimization: Require all wraparound checks to pass",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/issues/60",
      "state": "OPEN",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The FLP circuit runs a number of independent wraparound checks (`NUM_WR_CHECKS`); the input is deemed valid if a fraction of the checks succeed (`NUM_WR_SUCCESSES / NUM_WR_CHECKS`).\r\n\r\nWe are in the midst of choosing parameters for PINE (#39). One potential outcome of this search: there may be no benefit to allowing wraparound checks to fail, either in terms of performance or ZK/soundness error. On the other hand, if we require all checks to succeed, then we can simplify the circuit a bit.\r\n\r\nTo allow a fraction of checks to fail, the prover sends the verifiers shares of a bit (denoted `g` here and [in the paper](https://arxiv.org/abs/2311.10237)) indicating whether the test succeeded. The circuit proves that:\r\n1. _either_ the prover asserted success (i.e., that `g=1`) and the check succeeded _or_ the prover asserted failure (`g=0`).\r\n2. The number of successes asserted by the prover is exactly `NUM_WR_SUCCESSES / NUM_WR_CHECKS`.\r\n\r\nIf instead we require all tests to succeed, then the verifiers simply need to check that every check was successful. In particular, there is no need for the prover to assert success. Not only is the resulting circuit simpler, it leads to some modest performance improvements:\r\n1. Shorter input (no need to send `g` for each wraparound check)\r\n2. Shorter proof (less calls to the FLP gadget)",
      "createdAt": "2024-02-20T22:57:08Z",
      "updatedAt": "2024-02-20T22:57:08Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 65,
      "id": "I_kwDOJWdxls6Aic6q",
      "title": " Conflicting definitions of `encoded_gradient`",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/issues/65",
      "state": "CLOSED",
      "author": "junyechen1996",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "We currently return [`encoded_gradient`](https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/blob/fb64c4a6b2b1189ba5c0684a797c1f347413cce6/poc/flp_pine.py#L359) from `encode_gradient()` method that contains the field elements converted from floating point numbers, and also the bits for L2-norm check. But when we unpack the encoded measurement in `eval()`, we refer to [`encoded_gradient`](https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/blob/fb64c4a6b2b1189ba5c0684a797c1f347413cce6/poc/flp_pine.py#L176) as the field elements converted from floating point numbers only. It would be good to distinguish between the two.",
      "createdAt": "2024-02-27T12:53:04Z",
      "updatedAt": "2024-02-27T23:04:24Z",
      "closedAt": "2024-02-27T23:04:23Z",
      "comments": [
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "Good catch! As suggested in the call today: consider renaming to `encode_gradient_and_range_checked_norm()`, or maybe just `encode_gradient_and_norm()`. Make sure to also replace each instance of the variable `encoded_gradient` that also has the norm in it with something distinctive.",
          "createdAt": "2024-02-27T19:35:48Z",
          "updatedAt": "2024-02-27T19:35:48Z"
        },
        {
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "body": "Closed by #68 . ",
          "createdAt": "2024-02-27T23:04:23Z",
          "updatedAt": "2024-02-27T23:04:23Z"
        }
      ]
    },
    {
      "number": 75,
      "id": "I_kwDOJWdxls6A-rhM",
      "title": "Run tests and linter in CI",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/issues/75",
      "state": "CLOSED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "cjpatton"
      ],
      "labels": [],
      "body": "We could more or less copy the workflows from the base draft:\r\nhttps://github.com/cfrg/draft-irtf-cfrg-vdaf/blob/main/.github/workflows/test.yml\r\nhttps://github.com/cfrg/draft-irtf-cfrg-vdaf/blob/main/.github/workflows/lint-python.yml\r\n",
      "createdAt": "2024-03-01T17:57:54Z",
      "updatedAt": "2024-07-31T20:23:25Z",
      "closedAt": "2024-07-31T20:23:25Z",
      "comments": []
    },
    {
      "number": 95,
      "id": "I_kwDOJWdxls6S3_6D",
      "title": "Idea: Cleaner split of functionality across circuits",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/issues/95",
      "state": "OPEN",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Currently\r\n\r\n1. The main circuit checks if the squared norm claimed by the client is in range and whether the wraparound checks succeeded\r\n2. The other circuit checks if the gradient's squared norm is equal to the value claimed by the client\r\n\r\nThis split makes sense from a performance stand point because the main circuit does all the bit checks and the other circuit does not require joint randomness. However a more natural split of functionality would be:\r\n\r\n1. The first circuit that checks if the squared norm is equal to the claimed value and the claimed value is in range\r\n2. The second circuit that checks the wraparound test results\r\n\r\nAs of VDAF draft 10, the circuit output is a vector and we do the reduction in the query algorithm itself. This means that joint randomness would still not be required for the first circuit. However, the range check for the claimed squared norm requires bit checks, though significantly fewer than in the second circuit.",
      "createdAt": "2024-08-13T20:22:10Z",
      "updatedAt": "2024-08-13T20:22:10Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 98,
      "id": "I_kwDOJWdxls6TngrQ",
      "title": "Double the length of the joint randomness seed",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/issues/98",
      "state": "CLOSED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "See https://github.com/cfrg/draft-irtf-cfrg-vdaf/issues/319#issuecomment-2299836818.",
      "createdAt": "2024-08-20T22:02:47Z",
      "updatedAt": "2024-08-27T18:51:38Z",
      "closedAt": "2024-08-27T18:51:38Z",
      "comments": []
    }
  ],
  "pulls": [
    {
      "number": 1,
      "id": "PR_kwDOJWdxls5SZ5Ja",
      "title": "Describe protocols in PINE",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/1",
      "state": "MERGED",
      "author": "junyechen1996",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "- Parameters for PINE\r\n- 0/1 bit check protocol, same as Prio3SumVec verification\r\n- L2-norm sum-check protocol, can use Prio3 FLP with gadget to verify.\r\n- wraparound protocol with thresholding\r\n- Describe security and privacy guarantee.",
      "createdAt": "2023-06-07T11:52:51Z",
      "updatedAt": "2023-07-26T14:45:09Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "55e5ed84a98ab4ec6deddaf4fd95fb5f5cba74b3",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "protocol-desc",
      "headRefOid": "98e8d54446e76a9c6b228f794c3e31f6fb8d0b1f",
      "closedAt": "2023-06-16T21:29:31Z",
      "mergedAt": "2023-06-16T21:29:31Z",
      "mergedBy": "junyechen1996",
      "mergeCommit": {
        "oid": "f38ca577be862973a1a385c6d4e6b72de7faede0"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 2,
      "id": "PR_kwDOJWdxls5SZ6NE",
      "title": "FLP construction",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/2",
      "state": "MERGED",
      "author": "junyechen1996",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "- Specify FLP encoding interfaces.\r\n- Specify joint randomness used in PINE FLP.\r\n- Specify FLP construction used in VDAF context.\r\n- Provide pseudocode in auxiliary functions",
      "createdAt": "2023-06-07T11:55:06Z",
      "updatedAt": "2023-07-26T14:45:10Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "f38ca577be862973a1a385c6d4e6b72de7faede0",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "flp",
      "headRefOid": "81a85441a0c7cfb900b9869cc04418974a5dae52",
      "closedAt": "2023-06-16T21:30:14Z",
      "mergedAt": "2023-06-16T21:30:14Z",
      "mergedBy": "junyechen1996",
      "mergeCommit": {
        "oid": "05e407e557f8a9ea3d71e95f29e5d96fae5b8fb8"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 9,
      "id": "PR_kwDOJWdxls5TaIW5",
      "title": "Editorical changes",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/9",
      "state": "MERGED",
      "author": "junyechen1996",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "- Addresses the first four items of #3.\r\n- define federated learning better\r\n- define L2-norm better\r\n- remove the word 'new'",
      "createdAt": "2023-06-20T07:31:45Z",
      "updatedAt": "2023-08-16T09:11:47Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "05e407e557f8a9ea3d71e95f29e5d96fae5b8fb8",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "intro-fl",
      "headRefOid": "0584e90ad13bed007d9fcf17740f10767561bd11",
      "closedAt": "2023-08-03T03:19:32Z",
      "mergedAt": "2023-08-03T03:19:32Z",
      "mergedBy": "junyechen1996",
      "mergeCommit": {
        "oid": "f5c56ae3a33b3d6748722ec1de47d3cc138d7ca8"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJWdxls5YtSsQ",
          "commit": {
            "abbreviatedOid": "58ab936"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-20T14:16:02Z",
          "updatedAt": "2023-06-20T14:19:11Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "\"Gradient\" should also be defined. I think it would be useful to provide a reference.",
              "createdAt": "2023-06-20T14:16:02Z",
              "updatedAt": "2023-06-20T14:19:11Z"
            },
            {
              "originalPosition": 23,
              "body": "Cite specific examples of such approaches.",
              "createdAt": "2023-06-20T14:16:36Z",
              "updatedAt": "2023-06-20T14:19:11Z"
            },
            {
              "originalPosition": 22,
              "body": "Paragraph bodies should always wrap at 80 columns.",
              "createdAt": "2023-06-20T14:17:01Z",
              "updatedAt": "2023-06-20T14:19:11Z"
            },
            {
              "originalPosition": 31,
              "body": "What does \"coordinate\" mean in this context?",
              "createdAt": "2023-06-20T14:17:42Z",
              "updatedAt": "2023-06-20T14:19:11Z"
            },
            {
              "originalPosition": 32,
              "body": "What does \"poisoning\" here? If we didn't have robustness (in the sense of VDAF robustness), what would happen?",
              "createdAt": "2023-06-20T14:18:14Z",
              "updatedAt": "2023-06-20T14:19:11Z"
            },
            {
              "originalPosition": 45,
              "body": "-06 was cut last week.\r\n```suggestion\r\nthat conforms to the VDAF interface {{!VDAF=I-D.draft-irtf-cfrg-vdaf-06}}.\r\n```",
              "createdAt": "2023-06-20T14:18:34Z",
              "updatedAt": "2023-06-20T14:19:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5cQelg",
          "commit": {
            "abbreviatedOid": "7ee4f69"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "@cjpatton I had to add a placeholder citation for PINE, so I can point to it in the introduction section about the previous approaches.",
          "createdAt": "2023-07-26T14:06:27Z",
          "updatedAt": "2023-07-26T14:22:15Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "I cited a couple, but also added a pointer to the introduction section of PINE paper, which has a more comprehensive list.",
              "createdAt": "2023-07-26T14:06:27Z",
              "updatedAt": "2023-07-26T14:22:15Z"
            },
            {
              "originalPosition": 31,
              "body": "How about \"square root of the sum of squares of values at all vector dimensions\"?",
              "createdAt": "2023-07-26T14:06:56Z",
              "updatedAt": "2023-07-26T14:22:15Z"
            },
            {
              "originalPosition": 22,
              "body": "I already did at this line, anywhere else that I missed?",
              "createdAt": "2023-07-26T14:07:36Z",
              "updatedAt": "2023-07-26T14:22:15Z"
            },
            {
              "originalPosition": 19,
              "body": "I added a reference to federated learning (from Google blog), and a reference to \"gradient\" (wikipedia). Let me know if these are appropriate sources.",
              "createdAt": "2023-07-26T14:08:13Z",
              "updatedAt": "2023-07-26T14:22:15Z"
            },
            {
              "originalPosition": 32,
              "body": "I added \"minimizes the risk of training a bad machine learning model\". Let me know if that's clearer.",
              "createdAt": "2023-07-26T14:08:42Z",
              "updatedAt": "2023-07-26T14:22:15Z"
            },
            {
              "originalPosition": 45,
              "body": "Fixed.",
              "createdAt": "2023-07-26T14:21:29Z",
              "updatedAt": "2023-07-26T14:22:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5cT9r-",
          "commit": {
            "abbreviatedOid": "7ee4f69"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-26T22:56:19Z",
          "updatedAt": "2023-07-26T22:57:49Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "```suggestion\r\n    title: \"[TODO: Add arxiv link when it's ready]\"\r\n```",
              "createdAt": "2023-07-26T22:56:19Z",
              "updatedAt": "2023-07-26T22:57:50Z"
            },
            {
              "originalPosition": 26,
              "body": "```suggestion\r\n  DivviUpVDAF:\r\n```",
              "createdAt": "2023-07-26T22:57:42Z",
              "updatedAt": "2023-07-26T22:57:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5c813S",
          "commit": {
            "abbreviatedOid": "58ab936"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-02T16:46:25Z",
          "updatedAt": "2023-08-02T16:46:25Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "Updated it with a formal reference: https://www.elibm.org/article/10011456 (it's one of the earlier books about gradient descent)",
              "createdAt": "2023-08-02T16:46:25Z",
              "updatedAt": "2023-08-02T16:46:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5c915g",
          "commit": {
            "abbreviatedOid": "0584e90"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-08-02T19:31:42Z",
          "updatedAt": "2023-08-02T19:31:42Z",
          "comments": []
        }
      ]
    },
    {
      "number": 10,
      "id": "PR_kwDOJWdxls5UhlkP",
      "title": "define validity circuits",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/10",
      "state": "MERGED",
      "author": "junyechen1996",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "Attempts to address https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/issues/8",
      "createdAt": "2023-07-03T13:07:50Z",
      "updatedAt": "2023-08-21T03:18:09Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "4d8b3a17a9db180ec7c629ae782100100bd9aec5",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "validity-circuit",
      "headRefOid": "159963b42fa4dd600b19d08c2d2320bd7a8a0ef5",
      "closedAt": "2023-08-16T21:24:48Z",
      "mergedAt": "2023-08-16T21:24:48Z",
      "mergedBy": "junyechen1996",
      "mergeCommit": {
        "oid": "8ce128b2c3a2a3a88a425dbf4bb8d747492aa1b4"
      },
      "comments": [
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "Tip on GH best practice, for future reference: It's best to prefix your branches with something that identifiers you, e.g., \"junyechen1996/validity-circuit\" instead of just \"validity circuit\"",
          "createdAt": "2023-07-13T19:58:20Z",
          "updatedAt": "2023-07-13T19:58:20Z"
        },
        {
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "body": "Thanks @cjpatton for the thoughtful comments! I've addressed most of them if not all. Some of the renaming will be tracked in #13 .\r\n\r\n> Tip on GH best practice, for future reference: It's best to prefix your branches with something that identifiers you, e.g., \"junyechen1996/validity-circuit\" instead of just \"validity circuit\"\r\n\r\nDefinitely wasn't following the best practice because I thought it was in a personal repo :) will do so going forward.\r\n\r\n> I'm working my way through the encoding steps for the FLP and believe I've encountered a bug.\r\n\r\nI think the bug is due to `offset` being very confusing. I've removed `offset` completely, by growing the list directly instead.",
          "createdAt": "2023-07-26T10:04:26Z",
          "updatedAt": "2023-07-26T10:04:26Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJWdxls5bJRw7",
          "commit": {
            "abbreviatedOid": "ddaab3b"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-13T20:00:02Z",
          "updatedAt": "2023-07-13T20:05:29Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "```suggestion\r\nThis section instantiates `FlpGeneric` ({{Section 7.3.2 of !VDAF}}) for PINE by specifying the validity circuit and\r\n```",
              "createdAt": "2023-07-13T20:00:02Z",
              "updatedAt": "2023-07-13T20:05:29Z"
            },
            {
              "originalPosition": 176,
              "body": "@wangshan here is a more concrete situation where we end up using multiple gadgets in the same circuit (re: https://github.com/cfrg/draft-irtf-cfrg-vdaf/issues/256)",
              "createdAt": "2023-07-13T20:05:24Z",
              "updatedAt": "2023-07-14T01:04:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5bJVvC",
          "commit": {
            "abbreviatedOid": "ddaab3b"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-13T20:12:29Z",
          "updatedAt": "2023-07-13T20:52:20Z",
          "comments": [
            {
              "originalPosition": 152,
              "body": "Do you intend the output to be a vector of floats or integers? (I forget one python3 does here.)",
              "createdAt": "2023-07-13T20:12:29Z",
              "updatedAt": "2023-07-13T20:52:20Z"
            },
            {
              "originalPosition": 37,
              "body": "IIUC the first `f` bits are used for positive numbers and the last `f` bits are used for negative numbers? If so, do we need to require that `f` is less than half of the bits used to encode a field element, e.g., `f < 64` for `Field128`?",
              "createdAt": "2023-07-13T20:52:14Z",
              "updatedAt": "2023-07-13T20:52:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5bJpnB",
          "commit": {
            "abbreviatedOid": "ddaab3b"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "I'm working my way through the encoding steps for the FLP and believe I've encountered a bug. I'll pause here and wait for you to take a look :)",
          "createdAt": "2023-07-13T21:17:27Z",
          "updatedAt": "2023-07-13T22:39:47Z",
          "comments": [
            {
              "originalPosition": 85,
              "body": "Short names makes constants hard to read. Can we think of something more descriptive than `B`? How about `MAX_SQUARED_L2_NORM`? It's a little verbose maybe, but my eye confuses the current name with `b`, `b0`, etc. Basically I want to look at the name and understand its intended semantics.",
              "createdAt": "2023-07-13T21:44:22Z",
              "updatedAt": "2023-07-13T22:39:47Z"
            },
            {
              "originalPosition": 86,
              "body": "Here as well I would like to know what `b0` by just reading the code and not having to refer to the table. ",
              "createdAt": "2023-07-13T21:57:45Z",
              "updatedAt": "2023-07-13T22:39:47Z"
            },
            {
              "originalPosition": 76,
              "body": "I'm not sure I like the name \"new_encoded_measurement\". I think it would be good to figure out more meaningful names for the intermediate things. What about something like this:\r\n\r\n```python3\r\n# Encode each element of `measurements as a `Pine.Field` according to the spec\r\npartially_encoded = Pine.initialize_encoding(measurement) # type(measurements) == Vec[f64]\r\n# blah blah blah derive wraparound joint randomness ...\r\nencoded = Pine.finalize_encoding_with_wraparound_joint_rand(partially_encoded, wraparound_joint_rand)\r\n```\r\n\r\nThen `encoded` is the thing we all `prove()` and `query()` on?",
              "createdAt": "2023-07-13T22:13:01Z",
              "updatedAt": "2023-07-13T22:39:48Z"
            },
            {
              "originalPosition": 94,
              "body": "bug: If I'm not mistaken it looks like we're overriding the value we just created in the previous `for`-loop.\r\n\r\nWhat about just using `.append()` to grow `new_encoded_measurement`?",
              "createdAt": "2023-07-13T22:39:04Z",
              "updatedAt": "2023-07-13T22:39:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5bJ8wu",
          "commit": {
            "abbreviatedOid": "ddaab3b"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-13T22:46:08Z",
          "updatedAt": "2023-07-13T22:46:09Z",
          "comments": [
            {
              "originalPosition": 94,
              "body": "Ohh whoops, I see line 811 now, which updates `offset`. Still I think it would be clearer to just grow the list, rather than preallocate a bunch of zeros and overwrite them.",
              "createdAt": "2023-07-13T22:46:09Z",
              "updatedAt": "2023-07-13T22:46:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5bKQqE",
          "commit": {
            "abbreviatedOid": "ddaab3b"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-14T00:56:04Z",
          "updatedAt": "2023-07-14T00:56:05Z",
          "comments": [
            {
              "originalPosition": 131,
              "body": "Is the intention here to write the `g`s then the `s`? It would be easier to read (and, IMO, write correct code) if we just wrote `g1, s1, g2, s2, ...` and so on.",
              "createdAt": "2023-07-14T00:56:04Z",
              "updatedAt": "2023-07-14T00:56:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5bKRtJ",
          "commit": {
            "abbreviatedOid": "ddaab3b"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-14T01:03:59Z",
          "updatedAt": "2023-07-14T01:03:59Z",
          "comments": [
            {
              "originalPosition": 114,
              "body": "IIUC we expect the prover to fail on **exactly** N of the `r` repetitions, correct? In that case I believe we need to do the following:\r\n* Add a counter for the number of successes.\r\n* If the trial succeeds, but the number of successes is N, then we mark this case as a failure.\r\n* If after `r` trials the number of successes is less than N, then we raise an error. (the client SHOULD retry, at the level of DAP/VDAF.)\r\n\r\nDo I have that right?",
              "createdAt": "2023-07-14T01:03:59Z",
              "updatedAt": "2023-07-14T01:03:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5cN5e3",
          "commit": {
            "abbreviatedOid": "3ba8d91"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-26T08:44:06Z",
          "updatedAt": "2023-07-26T10:01:18Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "Done.",
              "createdAt": "2023-07-26T08:44:06Z",
              "updatedAt": "2023-07-26T10:01:18Z"
            },
            {
              "originalPosition": 37,
              "body": "We have field size requirement for both, [here](https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/blob/main/draft-chen-cfrg-vdaf-pine.md?plain=1#L258-L259) for L2-norm sum-check, i.e. `q >= 3 * B + 2`, and [here](https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/blob/main/draft-chen-cfrg-vdaf-pine.md?plain=1#L338-L339) for wraparound check. `B` comes from `b * 2^f`, so we require field size to be at least 3 times as large as valid field elements for positive floating points, so each `x` should map to a valid field element for honest client. I don't think `f < 64` is a strict requirement here, but I guess the goal is should we do something in the code here with some invalid `x > b`, where `b` is the L2-norm bound in f64, or should we just make the field size requirement clearer in a separate section in the draft?",
              "createdAt": "2023-07-26T09:01:24Z",
              "updatedAt": "2023-07-26T10:01:18Z"
            },
            {
              "originalPosition": 85,
              "body": "Yes it's a good suggestion. I initially tried to use `B`, `g`, `s` to better map what we had in the paper. I think we can use more descriptive names for PINE parameters table at the beginning, and specify the mapping to the paper there?",
              "createdAt": "2023-07-26T09:10:41Z",
              "updatedAt": "2023-07-26T10:01:18Z"
            },
            {
              "originalPosition": 85,
              "body": "I've filed https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/issues/13 to track this.",
              "createdAt": "2023-07-26T09:17:16Z",
              "updatedAt": "2023-07-26T10:01:18Z"
            },
            {
              "originalPosition": 76,
              "body": "I'm ok with renaming the current `encoded_measurement` to `partially_encoded`, and renaming the current `new_encoded_measurement` to `encoded_measurement`.\r\n\r\nRegarding method names, I was trying to map the floating point encoding part to the current `FlpGeneric.encode` (or `Type.encode_measurement`) method, and provide an additional method to run all the PINE checks and encode the results. The two phases of encoding can't happen together because of wraparound joint randomness derivation. I will rename the latter to `finalize_encoding_with_wraparound_joint_rand`, but thoughts on the first method name, `encode` or `initialize_encoding`?",
              "createdAt": "2023-07-26T09:20:00Z",
              "updatedAt": "2023-07-26T10:01:18Z"
            },
            {
              "originalPosition": 94,
              "body": "Makes sense, initially I was thinking allocating the list once, so I can set the difference field elements `s` directly in the result list, but it might be clearer to grow the list in the draft. I've got rid of `offset`.",
              "createdAt": "2023-07-26T09:37:05Z",
              "updatedAt": "2023-07-26T10:01:18Z"
            },
            {
              "originalPosition": 131,
              "body": "The paper uses `g` for success bit, and `s` for the difference field element... (I sometimes have to wrap my head around that too) But let me address that in #13 , to at least provide better names for the parameters.",
              "createdAt": "2023-07-26T09:38:11Z",
              "updatedAt": "2023-07-26T10:03:32Z"
            },
            {
              "originalPosition": 152,
              "body": "A vector of floats. In python3, `/` will output float always. ",
              "createdAt": "2023-07-26T09:38:40Z",
              "updatedAt": "2023-07-26T10:01:18Z"
            },
            {
              "originalPosition": 114,
              "body": "Good catch! I realized I had the [check on the minimum number of successful repetitions](https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/blob/validity-circuit/draft-chen-cfrg-vdaf-pine.md?plain=1#L956-L958) in the Aggregator part, but doesn't keep track of the case where Client fails more than the minimum number of successful repetitions. Updated the Client code to keep track of successful repetitions, and throw an exception at the end if the number of successful repetitions is not equal to minimum number of successful repetitions (let me know if that's appropriate to advise a retry).",
              "createdAt": "2023-07-26T09:54:17Z",
              "updatedAt": "2023-07-26T10:01:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5c986-",
          "commit": {
            "abbreviatedOid": "3ba8d91"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "I've gone through the \"finalize encoding\" step and think everything looks implementable from there. Next step is to understand how the verifier works.",
          "createdAt": "2023-08-02T19:53:47Z",
          "updatedAt": "2023-08-02T20:52:29Z",
          "comments": [
            {
              "originalPosition": 103,
              "body": "nit: In the VDAF draft we're moving to preferring python primitives https://github.com/cfrg/draft-irtf-cfrg-vdaf/issues/222\r\n```suggestion\r\n    partially_encoded: list[Pine.Field],\r\n```",
              "createdAt": "2023-08-02T19:53:47Z",
              "updatedAt": "2023-08-02T20:52:29Z"
            },
            {
              "originalPosition": 125,
              "body": "Not assumed; this is by definition\r\n```suggestion\r\n    # `abs_L` is the abs(L) in {{wraparound}}.\r\n```",
              "createdAt": "2023-08-02T19:56:08Z",
              "updatedAt": "2023-08-02T20:52:29Z"
            },
            {
              "originalPosition": 143,
              "body": "For consistency with the high-level description of the wraparound check above. (Please make sure this is actually consistent before taking the suggestion :) )\r\n```suggestion\r\n    for k in range(Pine.r):\r\n```",
              "createdAt": "2023-08-02T20:03:42Z",
              "updatedAt": "2023-08-02T20:52:29Z"
            },
            {
              "originalPosition": 141,
              "body": "The Client should pass *exactly* this number of times.\r\n```suggestion\r\n    r_pass = floor(Pine.TAU * Pine.r)\r\n```",
              "createdAt": "2023-08-02T20:08:44Z",
              "updatedAt": "2023-08-02T20:52:29Z"
            },
            {
              "originalPosition": 151,
              "body": "`H` is declared, but only `wr_upper_bound is used. I'd suggest adding an auxiliary function that hides some of the details here, at this level of abstraction. Something like this:\r\n```python\r\nif Pine.is_dot_product_in_range(V1):\r\n```\r\n\r\nwhere `is_dot_product_in_range()` computes `wr_upper_bound`.\r\n\r\nTaking this step further, it would make the code more readable if we wrapped the dot-product computation in a helper function. Something like `Pine.overlap_test_succeeds(partially_encoded: list[Pine.Field], z: list[Pine.Field]) -> bool`",
              "createdAt": "2023-08-02T20:15:24Z",
              "updatedAt": "2023-08-02T20:52:29Z"
            },
            {
              "originalPosition": 152,
              "body": "I think we should figure out a way to convey here that the output is expected to be a float. Maybe just add a code comment?",
              "createdAt": "2023-08-02T20:18:37Z",
              "updatedAt": "2023-08-02T20:52:29Z"
            },
            {
              "originalPosition": 128,
              "body": "So, `wr_upper_bound = 2*abs_L + 1`? Why not just write it that way?",
              "createdAt": "2023-08-02T20:23:23Z",
              "updatedAt": "2023-08-02T20:52:29Z"
            },
            {
              "originalPosition": 176,
              "body": "This loop appears several times in the code. I'd suggest moving it to an auxiliary function.",
              "createdAt": "2023-08-02T20:32:27Z",
              "updatedAt": "2023-08-02T20:52:29Z"
            },
            {
              "originalPosition": 133,
              "body": "Difference between what and what? What purpose does `s` serve?",
              "createdAt": "2023-08-02T20:38:32Z",
              "updatedAt": "2023-08-02T20:52:29Z"
            },
            {
              "originalPosition": 182,
              "body": "With what probability do we expect to fail here? `TAU`?",
              "createdAt": "2023-08-02T20:40:06Z",
              "updatedAt": "2023-08-02T20:52:29Z"
            },
            {
              "originalPosition": 177,
              "body": "For clarity, I would stick this in a separate vector, call it `test_results` or something, and assemble `encoded_mesurement` at the very end so that the code structure better reflects the structure of the output.",
              "createdAt": "2023-08-02T20:41:58Z",
              "updatedAt": "2023-08-02T20:52:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5c-VUA",
          "commit": {
            "abbreviatedOid": "3ba8d91"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-02T21:07:08Z",
          "updatedAt": "2023-08-02T21:07:08Z",
          "comments": [
            {
              "originalPosition": 312,
              "body": "Readability: Rename `Y1` to `V1` so that it's clear this is expected to be the same value. Maybe rename `V1` to `claimed_V1`?",
              "createdAt": "2023-08-02T21:07:08Z",
              "updatedAt": "2023-08-02T21:07:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5eJa4J",
          "commit": {
            "abbreviatedOid": "3ba8d91"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-15T22:14:04Z",
          "updatedAt": "2023-08-16T00:57:50Z",
          "comments": [
            {
              "originalPosition": 84,
              "body": "If `output_len` is not divisible by `NUM_ELEMS_IN_ONE_BYTE` we'll be one prg output short, correct?",
              "createdAt": "2023-08-15T22:14:04Z",
              "updatedAt": "2023-08-16T00:57:50Z"
            },
            {
              "originalPosition": 126,
              "body": "This is a `float` but is used as a `Field128` below. Did you intend to cast?",
              "createdAt": "2023-08-16T00:33:30Z",
              "updatedAt": "2023-08-16T00:57:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5eO8K8",
          "commit": {
            "abbreviatedOid": "3ba8d91"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-16T16:07:52Z",
          "updatedAt": "2023-08-16T17:08:28Z",
          "comments": [
            {
              "originalPosition": 84,
              "body": "The `ceil()` function will make sure there is one last byte that handles the sampling the remaining field elements (<4 of them). Each byte can sample four field elements.",
              "createdAt": "2023-08-16T16:07:52Z",
              "updatedAt": "2023-08-16T17:08:29Z"
            },
            {
              "originalPosition": 103,
              "body": "Made a pass for the changes in this PR. Will fix other places in a different PR.",
              "createdAt": "2023-08-16T16:08:48Z",
              "updatedAt": "2023-08-16T17:08:28Z"
            },
            {
              "originalPosition": 125,
              "body": "I spelled out in details how the bounds are computed in an auxiliary function `wr_bounds()`, and use better parameter names for these bounds. Will fix up the parameter names in other places in another PR.",
              "createdAt": "2023-08-16T16:48:31Z",
              "updatedAt": "2023-08-16T17:08:28Z"
            },
            {
              "originalPosition": 126,
              "body": "Yes. Spelled out the bounds in `wr_bounds`, so there is no ambiguity on the types.",
              "createdAt": "2023-08-16T16:48:50Z",
              "updatedAt": "2023-08-16T17:08:29Z"
            },
            {
              "originalPosition": 133,
              "body": "Added more explanation about what this difference is.",
              "createdAt": "2023-08-16T16:49:09Z",
              "updatedAt": "2023-08-16T17:08:29Z"
            },
            {
              "originalPosition": 143,
              "body": "Yes, good point.",
              "createdAt": "2023-08-16T16:49:22Z",
              "updatedAt": "2023-08-16T17:08:28Z"
            },
            {
              "originalPosition": 151,
              "body": "Yes agreed. I have an auxiliary function that's called `compute_dot_prod()`, and functions to compute wraparound bounds. Let me know if it's clearer now.",
              "createdAt": "2023-08-16T16:50:16Z",
              "updatedAt": "2023-08-16T17:08:29Z"
            },
            {
              "originalPosition": 176,
              "body": "Yes, defined two auxiliary functions on `Field`: `encode_into_bit_vector()` and `decode_from_bit_vector()`.",
              "createdAt": "2023-08-16T16:50:52Z",
              "updatedAt": "2023-08-16T17:08:29Z"
            },
            {
              "originalPosition": 182,
              "body": "It would be quantified by the CDF function of a binomial distribution, with number of trials equal to `r`, number of successes equal to `r_pass`, and probability equal to `1 - TAU`. The CDF would compute \"the probability of observing the number of successes less than `r_pass`\".\r\n\r\nI hope to address this in #15 ",
              "createdAt": "2023-08-16T16:52:22Z",
              "updatedAt": "2023-08-16T17:08:29Z"
            },
            {
              "originalPosition": 152,
              "body": "Yes, put float64<->field into auxiliary functions.",
              "createdAt": "2023-08-16T16:52:57Z",
              "updatedAt": "2023-08-16T17:08:28Z"
            },
            {
              "originalPosition": 312,
              "body": "I renamed all the variables in this PR. Let me know if it's clearer.",
              "createdAt": "2023-08-16T16:53:13Z",
              "updatedAt": "2023-08-16T17:08:29Z"
            },
            {
              "originalPosition": 86,
              "body": "Agreed, defined auxiliary functions to compute `b0` and `b1`.",
              "createdAt": "2023-08-16T16:53:37Z",
              "updatedAt": "2023-08-16T17:08:28Z"
            },
            {
              "originalPosition": 177,
              "body": "During implementation, wouldn't it be better to have memory locality when accessing the bits as you go through the results in each repetition?",
              "createdAt": "2023-08-16T16:57:25Z",
              "updatedAt": "2023-08-16T17:08:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5eQt1z",
          "commit": {
            "abbreviatedOid": "159963b"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-08-16T21:22:02Z",
          "updatedAt": "2023-08-16T21:22:02Z",
          "comments": []
        }
      ]
    },
    {
      "number": 11,
      "id": "PR_kwDOJWdxls5VdUlX",
      "title": "Don't use the word \"protocol\" describe validity checks",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/11",
      "state": "MERGED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-07-13T20:29:18Z",
      "updatedAt": "2023-07-26T22:59:47Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "05e407e557f8a9ea3d71e95f29e5d96fae5b8fb8",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "cjpatton/protocol",
      "headRefOid": "e7b447ba089cccfbde03899adfdae21f92669090",
      "closedAt": "2023-07-26T22:59:47Z",
      "mergedAt": "2023-07-26T22:59:47Z",
      "mergedBy": "cjpatton",
      "mergeCommit": {
        "oid": "c8b727e3c0c6dd22f00570630ad97aa026a66182"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJWdxls5cN3Sk",
          "commit": {
            "abbreviatedOid": "e7b447b"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "LGTM, I'll change the word \"protocol\" in other parts of the draft. Thanks!",
          "createdAt": "2023-07-26T08:41:03Z",
          "updatedAt": "2023-07-26T08:41:03Z",
          "comments": []
        }
      ]
    },
    {
      "number": 14,
      "id": "PR_kwDOJWdxls5XBuIE",
      "title": "Address issue #6 - specify float64 encoding into field integer more c\u2026",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/14",
      "state": "MERGED",
      "author": "junyechen1996",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "\u2026oncretely",
      "createdAt": "2023-08-02T16:17:29Z",
      "updatedAt": "2023-08-16T09:11:46Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "f5c56ae3a33b3d6748722ec1de47d3cc138d7ca8",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "junyec/f64-encoding",
      "headRefOid": "59ed079be023aafd37c7ff9ba7fc109973e25eaa",
      "closedAt": "2023-08-09T18:29:35Z",
      "mergedAt": "2023-08-09T18:29:35Z",
      "mergedBy": "junyechen1996",
      "mergeCommit": {
        "oid": "4d8b3a17a9db180ec7c629ae782100100bd9aec5"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJWdxls5c92z0",
          "commit": {
            "abbreviatedOid": "f8c9880"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "This looks to me to be the right amount of precision \ud83d\udc4d I'll provide more in-depth feedback as I go through the implementation, but this is good enough to merge.\r\n\r\nOne high level question inline.",
          "createdAt": "2023-08-02T19:34:37Z",
          "updatedAt": "2023-08-02T19:36:30Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "Why `127`? Because this is fits into `Field128`?\r\n\r\nIIRC we represent negative values with the least significant bits and positive values with the most significant bits (or vice versa). To distinguish, don't we need `f` to be less than *half* the bit width, so `f < 63`?",
              "createdAt": "2023-08-02T19:34:37Z",
              "updatedAt": "2023-08-02T19:36:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5c_lXn",
          "commit": {
            "abbreviatedOid": "f8c9880"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-03T03:18:52Z",
          "updatedAt": "2023-08-03T03:18:52Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "> Why 127? Because this is fits into Field128?\r\n\r\nBecause when I was implementing it, and realized when doing the multiplication from f64 to field integer, I can do something like `x * ((1u128 << f) as f64)`, where 127 is the maximum allowed for `f` here, otherwise it triggers an overflow for the bit shifting :) You would also need to ensure  `x.abs() <= ((u128::try_from(F::modulus() >> 1).unwrap()) as f64) / ((1u128 << f) as f64)`, so the multiplication doesn't create an infinity.\r\nI don't think anything more than 127 is worth tackling here. It's certainly possible but it most likely won't get used in practice. Having 127 as a bound here hopefully simplifies the implementation a bit.\r\n\r\n> To distinguish, don't we need f to be less than half the bit width, so f < 63?\r\n\r\nI think you are implicitly assuming L2-norm bound `b` will be 1? which we are not assuming in the draft. In order to distinguish between positive values and negative values for f64 encoding purposes, I think requiring `floor(b * 2^f) <= floor(q/2)` is enough, i.e. the L2-norm bound in field integer is at most `floor(q/2)`. This will ensure (1) positive values get encoded into `[1, floor(q/2)]`, (2) negative values get encoded into `[ceil(q/2), q)`, (3) 0 gets encoded as 0, and (4) there is no overlap between positive range and negative range. Let me know if I miss something here.\r\n\r\nThere are other field size requirements in both L2-norm sum-check, and wraparound check. Eventually the field size requirement is dominated by wraparound check I think.",
              "createdAt": "2023-08-03T03:18:52Z",
              "updatedAt": "2023-08-03T03:34:34Z"
            }
          ]
        }
      ]
    },
    {
      "number": 17,
      "id": "PR_kwDOJWdxls5YX-pv",
      "title": "Address issue 16: splitting parameters into d\u2026",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/17",
      "state": "MERGED",
      "author": "junyechen1996",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "\u2026ifferent tables\r\n\r\n- a table for user parameters\r\n- a table for operational parameters that should be initialized in PINE constructor/init method. They are computed based on user parameters, and soundness and completeness error targets.\r\n- The exact soundness and completeness error are yet to be defined.\r\n- The exact communication cost analysis is yet to be defined.",
      "createdAt": "2023-08-21T11:15:06Z",
      "updatedAt": "2023-08-25T10:07:11Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "fbec9f416651df25e04826fb64da0163d66c3fb7",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "junyec/split-parameters",
      "headRefOid": "1ce2f43cd8a3ccbd9ea6d063e2fc26fbecebd90c",
      "closedAt": "2023-08-24T22:27:24Z",
      "mergedAt": "2023-08-24T22:27:24Z",
      "mergedBy": "junyechen1996",
      "mergeCommit": {
        "oid": "b49651cb3c8129653c5b923fecd786e6122261f4"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJWdxls5enzMM",
          "commit": {
            "abbreviatedOid": "053d4db"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-21T17:00:34Z",
          "updatedAt": "2023-08-21T17:00:35Z",
          "comments": [
            {
              "originalPosition": 64,
              "body": "Move this table out of this section and into the sections for which the parameters are relevant. Some are relevant to {{flp}}, others are only relevant to {{vdaf}}.",
              "createdAt": "2023-08-21T17:00:35Z",
              "updatedAt": "2023-08-21T17:00:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5e70RG",
          "commit": {
            "abbreviatedOid": "1ce2f43"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "@cjpatton I reworked this PR, the changes are summarized as the following:\r\n\r\n- I removed the brute force search of operational parameters in this PR, now `init_parameters` simply set default values.\r\n- There are two tables under {{flp}}, one for parameters to compute validity circuit, one for FLP parameters (e.g. `WRAPAROUND_JOINT_RAND_LEN`).\r\n- There is one table under {{vdaf}}, which Is meant for VDAF parameters, which only contains number of proof repetitions for gadgets, but we always set it to 1 for the time being.\r\n- Feel free to ignore the variable renaming in the code for validity circuit.",
          "createdAt": "2023-08-24T03:57:20Z",
          "updatedAt": "2023-08-24T04:10:33Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "This table now gets moved under {{flp}}, with the renamed variables to indicate their purposes.",
              "createdAt": "2023-08-24T03:57:20Z",
              "updatedAt": "2023-08-24T04:10:33Z"
            },
            {
              "originalPosition": 56,
              "body": "I divide the table into two: (1) parameters to compute the validity circuit, (2) parameters for FLP. @cjpatton Let me know if it makes more sense.",
              "createdAt": "2023-08-24T03:58:00Z",
              "updatedAt": "2023-08-24T04:10:33Z"
            },
            {
              "originalPosition": 79,
              "body": "I'm not sure if this is the right place to list these parameters here, as we haven't talked about wraparound check in {{flp}}. I did make a reference to {{wraparound}}, which eventually will be filled out. What do you think? @cjpatton ",
              "createdAt": "2023-08-24T04:01:05Z",
              "updatedAt": "2023-08-24T04:10:33Z"
            },
            {
              "originalPosition": 143,
              "body": "The rest of the this PR are variable renaming, except `init_parameters` under auxiliary function sets default parameters to compute validity circuit. Feel free to ignore the variable renaming changes @cjpatton , or changes beyond this point in general, which probably need some rework later on.",
              "createdAt": "2023-08-24T04:01:50Z",
              "updatedAt": "2023-08-24T11:44:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5e-Ueq",
          "commit": {
            "abbreviatedOid": "1ce2f43"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-24T11:40:39Z",
          "updatedAt": "2023-08-24T11:40:40Z",
          "comments": [
            {
              "originalPosition": 71,
              "body": "`abs_wr_lower_bound` and `abs_wr_upper_bound` would refer to `-\\beta_1` and `\\beta_2` in range check (see first bullet point in #26 ). `shifted_wr_upper_bound` would be `\\beta_2 - \\beta_1`, but I hope to remove it once we have a formal section to discuss range check, because there are too many variables. For now, I would keep it so the validity circuit code stays as-is.",
              "createdAt": "2023-08-24T11:40:39Z",
              "updatedAt": "2023-08-24T11:43:32Z"
            }
          ]
        }
      ]
    },
    {
      "number": 18,
      "id": "PR_kwDOJWdxls5YYEBL",
      "title": "Rework intro to explain motivation better",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/18",
      "state": "MERGED",
      "author": "junyechen1996",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "- explain federated learning first\r\n- explain computing aggregate for federated learning still leaks information\r\n- privacy requirement for real number vector aggregation\r\n- robustness requirement for real number vector aggregation\r\n- introduce PINE\r\n- TODO add a diagram to explain federated learning\r\n- TODO citations why sending gradients still leaks user information",
      "createdAt": "2023-08-21T11:30:38Z",
      "updatedAt": "2023-08-23T12:44:08Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "cedeace098e9776648dba741c457649723bf676c",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "junyec/rework-intro",
      "headRefOid": "28afcb0662c8660f4f173e34b22c12f9a2a80c33",
      "closedAt": "2023-08-23T12:43:53Z",
      "mergedAt": "2023-08-23T12:43:53Z",
      "mergedBy": "junyechen1996",
      "mergeCommit": {
        "oid": "2d7f17ca170d88f6a5ff5e41738c43566e1229c7"
      },
      "comments": [
        {
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "body": "Squashed.",
          "createdAt": "2023-08-23T12:43:48Z",
          "updatedAt": "2023-08-23T12:43:48Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJWdxls5ennPZ",
          "commit": {
            "abbreviatedOid": "2a6b3fd"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-21T16:43:07Z",
          "updatedAt": "2023-08-21T16:53:58Z",
          "comments": [
            {
              "originalPosition": 56,
              "body": "This is repetitive and I think can be simplified to\r\n```suggestion\r\nnumbers. A common goal is to ensure each gradient has a\r\n```",
              "createdAt": "2023-08-21T16:43:07Z",
              "updatedAt": "2023-08-21T16:53:58Z"
            },
            {
              "originalPosition": 61,
              "body": "You're not actually saying anything new in this sentence. \r\n```suggestion\r\nroot of the sum of squares of values at all vector dimensions.\r\n```",
              "createdAt": "2023-08-21T16:44:23Z",
              "updatedAt": "2023-08-21T16:53:58Z"
            },
            {
              "originalPosition": 64,
              "body": "Not quite. The question is why \"bounded L2-norm\" in particular? Put another way, we could just do a range check for each element of the gradient vector: why is this insufficient?",
              "createdAt": "2023-08-21T16:46:35Z",
              "updatedAt": "2023-08-21T16:53:58Z"
            },
            {
              "originalPosition": 69,
              "body": "It's awkward to refer to the Intro in a paper to support your argument here. Your intro needs to be self-contained.",
              "createdAt": "2023-08-21T16:48:56Z",
              "updatedAt": "2023-08-21T16:53:58Z"
            },
            {
              "originalPosition": 86,
              "body": "```suggestion\r\na new technique and supporting analysis {{PINE}} that, for high-dimensional data,\r\n```",
              "createdAt": "2023-08-21T16:50:55Z",
              "updatedAt": "2023-08-21T16:53:58Z"
            },
            {
              "originalPosition": 80,
              "body": "```suggestion\r\nThis dcoument describes PINE (\"P\"rivate \"I\"nexpensive \"N\"orm\r\n```",
              "createdAt": "2023-08-21T16:51:04Z",
              "updatedAt": "2023-08-21T16:53:58Z"
            },
            {
              "originalPosition": 78,
              "body": "I guess I just don't really see the purpose of this paragraph. What information do you want to convey, and how is that information relevant to the reader at this point?",
              "createdAt": "2023-08-21T16:52:25Z",
              "updatedAt": "2023-08-21T16:53:58Z"
            },
            {
              "originalPosition": 91,
              "body": "Definitely not :) Let's save it for the overview.",
              "createdAt": "2023-08-21T16:52:43Z",
              "updatedAt": "2023-08-21T16:57:50Z"
            },
            {
              "originalPosition": 144,
              "body": "Why mention completeness error in the intro?",
              "createdAt": "2023-08-21T16:53:55Z",
              "updatedAt": "2023-08-21T16:53:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5etnX_",
          "commit": {
            "abbreviatedOid": "3468da7"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-22T09:47:37Z",
          "updatedAt": "2023-08-22T10:04:39Z",
          "comments": [
            {
              "originalPosition": 64,
              "body": "Good point. Most papers that I read simply say it (L2-norm) is a popular way to bound the contribution from a client, I don't have a good citation for it yet, still will leave this item open for now until I have a good source to cite. I think intuitively L2-norm bound is a good way of limiting client contribution across all coordinates, i.e. the exact distribution across coordinates is unknown, some are higher, some are lower. Having a range check at each coordinate is not as flexible, and if we try to allow flexibility such as allowing each coordinate to be bounded by 1.0, then the overall L2 norm of the vector can be as large as sqrt(d), so a Client can still send a vector that has much larger influence than other clients.\r\n\r\nHaving a bounded L2-norm also allows federated learning applications to apply DP noise (e.g. Gaussian) based on the established norm bound, so Client first clips its vector with `l2_norm_bound`, then applies noise.",
              "createdAt": "2023-08-22T09:47:37Z",
              "updatedAt": "2023-08-22T10:04:39Z"
            },
            {
              "originalPosition": 69,
              "body": "Removed reference to the paper. My goal was to point readers to the paper, which has more reference to the \"prior work\".",
              "createdAt": "2023-08-22T09:48:21Z",
              "updatedAt": "2023-08-22T10:04:39Z"
            },
            {
              "originalPosition": 78,
              "body": "I think give readers an intuition on why PINE exists. This paragraph basically gives two prior approaches, one favors more exact verification but sacrifices communication cost, one is efficient in communication, but doesn't perform exact verification. PINE addresses both problems.",
              "createdAt": "2023-08-22T09:50:44Z",
              "updatedAt": "2023-08-22T10:04:39Z"
            },
            {
              "originalPosition": 144,
              "body": "Just an intuition on what PINE sacrifices in order to achieve robustness and efficient communication cost. Is it enough to just say \"Gradients generated by honest Clients should be accepted with high (or rather, overwhelming) probability.\" , and leave completeness error to {{wraparound-overview}}?",
              "createdAt": "2023-08-22T09:52:31Z",
              "updatedAt": "2023-08-22T10:04:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5ey5__",
          "commit": {
            "abbreviatedOid": "2a6b3fd"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-22T21:58:07Z",
          "updatedAt": "2023-08-22T21:58:07Z",
          "comments": [
            {
              "originalPosition": 64,
              "body": "Filed https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/issues/22",
              "createdAt": "2023-08-22T21:58:07Z",
              "updatedAt": "2023-08-22T21:58:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5ey6dT",
          "commit": {
            "abbreviatedOid": "131f77e"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-22T22:00:01Z",
          "updatedAt": "2023-08-22T22:02:20Z",
          "comments": [
            {
              "originalPosition": 66,
              "body": "In my opinion it's not appropriate to reference a non-standardized algorithm in an I-D. If you want to make the comparison to Prio w/o wrap around check, then just describe at a high-level how this would work.",
              "createdAt": "2023-08-22T22:00:01Z",
              "updatedAt": "2023-08-22T22:02:20Z"
            },
            {
              "originalPosition": 78,
              "body": "Got it. Feel free to leave as-is.",
              "createdAt": "2023-08-22T22:02:19Z",
              "updatedAt": "2023-08-22T22:02:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5ey7f0",
          "commit": {
            "abbreviatedOid": "2a6b3fd"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-22T22:04:37Z",
          "updatedAt": "2023-08-22T22:04:37Z",
          "comments": [
            {
              "originalPosition": 144,
              "body": "I see. It might be worth mentiong this, but we can do so more quickly.  Perhaps change\r\n\r\n> However, PINE introduces\r\n> a new technique and supporting analysis {{PINE}} that, for high-dimensional\r\n> data, significantly improves communication cost compared to what appears to be\r\n> possible for Prio3.\r\n\r\nto\r\n\r\n> However, PINE introduces\r\n> a new technique and supporting analysis {{PINE}} that, for high-dimensional\r\n> data, significantly improves communication cost compared to what appears to be\r\n> possible for Prio3. **The cost of this improvement is a modest loss in completeness: there is a non-zero chance that Aggregators reject an honestly generated measurement.**",
              "createdAt": "2023-08-22T22:04:37Z",
              "updatedAt": "2023-08-22T22:04:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5ey7qT",
          "commit": {
            "abbreviatedOid": "131f77e"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "A couple minor things but otherwise looks good.",
          "createdAt": "2023-08-22T22:05:23Z",
          "updatedAt": "2023-08-22T22:05:23Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJWdxls5e3G0S",
          "commit": {
            "abbreviatedOid": "131f77e"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-23T12:43:24Z",
          "updatedAt": "2023-08-23T12:43:24Z",
          "comments": [
            {
              "originalPosition": 66,
              "body": "I see. Filed #23 so I don't forget, and put  #22 and #23 in the draft so we fill them up later.",
              "createdAt": "2023-08-23T12:43:24Z",
              "updatedAt": "2023-08-23T12:43:24Z"
            }
          ]
        }
      ]
    },
    {
      "number": 20,
      "id": "PR_kwDOJWdxls5YcRKk",
      "title": "Add skeleton of reference code",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/20",
      "state": "MERGED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #19.",
      "createdAt": "2023-08-22T01:31:19Z",
      "updatedAt": "2023-08-22T07:57:42Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "19374e5df1d56ee9ca2ba06a0100369d2ab7f110",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "cjpatton/19/1",
      "headRefOid": "f488cd4672b491c813ecd99e13667bb59309e7a3",
      "closedAt": "2023-08-22T07:57:42Z",
      "mergedAt": "2023-08-22T07:57:42Z",
      "mergedBy": "junyechen1996",
      "mergeCommit": {
        "oid": "cedeace098e9776648dba741c457649723bf676c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJWdxls5eqQxY",
          "commit": {
            "abbreviatedOid": "f488cd4"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-22T01:33:09Z",
          "updatedAt": "2023-08-22T01:33:09Z",
          "comments": [
            {
              "originalPosition": 1,
              "body": "You'll need to do this pull the submodule locally:\r\n```\r\ngit submodule update --init --recursive\r\n```",
              "createdAt": "2023-08-22T01:33:09Z",
              "updatedAt": "2023-08-22T01:33:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5eqQ4d",
          "commit": {
            "abbreviatedOid": "f488cd4"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-22T01:33:52Z",
          "updatedAt": "2023-08-22T01:33:52Z",
          "comments": [
            {
              "originalPosition": 2,
              "body": "We use sage for the low level algebra and polynomial stuff: https://github.com/3-manifolds/Sage_macOS/releases",
              "createdAt": "2023-08-22T01:33:52Z",
              "updatedAt": "2023-08-22T01:33:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5esc8y",
          "commit": {
            "abbreviatedOid": "f488cd4"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-08-22T07:57:34Z",
          "updatedAt": "2023-08-22T07:57:34Z",
          "comments": []
        }
      ]
    },
    {
      "number": 21,
      "id": "PR_kwDOJWdxls5Yf7lf",
      "title": "rework wraparound overview",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/21",
      "state": "MERGED",
      "author": "junyechen1996",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "- state FLP for L2-norm sum-check\r\n- state why wraparound is possible\r\n- state what naive solution is: encode each field element as bits, send bits as field elements, and bound dimension.\r\n- overview of wraparound check",
      "createdAt": "2023-08-22T13:25:38Z",
      "updatedAt": "2023-08-25T10:07:09Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "b49651cb3c8129653c5b923fecd786e6122261f4",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "junyec/rework-wraparound-overview",
      "headRefOid": "2f92f0649f55c618a1c63801ef261702fb548456",
      "closedAt": "2023-08-25T06:48:22Z",
      "mergedAt": "2023-08-25T06:48:22Z",
      "mergedBy": "junyechen1996",
      "mergeCommit": {
        "oid": "3e31fb3565273671d74e929c6460e61b900714c3"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJWdxls5evV1S",
          "commit": {
            "abbreviatedOid": "ce02eb1"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-22T13:36:39Z",
          "updatedAt": "2023-08-22T13:37:35Z",
          "comments": [
            {
              "originalPosition": 197,
              "body": "I try not to go too much into details for L2-norm sum-check here, so I didn't mention sending the difference between squared L2-norm and `encoded_sq_l2_norm_bound`.",
              "createdAt": "2023-08-22T13:36:39Z",
              "updatedAt": "2023-08-22T13:37:35Z"
            },
            {
              "originalPosition": 37,
              "body": "These get moved to after real number encoding.",
              "createdAt": "2023-08-22T13:37:25Z",
              "updatedAt": "2023-08-22T13:37:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5ezBhR",
          "commit": {
            "abbreviatedOid": "ce02eb1"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "{{fp-encoding}} isn't really a \"warm-up\"; it's the full technical details of how things are encoded. I think this makes the spec hard to read, and I don't think it's necessary to specify at this point. It's sufficient for the reader to understand that there needs to be some way of encoding the measurement as a vector over a finite field.",
          "createdAt": "2023-08-22T22:34:37Z",
          "updatedAt": "2023-08-22T22:56:12Z",
          "comments": [
            {
              "originalPosition": 190,
              "body": "Start at an even higher level. \"The Aggregators hold secret shares of a vector `X` and they want to verify that the sum of the squares of the elements of this vector is less than a bound.\" Maybe even declare the `l2_norm_bound` variable here.\r\n\r\nThen, state the naive solution: \"One way to do this is to use a Fully Linear Proof FLP {{Section 7.1 of !VDAF}}. An FLP is an assertion about the validity of some input that can be checked by the verifier (or jointly by the Aggregators in our case) without learning the input. Validity is typically expressed as a circuit evaluated over the input. In our case, the circuit would first compute the L2 norm of the vector, then check that the L2 norm is in the desired range.\"\r\n\r\nThen, say why the naive solution is broken. \"In order to work with {{Section 7.3 of !VDAF}} , the input vector needs to be represented as a vector over some finite field. Correspondingly, the arithmetic in the validity circuit is modulo `q`, where `q` is the field modulus. If the L2 norm is larger than `q`, then the value compute in the circuit would \"wrap around\" the field modulus and be smaller than `l2_norm_bound`.\r\n\r\nNow you're ready to say what the wraparound check does.",
              "createdAt": "2023-08-22T22:34:38Z",
              "updatedAt": "2023-08-22T22:56:12Z"
            },
            {
              "originalPosition": 195,
              "body": "Why is {{fp-encoding}} a prerequisite to this section? Is it necessary to know what the encoding is, or do we just need to know that we need some way of representing the input in the field?",
              "createdAt": "2023-08-22T22:35:13Z",
              "updatedAt": "2023-08-22T22:56:12Z"
            },
            {
              "originalPosition": 198,
              "body": "This \"recall\" text (\"Recall the goal of ...\") is redundant, since you've already said this.",
              "createdAt": "2023-08-22T22:35:20Z",
              "updatedAt": "2023-08-22T22:56:12Z"
            },
            {
              "originalPosition": 214,
              "body": "How? They would need an FLP, right? (See suggestion above.)",
              "createdAt": "2023-08-22T22:36:50Z",
              "updatedAt": "2023-08-22T22:56:12Z"
            },
            {
              "originalPosition": 219,
              "body": "Good! ",
              "createdAt": "2023-08-22T22:37:08Z",
              "updatedAt": "2023-08-22T22:56:12Z"
            },
            {
              "originalPosition": 205,
              "body": "This is a very trivial function. You could just say \"x * x\" or \"x^2\".",
              "createdAt": "2023-08-22T22:41:47Z",
              "updatedAt": "2023-08-22T22:56:12Z"
            },
            {
              "originalPosition": 208,
              "body": "\"all dimensions of `X`\"? I'm unfamiliar with this terminology. A vector has a \"dimension\", but I've never heard of an element of that vector being called a dimension. Do you mean \"coordinate\"?",
              "createdAt": "2023-08-22T22:43:03Z",
              "updatedAt": "2023-08-22T22:56:12Z"
            },
            {
              "originalPosition": 229,
              "body": "```suggestion\r\n  which makes sure the recovered field integer from the bits is in range `[0, 2^num_frac_bits)`.\r\n```",
              "createdAt": "2023-08-22T22:43:52Z",
              "updatedAt": "2023-08-22T22:56:12Z"
            },
            {
              "originalPosition": 238,
              "body": "Avoid the word \"huge\" in technical writing. Also, I think we can remove this prepositional phrase without losing the meaning.\r\n\r\n```suggestion\r\nThe key technical is a statistical check carried out by the\r\n```",
              "createdAt": "2023-08-22T22:45:23Z",
              "updatedAt": "2023-08-22T22:56:12Z"
            },
            {
              "originalPosition": 239,
              "body": "Say what the statistical test is. The paper says it really well in the intro. Paraphrasing: \"The verifier generates a random vector `Z` of a particular form (each element is equal to `1`, `0`, or `q-1` with a particular probability) and computes the dot product of `X` and `Z`. `Z` is chosen so that, if the there is a wraparound, then the dot product is likely to be large; but if there is no wraparound, then the dot product is likely to be small. \"",
              "createdAt": "2023-08-22T22:51:50Z",
              "updatedAt": "2023-08-22T22:56:12Z"
            },
            {
              "originalPosition": 240,
              "body": "You'll need to define soundness and completness. ",
              "createdAt": "2023-08-22T22:53:09Z",
              "updatedAt": "2023-08-22T22:56:12Z"
            },
            {
              "originalPosition": 244,
              "body": "I don't think we need to mention `eta` at this stage. ",
              "createdAt": "2023-08-22T22:54:37Z",
              "updatedAt": "2023-08-22T22:56:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5e2Bg8",
          "commit": {
            "abbreviatedOid": "ce02eb1"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-23T09:56:32Z",
          "updatedAt": "2023-08-23T09:56:33Z",
          "comments": [
            {
              "originalPosition": 198,
              "body": "Yes, removed this part.",
              "createdAt": "2023-08-23T09:56:32Z",
              "updatedAt": "2023-08-23T09:56:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5e2CGA",
          "commit": {
            "abbreviatedOid": "ce02eb1"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-23T09:57:12Z",
          "updatedAt": "2023-08-23T09:57:12Z",
          "comments": [
            {
              "originalPosition": 190,
              "body": "Reworked the beginning of overview based on this suggestion. Please take a look again.",
              "createdAt": "2023-08-23T09:57:12Z",
              "updatedAt": "2023-08-23T09:57:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5e2CaH",
          "commit": {
            "abbreviatedOid": "ce02eb1"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-23T09:57:48Z",
          "updatedAt": "2023-08-23T09:57:48Z",
          "comments": [
            {
              "originalPosition": 195,
              "body": "Good point, leaving this part to {{flp}}, which is indeed needed during FLP encoding and decoding.",
              "createdAt": "2023-08-23T09:57:48Z",
              "updatedAt": "2023-08-23T09:57:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5e2C5O",
          "commit": {
            "abbreviatedOid": "ce02eb1"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-23T09:58:55Z",
          "updatedAt": "2023-08-23T09:58:56Z",
          "comments": [
            {
              "originalPosition": 214,
              "body": "I assume you don't want a concrete FLP to be defined here, which has many other details. I followed the suggestions above to just describe it in words.",
              "createdAt": "2023-08-23T09:58:56Z",
              "updatedAt": "2023-08-23T09:58:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5e2DXQ",
          "commit": {
            "abbreviatedOid": "ce02eb1"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-23T10:00:04Z",
          "updatedAt": "2023-08-23T10:00:04Z",
          "comments": [
            {
              "originalPosition": 239,
              "body": "Good idea, reworked the description of this part. Initially I thought bringing up `Z` vector here would be too much technical details.",
              "createdAt": "2023-08-23T10:00:04Z",
              "updatedAt": "2023-08-23T10:00:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5e2DeN",
          "commit": {
            "abbreviatedOid": "ce02eb1"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-23T10:00:18Z",
          "updatedAt": "2023-08-23T10:00:18Z",
          "comments": [
            {
              "originalPosition": 240,
              "body": "I'll leave this part to {{flp}}. ",
              "createdAt": "2023-08-23T10:00:18Z",
              "updatedAt": "2023-08-23T10:00:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5e2D8u",
          "commit": {
            "abbreviatedOid": "ce02eb1"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-23T10:01:24Z",
          "updatedAt": "2023-08-23T10:01:24Z",
          "comments": [
            {
              "originalPosition": 208,
              "body": "True, I'll use a mixed of \"entries\" and \"coordinates\".",
              "createdAt": "2023-08-23T10:01:24Z",
              "updatedAt": "2023-08-23T10:01:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5e2EV4",
          "commit": {
            "abbreviatedOid": "ce02eb1"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-23T10:02:20Z",
          "updatedAt": "2023-08-23T10:02:20Z",
          "comments": [
            {
              "originalPosition": 205,
              "body": "Ended up not defining this function explicitly since it doesn't offer a lot of information as this function is too simple.",
              "createdAt": "2023-08-23T10:02:20Z",
              "updatedAt": "2023-08-23T10:02:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5e2FKA",
          "commit": {
            "abbreviatedOid": "7ad9568"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "@cjpatton I did a rework of the original rework, which keeps {{fp-encoding}} under {{flp}}, and revised the overview section as the following:\r\n\r\n- state FLP for L2-norm sum-check\r\n- state why wraparound is possible, i.e. unable to bound each field element.\r\n- state what naive solution is: encode each field element as bits, send bits as field elements, and bound dimension. I avoided referencing `Prio3FixedPointBoundedL2VecSum`, but simply stated how this is done.\r\n- overview of wraparound check, similar to the way paper introduced it.",
          "createdAt": "2023-08-23T10:04:12Z",
          "updatedAt": "2023-08-23T10:08:22Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "I think we can just rename it to overview, instead of wraparound overview, because we give an intro about a simple FLP on L2-norm sum-check, and then introduced wraparound check to resolve the \"wraparound\" problem. Thoughts @cjpatton ? ",
              "createdAt": "2023-08-23T10:04:12Z",
              "updatedAt": "2023-08-23T10:08:22Z"
            },
            {
              "originalPosition": 126,
              "body": "Changes to `{{fp-encoding}}` are to align with the new parameters `l2_norm_bound`, `num_frac_bits`. No operational parameter used here.\r\nAnd also moving it under {{flp}} for now.",
              "createdAt": "2023-08-23T10:05:42Z",
              "updatedAt": "2023-08-23T10:08:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5e4n80",
          "commit": {
            "abbreviatedOid": "ce02eb1"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-23T15:42:19Z",
          "updatedAt": "2023-08-23T15:42:19Z",
          "comments": [
            {
              "originalPosition": 214,
              "body": "Yes, that's right. You just need toconvey the properties of FLP that are important for the reader to understand this section.",
              "createdAt": "2023-08-23T15:42:19Z",
              "updatedAt": "2023-08-23T15:42:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5e4pCx",
          "commit": {
            "abbreviatedOid": "7ad9568"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Much better! I focused only on the overview; for the rest, feel free to change as you see fit. I'm trying to do a pass of the entire draft, section by section. After the overview, the next thing I want to do is flesh out the FLP section.",
          "createdAt": "2023-08-23T15:44:39Z",
          "updatedAt": "2023-08-23T16:26:16Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "Actually the contribution comes from {{PINE}}. \r\n```suggestion\r\nIn this section, we will give an overview of the main technical contribution of {{PINE}}\r\n```",
              "createdAt": "2023-08-23T15:44:39Z",
              "updatedAt": "2023-08-23T16:26:17Z"
            },
            {
              "originalPosition": 41,
              "body": "What do you think about being more specific than \"measurement\" here? The motivation of PINE is federated learning, so it seems appropriate to lean into this.\r\n\r\n```suggestion\r\nthat allows the Aggregators holding secret shares of a gradient\r\n```",
              "createdAt": "2023-08-23T15:45:43Z",
              "updatedAt": "2023-08-23T16:26:17Z"
            },
            {
              "originalPosition": 42,
              "body": "Define \"L2-norm\" before this sentence. Even if we define it in the intro, it's worth repeating here.",
              "createdAt": "2023-08-23T15:47:56Z",
              "updatedAt": "2023-08-23T16:26:17Z"
            },
            {
              "originalPosition": 45,
              "body": "It's not clear that a finite field is required for verification until you introduce FLPs.\r\n\r\nTaking a step back, is this sentence needed here? Why do we need to know _at this point_ that the gradient is real-valued?",
              "createdAt": "2023-08-23T15:49:26Z",
              "updatedAt": "2023-08-23T16:26:17Z"
            },
            {
              "originalPosition": 53,
              "body": "`Field.MODULUS` is new notation, so we need to define it. A couple of sugestions:\r\n* When you first mention \"finite field\", note that this is denoted by `Field` in {{!VDAF}} and the modulus is denoted by `Field.MODULUS`.\r\n* Just use `q` to denote the field modulus.",
              "createdAt": "2023-08-23T15:51:38Z",
              "updatedAt": "2023-08-23T16:26:17Z"
            },
            {
              "originalPosition": 51,
              "body": "grammar\r\n```suggestion\r\ncircuit evaluated over the input. In our case, the circuit would compute\r\n```",
              "createdAt": "2023-08-23T15:52:54Z",
              "updatedAt": "2023-08-23T16:26:17Z"
            },
            {
              "originalPosition": 53,
              "body": "grammar: \"compute X is in the desired range\" -> \"compute X and check X is in the desired range\"\r\n```suggestion\r\n`Field.MODULUS` and check that the result is in the desired range.\r\n```",
              "createdAt": "2023-08-23T15:54:10Z",
              "updatedAt": "2023-08-23T16:26:17Z"
            },
            {
              "originalPosition": 53,
              "body": "I think it's worth noting in this paragraph why we actually compute the \"squared L2-norm\", i.e., the sum of squares, than the L2-norm (because it's more efficient and mathematically equivalent).",
              "createdAt": "2023-08-23T15:57:15Z",
              "updatedAt": "2023-08-23T16:26:17Z"
            },
            {
              "originalPosition": 57,
              "body": "I don't think it's necessarily clear to every reader what it means to \"wrap around\" the field modulus. You'll need to say what this means. Also, why is it a problem?",
              "createdAt": "2023-08-23T16:03:54Z",
              "updatedAt": "2023-08-23T16:26:17Z"
            },
            {
              "originalPosition": 79,
              "body": "```suggestion\r\nvector, with a random vector, each element of which is `-1`\r\n(or `Field.MODULUS-1`), `0`, or `1` with respective probability. We demonstrate\r\n```",
              "createdAt": "2023-08-23T16:05:21Z",
              "updatedAt": "2023-08-23T16:26:17Z"
            },
            {
              "originalPosition": 69,
              "body": "`num_frac_bits` needs to be defined.\r\nnit: This is the first use of `dimension`, so I'd try to work in a definition some how. However it's reasonably clear from context what you mean.",
              "createdAt": "2023-08-23T16:12:31Z",
              "updatedAt": "2023-08-23T16:26:17Z"
            },
            {
              "originalPosition": 79,
              "body": "We = co-editors of this draft\r\n```suggestion\r\n(or `Field.MODULUS`-1), 0, or 1 with respective probability. In {{PINE}} it is demonstrated\r\n```",
              "createdAt": "2023-08-23T16:14:34Z",
              "updatedAt": "2023-08-23T16:26:17Z"
            },
            {
              "originalPosition": 83,
              "body": "Good so far! Other things to mention in the overview:\r\n* To reduce the probability of a false negative (an invalid gradient being accepted) and a false positive (a valid gradient being rejected), we run the wraparound test multiple times.\r\n* Unlike other VDAFs, like Prio3, Pine has false positives (valid measurements get rejected with non-zero probability). This also means that Pine is statistical zero-knowledge rather than perfect zero-knowledge (why?); to ensure privacy, parameters are chosen so that the probability of false positives are negligible. (Is this true?)\r\n* It's also worth briefly mentioning what other techniques are required for the end-to-end VDAF. Specifically: we need a way to make the challenges (the `Z` vectors) are non-interactive (comparable to joint randomness in Prio3); and we have some bit-enoded values the encoded measurement that we need to do range checks for (similar to Prio3Sum).",
              "createdAt": "2023-08-23T16:22:26Z",
              "updatedAt": "2023-08-23T16:26:17Z"
            },
            {
              "originalPosition": 105,
              "body": "Why is this a \"warmup\"? It sounds like this is intended to be normative text, not informative.",
              "createdAt": "2023-08-23T16:23:46Z",
              "updatedAt": "2023-08-23T16:26:17Z"
            },
            {
              "originalPosition": 126,
              "body": "Ack, in that case I won't plan on reviewing it. I'm trying to do a slow pass of the entire draft, section by section.",
              "createdAt": "2023-08-23T16:24:40Z",
              "updatedAt": "2023-08-23T16:26:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5e49Ve",
          "commit": {
            "abbreviatedOid": "7ad9568"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-23T16:27:12Z",
          "updatedAt": "2023-08-23T16:27:12Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "Sounds reasonable.",
              "createdAt": "2023-08-23T16:27:12Z",
              "updatedAt": "2023-08-23T16:27:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5e9qPq",
          "commit": {
            "abbreviatedOid": "d258ab2"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-24T09:57:41Z",
          "updatedAt": "2023-08-24T11:05:10Z",
          "comments": [
            {
              "originalPosition": 45,
              "body": "Removed this part. I did made a reference to finite field  in the next paragraph, \"Validity is typically expressed as a circuit evaluated on the input over a finite field , denoted by `Field` in {{Section 6.1 of !VDAF}}.\"",
              "createdAt": "2023-08-24T09:57:41Z",
              "updatedAt": "2023-08-24T11:05:10Z"
            },
            {
              "originalPosition": 41,
              "body": "How about somewhere in the middle: \"the Aggregators holding secret shares of the Client measurement (e.g. gradient in federated learning)\"? Client measurement makes it more tied to the term in VDAF, and mentioning gradient here allows us to reference the motivating use case again. In the much longer term, PINE can theoretically support checking L2-norm of other types of measurements, e.g. vector of integers, so I don't want to always lock it to a specific use case. But I can see referring to federated learning throughout the draft can be motivating case for readers.\r\n\r\nLet me know what you think.",
              "createdAt": "2023-08-24T10:03:20Z",
              "updatedAt": "2023-08-24T11:05:10Z"
            },
            {
              "originalPosition": 105,
              "body": "Removed \"Warmup\".",
              "createdAt": "2023-08-24T10:03:47Z",
              "updatedAt": "2023-08-24T11:05:10Z"
            },
            {
              "originalPosition": 83,
              "body": "Added back the above points. Please take a look again if this is broad enough and makes sense. But I didn't get this part:\r\n\r\n> and we have some bit-enoded values the encoded measurement that we need to do range checks for (similar to Prio3Sum).\r\n\r\nI assume you either mean we check the field elements that are expected to be bits, or we perform range check on quantities, but that seems to be internal to the validity circuit, which is specific to every FLP.",
              "createdAt": "2023-08-24T10:58:32Z",
              "updatedAt": "2023-08-24T11:05:10Z"
            },
            {
              "originalPosition": 69,
              "body": "I made a reference back to {{pine-user-param}}. Let me know if that's better.",
              "createdAt": "2023-08-24T10:59:24Z",
              "updatedAt": "2023-08-24T11:05:10Z"
            },
            {
              "originalPosition": 57,
              "body": "Added more clarity. Now I say \"allows a malicious Client to send a vector that causes the computation of sum\r\nof squares to overflow, or \"wrap around\" field size.\"\r\n\r\nAt the end of this paragraph, I added \"there is no way\r\nfor the Aggregators to determine if wraparound has happened, and Aggregators\r\nmay accept the vector from the malicious Client, which causes the final\r\naggregate to be corrupted.\"",
              "createdAt": "2023-08-24T11:00:24Z",
              "updatedAt": "2023-08-24T11:05:10Z"
            },
            {
              "originalPosition": 53,
              "body": "Made a reference to `Field`, and defined `q`.",
              "createdAt": "2023-08-24T11:00:56Z",
              "updatedAt": "2023-08-24T11:05:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5e-G4I",
          "commit": {
            "abbreviatedOid": "d258ab2"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-24T11:07:29Z",
          "updatedAt": "2023-08-24T11:07:29Z",
          "comments": [
            {
              "originalPosition": 146,
              "body": "@cjpatton  I removed \"Warmup\" here. Otherwise, feel free to continue to ignore the rest of the PR from here (we will need to work through {{flp}} as the next step). I moved real number encoding under {{flp}}, and updated with the new user parameters.",
              "createdAt": "2023-08-24T11:07:29Z",
              "updatedAt": "2023-08-24T11:07:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5fC6yn",
          "commit": {
            "abbreviatedOid": "d258ab2"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-08-24T23:34:14Z",
          "updatedAt": "2023-08-24T23:34:14Z",
          "comments": []
        }
      ]
    },
    {
      "number": 27,
      "id": "PR_kwDOJWdxls5ZAytD",
      "title": "poc part 1: Add code to perform f64 encoding and decoding",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/27",
      "state": "MERGED",
      "author": "junyechen1996",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "- sync with latest VDAF draft, which uses self in field access\r\n- initialize necessary fields in constructor\r\n- implement f64 encoding and decoding\r\n- correct bugs in the current draft after running code in python\r\n- add skeleton tests, which don't perform any validity check for now.",
      "createdAt": "2023-08-29T09:15:01Z",
      "updatedAt": "2023-09-18T03:51:52Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "3e31fb3565273671d74e929c6460e61b900714c3",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "junyec/poc-fp-encoding",
      "headRefOid": "c9674795cb811fac64c0fbdd7fc61b5734bd8220",
      "closedAt": "2023-09-07T02:18:18Z",
      "mergedAt": "2023-09-07T02:18:18Z",
      "mergedBy": "junyechen1996",
      "mergeCommit": {
        "oid": "29d6424891d875dcbc0ee9941381a981cf095e1f"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJWdxls5fj-Co",
          "commit": {
            "abbreviatedOid": "9004fd1"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-08-30T18:19:28Z",
          "updatedAt": "2023-08-30T21:02:24Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "Suggestion: Add \"roundtrip\" tests to make sure a vector can can be encoded /decoded",
              "createdAt": "2023-08-30T18:19:28Z",
              "updatedAt": "2023-08-30T21:02:24Z"
            },
            {
              "originalPosition": 12,
              "body": "nit: Imports should be in alphabetical order",
              "createdAt": "2023-08-30T18:19:56Z",
              "updatedAt": "2023-08-30T21:02:24Z"
            },
            {
              "originalPosition": 106,
              "body": "suggestion: when stubbing out a function it should fail closed, not open\r\n```suggestion\r\n        raise NotImplemented # or whatever (see the poc in the vdaf draft)\r\n```",
              "createdAt": "2023-08-30T18:22:43Z",
              "updatedAt": "2023-08-30T21:02:24Z"
            },
            {
              "originalPosition": 16,
              "body": "\"first half of the field size\": This is little ambiguous. I think what you mean is \"smaller than half of the field modulus\"?\r\n\r\nI think we can simplify the decoding steps a bit to make this clearer:\r\n* Let `x_int` be the integer representation of `x` (`x_int = int(x.as_unsigned()`)\r\n* if `x_int >= Field.MODULUS / 2` then set `x_int` to `-x_int`.\r\n* Divide `x_int` by `2**num_frac_bits`.\r\n* First, cast the field element `x` as an unsigned integer `x_uint = x.as_unsigned()`.\r\n* Next, cast the unsigned integer `x_uint` as a signed integer `x_int` ",
              "createdAt": "2023-08-30T20:43:01Z",
              "updatedAt": "2023-08-30T21:02:24Z"
            },
            {
              "originalPosition": 42,
              "body": "We're moving towards more informative errors: https://github.com/cfrg/draft-irtf-cfrg-vdaf/issues/277\r\n```suggestion\r\n        raise ValueError('unexpected gradient dimension')\r\n```",
              "createdAt": "2023-08-30T20:45:03Z",
              "updatedAt": "2023-08-30T21:02:24Z"
            },
            {
              "originalPosition": 27,
              "body": "This parameter isn't used by the function body.",
              "createdAt": "2023-08-30T20:46:25Z",
              "updatedAt": "2023-08-30T21:02:24Z"
            },
            {
              "originalPosition": 114,
              "body": "\"first half of the field size\" is a little ambiguous (see comment above).",
              "createdAt": "2023-08-30T20:48:08Z",
              "updatedAt": "2023-08-30T21:02:24Z"
            },
            {
              "originalPosition": 116,
              "body": "Style: I don't defining the variable `positive_upper_bound` is helpful: if `decode > math.floor(field_elem.MODULUS / 2)` is clearer than `if decode > positive_upper_bound`. Normally you only want to define a variable only if you're going to use it more than once or twice.",
              "createdAt": "2023-08-30T20:49:58Z",
              "updatedAt": "2023-08-30T21:02:24Z"
            },
            {
              "originalPosition": 65,
              "body": "```suggestion\r\n        Instantiate the `PineValid` circuit for gradients with `dimension`\r\n```",
              "createdAt": "2023-08-30T20:55:26Z",
              "updatedAt": "2023-08-30T21:02:24Z"
            },
            {
              "originalPosition": 66,
              "body": "Grammar: What do you mean by \"kept with\"? perhaps (also \"binary bits\" is redundant)\r\n```suggestion\r\n        elements. Each element will be truncated to `num_frac_bits`\r\n```",
              "createdAt": "2023-08-30T20:56:43Z",
              "updatedAt": "2023-08-30T21:02:24Z"
            },
            {
              "originalPosition": 89,
              "body": "This can be simplified I think. Also, we should be consistent about ending error messages with \".\"\r\n```suggestion\r\n            raise ValueError(\"Squared norm bound is larger than field modulus\")\r\n```",
              "createdAt": "2023-08-30T21:00:02Z",
              "updatedAt": "2023-08-30T21:02:24Z"
            },
            {
              "originalPosition": 40,
              "body": "Suggestion: for consistency with conventions for constants from the VDAF spec\r\n```suggestion\r\n    ALPHA: float = 7\r\n    NUM_WR_REPS: Unsigned = 135\r\n    TAU: float = 0.75\r\n```",
              "createdAt": "2023-08-30T21:01:26Z",
              "updatedAt": "2023-08-30T21:02:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5gA2yb",
          "commit": {
            "abbreviatedOid": "c967479"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-05T11:31:10Z",
          "updatedAt": "2023-09-05T14:14:33Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "Sounds good. I don't think we need the last two bullet points. And second bullet point needs to be corrected. I currently have:\r\n\r\n- Let `agg_int` be the integer representation of `agg`, i.e.\r\n  `agg_int = agg.as_unsigned()`.\r\n- If `agg_int > floor(Field.MODULUS / 2)`, then set `agg_int` to\r\n  `-(Field.MODULUS - agg_int)`.\r\n- Divide `agg_int` by `2**num_frac_bits`.",
              "createdAt": "2023-09-05T11:31:10Z",
              "updatedAt": "2023-09-05T14:14:33Z"
            },
            {
              "originalPosition": 12,
              "body": "I think the `poc` folder in VDAF draft organizes it as the following (see `poc/idpf_poplar.py` for example):\r\n\r\n- `import` goes before `from xxx import yyy`\r\n- standard libraries go before modules in the repo.\r\n- Then order by alphabetical. \r\n\r\nI did reorder the imports for `float_field_encoder.py` and also this file.",
              "createdAt": "2023-09-05T11:39:26Z",
              "updatedAt": "2023-09-05T14:14:33Z"
            },
            {
              "originalPosition": 89,
              "body": "I put \"Encoded norm bound is larger than field modulus.\"",
              "createdAt": "2023-09-05T11:48:07Z",
              "updatedAt": "2023-09-05T14:14:33Z"
            },
            {
              "originalPosition": 39,
              "body": "Added some basic tests in this file.",
              "createdAt": "2023-09-05T11:57:02Z",
              "updatedAt": "2023-09-05T14:14:33Z"
            }
          ]
        }
      ]
    },
    {
      "number": 28,
      "id": "PR_kwDOJWdxls5ZlG78",
      "title": "poc: wraparound check",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/28",
      "state": "MERGED",
      "author": "junyechen1996",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "- added a simple test that test validity circuit, because it takes too long to finish one test with the default num_wr_reps and alpha.\r\n- had to customize code to run PINE FLP because wraparound joint rand is part of FLP encoding.\r\n- with l2_norm_bound of 1.0, and num_frac_bits of 4, encoding time: 0.01 seconds, single verifier eval time: 0.01 seconds, flp.prove: 22.1 seconds, flp.query total time: 48.3 seconds\r\n- stacked PR on #27 ",
      "createdAt": "2023-09-05T14:15:33Z",
      "updatedAt": "2023-09-18T03:51:53Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "29d6424891d875dcbc0ee9941381a981cf095e1f",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "junyec/poc-wraparound-check",
      "headRefOid": "084fc7817871b411c050bb9010ae8129286ba29c",
      "closedAt": "2023-09-18T02:35:39Z",
      "mergedAt": "2023-09-18T02:35:39Z",
      "mergedBy": "junyechen1996",
      "mergeCommit": {
        "oid": "d0c626a933413db12cfbaa30cf4b19a82943d131"
      },
      "comments": [
        {
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "body": "@cjpatton Thanks for the review. I responded to all your comments (hopefully), let me know if I miss any. Things that I would like you to pay particular attention to:\r\n\r\n- https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/28#discussion_r1320357881\r\n- https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/28#discussion_r1320358418 ( I don't have a great solution other than re-writing `run_flp` to take in the joint randomness).\r\n- #30, I will work on it for the VDAF draft, because Prio3Sum and Prio3SumVec are also using it.\r\n\r\nResponding to the high-level comments:\r\n\r\n> Please remove every variable from PineValid that is not used by any of the methods.\r\n\r\nDone. I will add them back once I implement L2-norm check.\r\n\r\n> Suggestion: I prefer the name \"wraparound test\" instead of \"repetition\". \"Repetition\" begs the question \"what is being repeated\"? the only answer to which is \"the wraparound test\".\r\n\r\nI start calling all of them \"checks\" now, and removed repetitions. I'm not sure if it's worth introducing another term \"test\", but I'd welcome your feedback.\r\n\r\n> The wraparound subcircuit should include more comments that help connect the reader to the properties we intend to enforce. (See inline comments.)\r\n\r\nI addressed the inline comments and added more code comments. Please take a look again.",
          "createdAt": "2023-09-11T13:49:09Z",
          "updatedAt": "2023-09-11T13:49:09Z"
        },
        {
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "body": "> Looking really good! I know it looks like a lot of comments, but they're mostly editorial. However I spotted one potential bug I wanted you to look at, in the wraparound rand derivation.\r\n\r\n@cjpatton Thanks for the thoughtful reviews! That is a bug, I've fixed it now. Here are the threads that I'd like you to take a look again. As always, feel free to look over the revised PR again.\r\n\r\n- unused `l2_norm_bound`: https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/28#discussion_r1326519399.\r\n- XOF output length: https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/28#discussion_r1326548617, I added comments to clarify the computation for XOF output length.\r\n- `sample_wraparound_joint_rand` bug: https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/28#discussion_r1326552908, should be fixed now.\r\n- make `encode_f64_into_field` into instance method in `PineValid`: https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/28#discussion_r1326530095",
          "createdAt": "2023-09-15T09:40:44Z",
          "updatedAt": "2023-09-15T09:40:44Z"
        },
        {
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "body": "@cjpatton Great suggestion about testing bit chunking. Please take a look at the updated code, which contains some of your code, but with some simplification.\r\n\r\nThe remaining thread is the one on whether `l2_norm_bound` should be stored: https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/28#discussion_r1326519399",
          "createdAt": "2023-09-15T22:53:55Z",
          "updatedAt": "2023-09-15T22:53:55Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJWdxls5gCJRU",
          "commit": {
            "abbreviatedOid": "2eb4561"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-05T14:17:41Z",
          "updatedAt": "2023-09-05T14:17:42Z",
          "comments": [
            {
              "originalPosition": 307,
              "body": "For this particular reason, I cannot reuse `test_flp` and `run_flp` directly. Prio3 FLPs only assume `joint_rand` is part of proof generation, so it's ok to generate `joint_rand` right before `eval()` is called, but in PINE, `joint_rand` is part of encoding, so it needs to be passed to this function.",
              "createdAt": "2023-09-05T14:17:41Z",
              "updatedAt": "2023-09-05T14:17:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5gOxt_",
          "commit": {
            "abbreviatedOid": "611651a"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-07T02:30:47Z",
          "updatedAt": "2023-09-07T02:30:47Z",
          "comments": [
            {
              "originalPosition": 259,
              "body": "@cjpatton I changed this function to avoid returning the optimized alpha, since I'm not using it in the rest of the code.",
              "createdAt": "2023-09-07T02:30:47Z",
              "updatedAt": "2023-09-07T02:30:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5gc0zZ",
          "commit": {
            "abbreviatedOid": "611651a"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Great work so far! Most of my comments are strictly editorial. I have just one technical concern, but I bet you'll be able to explain what's going on :) (see inline comments).\r\n\r\nA few high-level things:\r\n\r\n* Please remove every variable from `PineValid` that is not used by any of the methods. `self.l2_norm_bound`, for example, is never used. Similarly for `self.encoded_l2_norm_bound`: it is used only to compute `wr_upper_bound`, so we should just store this instead.\r\n\r\n* Suggestion: I prefer the name \"wraparound test\" instead of \"repetition\". \"Repetition\" begs the question \"what is being repeated\"? the only answer to which is \"the wraparound test\".\r\n\r\n* The wraparound subcircuit should include more comments that help connect the reader to the properties we intend to enforce. (See inline comments.)",
          "createdAt": "2023-09-08T19:48:46Z",
          "updatedAt": "2023-09-08T21:35:05Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "style: Rather than define a new class for this, I'd just define these helper functions in the file in which they're used.\r\n\r\nAlternatively, we could add these methods to the `Field` type in the base draft. If you want to send a PR, we can merge it and then update the submodule.",
              "createdAt": "2023-09-08T19:48:46Z",
              "updatedAt": "2023-09-08T21:35:05Z"
            },
            {
              "originalPosition": 9,
              "body": "`ERR_ENCODE`: In the base spec we're moving towards explicit errors: https://github.com/cfrg/draft-irtf-cfrg-vdaf/issues/277",
              "createdAt": "2023-09-08T19:49:35Z",
              "updatedAt": "2023-09-08T21:35:05Z"
            },
            {
              "originalPosition": 33,
              "body": "Can you double check that this is the same bit order used in Prio3Sum in the base draft?\r\n",
              "createdAt": "2023-09-08T19:51:47Z",
              "updatedAt": "2023-09-08T21:35:05Z"
            },
            {
              "originalPosition": 39,
              "body": "These aren't \"associated parameters\" in the sense that they're not required by the `Valid` interface. Rather, they are operational parameters used by `PineValid`.",
              "createdAt": "2023-09-08T20:17:05Z",
              "updatedAt": "2023-09-08T21:35:05Z"
            },
            {
              "originalPosition": 95,
              "body": "We could make this a bit cleaner using the `fron()` method in the `common` module in the base draft.\r\n```suggestion\r\n        wr_joint_rand, rest = front(self.WRAPAROUND_JOINT_RAND_LEN, joint_rand)\r\n        [bit_check_red_joint_rand], rest = front(1, rest)\r\n        [wr_check_red_joint_rand], rest = front(1, rest)\r\n        [final_red_joint_rand], rest = front(1, rest)\r\n        assert len(rest) == 0 # sanity check\r\n```",
              "createdAt": "2023-09-08T20:26:32Z",
              "updatedAt": "2023-09-08T21:35:05Z"
            },
            {
              "originalPosition": 27,
              "body": "Why is this capitalized but other things are not? Generally speaking, what's the rule for capitalizing versus lower case?",
              "createdAt": "2023-09-08T20:31:42Z",
              "updatedAt": "2023-09-08T21:35:05Z"
            },
            {
              "originalPosition": 98,
              "body": "Since we've implemented the wraparound check, I think the bit checks should cover the $V$-values and the $g$-values, correct? This should be `self.num_bits_for_wr_res * self.NUM_WR_REPS`",
              "createdAt": "2023-09-08T20:34:12Z",
              "updatedAt": "2023-09-08T21:35:05Z"
            },
            {
              "originalPosition": 95,
              "body": "I think we should consider \"unpacking\" the measurement the same way:\r\n```python3\r\nx, rest = front(self.dimension, meas)\r\nbit_checked, rest = front(length_of_bit_checked_stuff, rest)\r\nassert len(rest) == 0\r\nwr_test_results, rest = front(length_of_wr_test_results_stuff, rest)\r\n# sq_l2_norm, rest = front(length_u_and_v_for_sq_l2_norm_stuff, rest)\r\nassert len(rest == 0)\r\n```\r\n\r\nThen we can use `bit_checked` for the bit  check part and `x` and `wr_test_results` for the wraparound test part.",
              "createdAt": "2023-09-08T20:39:24Z",
              "updatedAt": "2023-09-08T21:35:05Z"
            },
            {
              "originalPosition": 143,
              "body": "When writing out math, it's best to avoid defining extra variables because it forces the reader to jump around in order to understand the equation. A couple of exceptions to this rule: \r\n1. The thing we're precomputing is very complex (this isn't)\r\n2. The thing we're precomputing is used in multiple places (this is just used in one place).\r\n\r\n\r\nunless doing so significantly improves CPU time. `wr_lower_bound\r\n\r\n```suggestion\r\n                self.wr_lower_bound * shares_inv\r\n```",
              "createdAt": "2023-09-08T20:44:40Z",
              "updatedAt": "2023-09-08T21:35:05Z"
            },
            {
              "originalPosition": 282,
              "body": "A few ideas here:\r\n* Let's make this a normal helper function instead of a class method, since It doesn't use any parameters in PineValid.\r\n* `l1, l2` aren't great variable names: `l1` in particular is hard to read on the page in some fonts. How about `vec1, vec2`?\r\n* Similar to `vec_add` et al. in the base draft, we probably don't need to make the field explicit. Dot product is well-defined for other sets of numbers, not just fields.\r\n* We can drop the `Field` constructor with a little Python magic.\r\n```suggestion\r\n    dot_prod(vec0, vec1):\r\n        return sum(map(lambda x: x[0] * x[1], zip(vec0, vec1)))\r\n```",
              "createdAt": "2023-09-08T20:53:31Z",
              "updatedAt": "2023-09-08T21:35:05Z"
            },
            {
              "originalPosition": 141,
              "body": "```suggestion\r\n            # adding the absolute value of the lower bound.\r\n```",
              "createdAt": "2023-09-08T20:57:01Z",
              "updatedAt": "2023-09-08T21:35:05Z"
            },
            {
              "originalPosition": 137,
              "body": "Consistency: `x` matches the paper, so to be consistent, let's do `z`. Or you could go with something like `curr_wr_joint_rand` and `gradient`.\r\n```suggestion\r\n           z = wr_joint_rand[\r\n```",
              "createdAt": "2023-09-08T20:57:29Z",
              "updatedAt": "2023-09-08T21:35:05Z"
            },
            {
              "originalPosition": 150,
              "body": "Why \"encoded\"?\r\n```suggestion\r\n            wr_res = FieldExt.decode_from_bit_vector(\r\n```",
              "createdAt": "2023-09-08T20:59:57Z",
              "updatedAt": "2023-09-08T21:35:05Z"
            },
            {
              "originalPosition": 146,
              "body": "This is a lot of code for a relatively simple thing. (And one of the uglier parts of Python in my opinion.) Instead of computing the range of the slice of `meas` for each iteration, I think it would be cleaner to arrange things so that we can read chunks from a buffer using `front()` similar to above.",
              "createdAt": "2023-09-08T21:01:40Z",
              "updatedAt": "2023-09-08T21:35:05Z"
            },
            {
              "originalPosition": 153,
              "body": "* A code comment here would be helpful. What is `wr_range_check` \"checking\" for?\r\n* Also, is it fair to call this. a \"range check\"? \r\n* I'm on the fence, but I think we'd be better off not declaring `differentiator`. If we pass `computed_wr_res - encoded_wr_res`, to the gadget directly, then it's clear that if the client indicated success, then the claimed wrap around result better match waht we computed.",
              "createdAt": "2023-09-08T21:04:12Z",
              "updatedAt": "2023-09-08T21:35:05Z"
            },
            {
              "originalPosition": 270,
              "body": "Don't declare `optim_wr_upper_bound`, as it's only used once. Similarly for `optim_wr_lower_bound`\r\n\r\nWhen reading math, it's helpful to see the whole equation.",
              "createdAt": "2023-09-08T21:10:19Z",
              "updatedAt": "2023-09-08T21:35:05Z"
            },
            {
              "originalPosition": 249,
              "body": "Insted of erring here, I think we should retry, i.e., stick this whole function in a big `while`-loop and break once successful.",
              "createdAt": "2023-09-08T21:14:47Z",
              "updatedAt": "2023-09-08T21:35:05Z"
            },
            {
              "originalPosition": 169,
              "body": "\"PRG\" is now called \"XOF\". You probably need to update the submodule for the base draft:\r\ncd draft-irtf-cfrg-vdaf\r\ngit checkout draft-irtf-cfrg-vdaf-07",
              "createdAt": "2023-09-08T21:15:58Z",
              "updatedAt": "2023-09-08T21:35:05Z"
            },
            {
              "originalPosition": 212,
              "body": "Consistency\r\n```suggestion\r\n            z = wr_joint_rand[\r\n```",
              "createdAt": "2023-09-08T21:24:45Z",
              "updatedAt": "2023-09-08T21:35:05Z"
            },
            {
              "originalPosition": 284,
              "body": "Here also it might be better to not make this a class method.",
              "createdAt": "2023-09-08T21:29:29Z",
              "updatedAt": "2023-09-08T21:35:05Z"
            },
            {
              "originalPosition": 141,
              "body": "I'm a little confused by this comment. In particular I'm not sure to square this with the \"don't send the $U$-value\" optimization in the paper. My understanding is that if the range we're working with is $[0, 2^k)$ for some $k$, then we can avoid sending $U$. But it looks like the range check is actually `[-2^k+1, 2^k)` or something?",
              "createdAt": "2023-09-08T21:32:42Z",
              "updatedAt": "2023-09-08T21:35:05Z"
            },
            {
              "originalPosition": 334,
              "body": "What has changed? I wonder if you. couldn't just call `run_flp()` directly.",
              "createdAt": "2023-09-08T21:33:43Z",
              "updatedAt": "2023-09-08T21:35:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5gjBdF",
          "commit": {
            "abbreviatedOid": "8111e3b"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-11T11:43:53Z",
          "updatedAt": "2023-09-11T13:37:59Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "I think upper case variables are for constants, independent of the parameters passed in the constructor. I left this one as upper case, and changed rest of the operational parameters to lower case.",
              "createdAt": "2023-09-11T11:43:53Z",
              "updatedAt": "2023-09-11T13:38:00Z"
            },
            {
              "originalPosition": 282,
              "body": "That's neat! Made it into a normal helper function, and renamed variables to `vec1` and `vec2`.",
              "createdAt": "2023-09-11T11:52:47Z",
              "updatedAt": "2023-09-11T13:38:00Z"
            },
            {
              "originalPosition": 334,
              "body": "Because `run_flp()` samples `joint_rand` in the function, but `joint_rand` for PINE has to be sampled before `encode()`, and the same `joint_rand` needs to be used in the FLP execution.",
              "createdAt": "2023-09-11T11:54:35Z",
              "updatedAt": "2023-09-11T13:38:00Z"
            },
            {
              "originalPosition": 150,
              "body": "I was thinking \"bit-encoded\", because we also have \"verifier-computed\" wraparound check result.",
              "createdAt": "2023-09-11T12:05:34Z",
              "updatedAt": "2023-09-11T13:38:00Z"
            },
            {
              "originalPosition": 98,
              "body": "Should be `(self.num_bits_for_wr_res + 1) * self.NUM_WR_REPS`. This line just means the rest of `meas` should all be bits. I rewrote it into `x, expected_bits = front(self.dimension, x)` to be clearer, and added an assert statement to check length.",
              "createdAt": "2023-09-11T12:15:19Z",
              "updatedAt": "2023-09-11T13:38:00Z"
            },
            {
              "originalPosition": 95,
              "body": "That's neat. I did the unpacking with `front` for both `joint_rand` and `meas`.",
              "createdAt": "2023-09-11T12:18:49Z",
              "updatedAt": "2023-09-11T13:38:00Z"
            },
            {
              "originalPosition": 12,
              "body": "Makes sense. I filed an issue in this repo for now: https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/issues/30 so that I remember, and I plan to propose a PR to standard VDAF draft. I will leave the helpers in the same file as `flp_pine.py` for now.",
              "createdAt": "2023-09-11T12:21:15Z",
              "updatedAt": "2023-09-11T13:37:59Z"
            },
            {
              "originalPosition": 33,
              "body": "It is. The logics are different but they do the same thing. Both `Prio3Sum` and `Prio3SumVec` use it so I think it's a good thing for standard VDAF draft as well. Issue here: https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/issues/30",
              "createdAt": "2023-09-11T12:23:23Z",
              "updatedAt": "2023-09-11T13:37:59Z"
            },
            {
              "originalPosition": 141,
              "body": "Sorry the comment is a little misleading. There is no \"absolute value of lower bound\" anymore, `wr_lower_bound` is already negative. It should be just \"computing the dot product and subtract the wraparound check lower bound\". \r\n\r\n> My understanding is that if the range we're working with is $[0, 2^k)$ for some $k$, then we can avoid sending $U$.\r\n\r\nThis is right.\r\n\r\n> But it looks like the range check is actually [-2^k+1, 2^k) or something?\r\n\r\nIn this case, we are working with `[wr_lower_bound, wr_upper_bound]`, such that `wr_upper_bound - wr_lower_bound + 1` is a power of 2, and that's why we only need to send $V$, which is equal to the dot product minus `wr_lower_bound`.",
              "createdAt": "2023-09-11T12:28:24Z",
              "updatedAt": "2023-09-11T13:38:00Z"
            },
            {
              "originalPosition": 146,
              "body": "Makes sense. I used `front()` as much as possible now.",
              "createdAt": "2023-09-11T12:30:50Z",
              "updatedAt": "2023-09-11T13:38:00Z"
            },
            {
              "originalPosition": 153,
              "body": "- I added a comment about this check.\r\n- It's not really a range check. I call this `mult_check` now.\r\n- I passed the difference to the gadget directly now.",
              "createdAt": "2023-09-11T12:44:53Z",
              "updatedAt": "2023-09-11T13:38:00Z"
            },
            {
              "originalPosition": 249,
              "body": "I initially thought about this as well, but because this function accepts `wr_joint_rand`, the caller should catch this exception and retry with a different `wr_joint_rand`. The derivation of `wr_joint_rand` should happen in the VDAF layer.",
              "createdAt": "2023-09-11T12:51:43Z",
              "updatedAt": "2023-09-11T13:38:00Z"
            },
            {
              "originalPosition": 282,
              "body": "For some reason, `sum()` always gives a python `int`... I used `functools.reduce` to perform reduction instead.",
              "createdAt": "2023-09-11T13:15:59Z",
              "updatedAt": "2023-09-11T13:38:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5gt3zZ",
          "commit": {
            "abbreviatedOid": "8111e3b"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-12T16:15:34Z",
          "updatedAt": "2023-09-12T16:16:22Z",
          "comments": [
            {
              "originalPosition": 116,
              "body": "When I read the variable name \"`expected_bits`\" I think \"the value of `bits` I expect\", e.g., in the context of a unit test. Do you mean \"the part of the encoded `meas` we expect to be bits\"?  think something like `bit_checked` would be clearer.",
              "createdAt": "2023-09-12T16:15:35Z",
              "updatedAt": "2023-09-12T17:00:20Z"
            },
            {
              "originalPosition": 249,
              "body": "Good catch.",
              "createdAt": "2023-09-12T16:16:21Z",
              "updatedAt": "2023-09-12T16:16:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5gt5he",
          "commit": {
            "abbreviatedOid": "611651a"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-12T16:19:15Z",
          "updatedAt": "2023-09-12T16:19:16Z",
          "comments": [
            {
              "originalPosition": 334,
              "body": "Got it. Please clarify in the comment.",
              "createdAt": "2023-09-12T16:19:15Z",
              "updatedAt": "2023-09-12T16:19:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5guPx1",
          "commit": {
            "abbreviatedOid": "8111e3b"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-12T17:05:08Z",
          "updatedAt": "2023-09-12T18:29:12Z",
          "comments": [
            {
              "originalPosition": 142,
              "body": "nit: to improve readability, rename to match the variable that gets this value.\r\n```suggestion\r\n        bit_check_res = self.Field(0)\r\n```",
              "createdAt": "2023-09-12T17:05:09Z",
              "updatedAt": "2023-09-12T18:29:12Z"
            },
            {
              "originalPosition": 141,
              "body": "The idea is to treat the bit checks as coefficients of a polynomial $p(x) = C_0 x^0 + \\cdots C_{n-1} x^{n-1}$ and evaluate $p$ at a random point (`red_joint_rand`). That means we should start at $C_0x^0 = 1$, not $C_0x^1 =$`red_joint_rand`.\r\n\r\nStarting at $x^1$ is valid, but I think it results in a slightly looser soundness error. (The soundness of the circuit depends on the degree of polynomial $p$.)\r\n\r\n\r\n```suggestion\r\n        r_power = self.Field(1)\r\n```",
              "createdAt": "2023-09-12T17:09:14Z",
              "updatedAt": "2023-09-12T18:29:12Z"
            },
            {
              "originalPosition": 145,
              "body": "In preparation for #25 we should move this multiplication into the gadget input.\r\n```suggestion\r\n            res += self.GADGETS[0].eval(\r\n                self.Field, [r_power * bit, bit - shares_inv]\r\n```",
              "createdAt": "2023-09-12T17:13:06Z",
              "updatedAt": "2023-09-12T18:29:12Z"
            },
            {
              "originalPosition": 108,
              "body": "nit: I wouldn't group `shares_inv` declaration with the unpacking step below, since they are logically different. I'd probably put a new line here and delete the newline above",
              "createdAt": "2023-09-12T17:15:12Z",
              "updatedAt": "2023-09-12T18:29:12Z"
            },
            {
              "originalPosition": 156,
              "body": "Same as above \r\n```suggestion\r\n        r_power = self.Field(1)\r\n```",
              "createdAt": "2023-09-12T17:17:36Z",
              "updatedAt": "2023-09-12T18:29:12Z"
            },
            {
              "originalPosition": 224,
              "body": "nit (on the fence on this one :D): When I first read this I thought you were simply renaming. But what's really going is your creating a new buffer and appending `x` to it. I'd probably do something like this:\r\n```python3\r\nencoded_measurement = []\r\nencoded_measurement += x\r\n```",
              "createdAt": "2023-09-12T17:32:59Z",
              "updatedAt": "2023-09-12T18:29:12Z"
            },
            {
              "originalPosition": 239,
              "body": "* For consistency with the circuit.\r\n```suggestion\r\n            (is_in_range, wr_res, _) = range_check(\r\n```",
              "createdAt": "2023-09-12T18:06:05Z",
              "updatedAt": "2023-09-12T18:29:12Z"
            },
            {
              "originalPosition": 169,
              "body": "This is isn't an indication of the test passing; it's just the client's assertion. (It could be cheating!)\r\n```suggestion\r\n            # Success bit, the Client's indication as to whether the current check passed.\r\n```",
              "createdAt": "2023-09-12T18:07:55Z",
              "updatedAt": "2023-09-12T18:29:12Z"
            },
            {
              "originalPosition": 174,
              "body": "This comment literally describes what the code below does. I think the code is clear enough; what I think we want to convey here is *why* it's doing this. We want `mult_check` to be `0` if the inputs here are \"valid\". What does it mean for the inputs to be valid?",
              "createdAt": "2023-09-12T18:09:26Z",
              "updatedAt": "2023-09-12T18:29:12Z"
            },
            {
              "originalPosition": 238,
              "body": "While we do need to explain the $u$-value optimization in the spec, I don't think this is the appropriate place to do it. Instead, I think we need to help the reader understand what's going on. (By the way, I think the explanation is a lot easier if we replace wr_lower_bound, wr_upper_bound with a single `wr_bound`.\r\n```suggestion\r\n            # This wraparound check passes if  `dot_prod(x, z)` is in range `[-wr_bound+1, wr_bound]`. To prove this, the prover sends the bit-encoding of `wr_res = dot_prod(x, z) + wr_bound - 1` to the verifier. To check that the dot product is larger or equal to the lower bound, the verifier then reconstructs `wr_res` and checks that it is equal to `dot_prod(x, z) + wr_bound -1`. The upper bound is checked implicitly by virtue of the fact that `wr_res` is encoded with `log2(wr_bound+1)` bits.\r\n```",
              "createdAt": "2023-09-12T18:28:18Z",
              "updatedAt": "2023-09-12T18:29:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5gu90j",
          "commit": {
            "abbreviatedOid": "8111e3b"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-12T18:55:28Z",
          "updatedAt": "2023-09-12T18:55:28Z",
          "comments": [
            {
              "originalPosition": 78,
              "body": "I was trying to understand what `self.num_bits_for_wr_res` is as a function of alpha, the fractional bits, and the norm bound. There are five levels of indirection you have to trace through in order to get the formula:\r\n\r\n1. self.num_bits_for_wr_res is a function of wr_range\r\n2. wr_range is a function of wr_upper_bound, wr_lower_bound\r\n3. wr_lower_bound, wr_upper bound are functions of alpha, encoded_l2_norm_bound_unsigned\r\n4. encoed_l2_norm_bound_unsigned is a function of encoded_l2_norm_bound\r\n5. encodd_l2_norm_bound is a function of l2_norm_bound, num_frac_bits\r\n\r\nThis is way too much friction for the reader. I would at least remove declarations that are only used once, in particular wr_range, encoded_l2_norm_bound_unsigned, and encoded_l2_norm_bound. I also think it would be useful to replace wr_upper_bound with wr_bound and wr_lower_bound with -wr_bound+1.",
              "createdAt": "2023-09-12T18:55:28Z",
              "updatedAt": "2023-09-12T19:44:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5g0xM6",
          "commit": {
            "abbreviatedOid": "948182b"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-13T12:42:12Z",
          "updatedAt": "2023-09-13T13:44:54Z",
          "comments": [
            {
              "originalPosition": 224,
              "body": "Yes it is making a copy.",
              "createdAt": "2023-09-13T12:42:12Z",
              "updatedAt": "2023-09-13T13:44:54Z"
            },
            {
              "originalPosition": 174,
              "body": "Updated the comment enumerating the valid cases. Let me know if that's clearer.",
              "createdAt": "2023-09-13T12:44:00Z",
              "updatedAt": "2023-09-13T13:44:54Z"
            },
            {
              "originalPosition": 334,
              "body": "Done.",
              "createdAt": "2023-09-13T12:47:01Z",
              "updatedAt": "2023-09-13T13:44:54Z"
            },
            {
              "originalPosition": 116,
              "body": "Renamed it.",
              "createdAt": "2023-09-13T12:47:24Z",
              "updatedAt": "2023-09-13T13:44:54Z"
            },
            {
              "originalPosition": 145,
              "body": "Good idea.",
              "createdAt": "2023-09-13T12:53:39Z",
              "updatedAt": "2023-09-13T13:44:54Z"
            },
            {
              "originalPosition": 141,
              "body": "Good suggestion!",
              "createdAt": "2023-09-13T12:53:50Z",
              "updatedAt": "2023-09-13T13:44:54Z"
            },
            {
              "originalPosition": 78,
              "body": "Makes sense. I only declare one `wr_bound` now, but it is the absolute value of the lower bound, instead of the upper bound that you are referring to. The reasons are: (1) the smaller absolute value of the two bounds define completeness error (Remark 4.11 in the paper), (2) we can avoid doing the `-1` in the wraparound check computations, which aligns better with the paper, e.g. `computed_wr_res = dot_prod(x, z) + self.wr_bound * shares_inv`, and in code comments: `# the prover sends the bit-encoding of wr_res = dot_prod(x, z) + wr_bound`. I think it might be easier to understand? Let me know if it's confusing...",
              "createdAt": "2023-09-13T13:20:47Z",
              "updatedAt": "2023-09-13T13:45:25Z"
            },
            {
              "originalPosition": 238,
              "body": "Makes sense. I only declared `wr_bound` once now, but it is the absolute value of the lower bound. See more comments in https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/28/files#r1323438980.",
              "createdAt": "2023-09-13T13:21:18Z",
              "updatedAt": "2023-09-13T13:44:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5hBT5o",
          "commit": {
            "abbreviatedOid": "a9b0ae7"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Looking really good! I know it looks like a lot of comments, but they're mostly editorial. However I spotted one potential bug I wanted you to look at, in the wraparound rand derivation.",
          "createdAt": "2023-09-14T20:51:41Z",
          "updatedAt": "2023-09-14T22:16:13Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "\r\n\r\n```suggestion\r\n    # TODO(junyec): Figure out how to fix them safely, so it doesn't negatively impact\r\n```",
              "createdAt": "2023-09-14T20:51:41Z",
              "updatedAt": "2023-09-14T22:16:13Z"
            },
            {
              "originalPosition": 79,
              "body": "I'd suggest using your GitHub username instead.",
              "createdAt": "2023-09-14T21:08:21Z",
              "updatedAt": "2023-09-14T22:16:13Z"
            },
            {
              "originalPosition": 42,
              "body": "Suggestion: Move these up to the other operational parameters and delete the \"# Other internal operational ...\" above. (No reason to have two lists of operational parameters IMO.",
              "createdAt": "2023-09-14T21:09:25Z",
              "updatedAt": "2023-09-14T22:16:13Z"
            },
            {
              "originalPosition": 22,
              "body": "l2_norm_bound (line 21 below) doesn't appear to be used by the code. I suggest deleting it. (I'm reasonably certain num_frac_bits and dimension are used, but I haven't checked.)",
              "createdAt": "2023-09-14T21:10:39Z",
              "updatedAt": "2023-09-14T22:16:13Z"
            },
            {
              "originalPosition": 24,
              "body": "Line 25 above: \"Associated types for `Valid`\" for consistency with \"Associated parameters for `Valid`\" below",
              "createdAt": "2023-09-14T21:12:03Z",
              "updatedAt": "2023-09-14T22:16:13Z"
            },
            {
              "originalPosition": 53,
              "body": "* Line 57 below: \"bound of each measurement\" -> \"bound of each gradient\"\r\n* Line 62 below: Is `0` a valid value for `num_frac_bits`?",
              "createdAt": "2023-09-14T21:14:15Z",
              "updatedAt": "2023-09-14T22:16:13Z"
            },
            {
              "originalPosition": 59,
              "body": "Make `encode_f64_into_field` a method on `PineValid` so that you don't have to pass the field to it. (call `self.encode_f64_into_field(l2_norm_bound)` instead of `self.encode_f64_into_field(self.Field, l2_norm_bound, num_frac_bits)`",
              "createdAt": "2023-09-14T21:22:53Z",
              "updatedAt": "2023-09-14T22:16:13Z"
            },
            {
              "originalPosition": 64,
              "body": "`encoded_l2_norm_bound` is only used once, here. This would be simpler:\r\n```python3\r\nencoded_l2_norm_bound = self.encode_f64_into_field(l2_norm_bound).as_unsigned() # see previous comment\r\n```",
              "createdAt": "2023-09-14T21:24:48Z",
              "updatedAt": "2023-09-14T22:16:13Z"
            },
            {
              "originalPosition": 68,
              "body": "Make the error message consistent with the previous ones (\"Invalid norm bound, ...\")",
              "createdAt": "2023-09-14T21:26:14Z",
              "updatedAt": "2023-09-14T22:16:13Z"
            },
            {
              "originalPosition": 73,
              "body": "We only call `self.compute_wr_bound()` once, so I suggest inlining it for clarity.",
              "createdAt": "2023-09-14T21:27:20Z",
              "updatedAt": "2023-09-14T22:16:13Z"
            },
            {
              "originalPosition": 74,
              "body": "?\r\n```suggestion\r\n        # Number of bits to represent each wraparound check result, which should be in range\r\n```",
              "createdAt": "2023-09-14T21:28:27Z",
              "updatedAt": "2023-09-14T22:16:13Z"
            },
            {
              "originalPosition": 84,
              "body": "```suggestion\r\n        # Set `Valid` parameters.\r\n```",
              "createdAt": "2023-09-14T21:34:56Z",
              "updatedAt": "2023-09-14T22:16:13Z"
            },
            {
              "originalPosition": 87,
              "body": "Why `+1` here?",
              "createdAt": "2023-09-14T21:35:49Z",
              "updatedAt": "2023-09-14T22:16:13Z"
            },
            {
              "originalPosition": 164,
              "body": "```suggestion\r\n            # Wraparound check result indicated by the Client:\r\n```",
              "createdAt": "2023-09-14T21:39:39Z",
              "updatedAt": "2023-09-14T22:16:13Z"
            },
            {
              "originalPosition": 176,
              "body": "It's not really the Client's fault :) (here and below)\r\n```suggestion\r\n            # - success bit is 0, the current check failed.\r\n```",
              "createdAt": "2023-09-14T21:41:02Z",
              "updatedAt": "2023-09-14T22:16:13Z"
            },
            {
              "originalPosition": 179,
              "body": "```suggestion\r\n            #   Then the difference must be 0, i.e., the bits of `wr_res`\r\n```",
              "createdAt": "2023-09-14T21:41:36Z",
              "updatedAt": "2023-09-14T22:16:13Z"
            },
            {
              "originalPosition": 181,
              "body": "Consistency with `Mul()`\r\n```suggestion\r\n            mul_check = self.GADGETS[0].eval(\r\n```",
              "createdAt": "2023-09-14T21:42:35Z",
              "updatedAt": "2023-09-14T22:16:14Z"
            },
            {
              "originalPosition": 207,
              "body": "Suppose `wraparound_joint_rand_len` is not a multiple of `NUM_ELEMS_IN_ONE_BYTE`: is `xof_output_len` still computed correctly?",
              "createdAt": "2023-09-14T21:46:47Z",
              "updatedAt": "2023-09-14T22:16:14Z"
            },
            {
              "originalPosition": 215,
              "body": "It looks to me like `rand_bits` for neighboring `i, i+1` will overlap by a bit:\r\n* `i=0` => `rand_buf_index == 0` and `offset == 0` => `rand_bits == rand_buf[0] >> 0 & 0b11`\r\n* `i=1` => `rand_buf_index == 0` and `offset == 1` => `rand_bits == rand_buf[0] >> 1 & 0b11`\r\n\r\nWhich implies that `rand_bits` are not independent.",
              "createdAt": "2023-09-14T21:52:39Z",
              "updatedAt": "2023-09-14T22:16:14Z"
            },
            {
              "originalPosition": 235,
              "body": "```suggestion\r\n        # `self.NUM_PASS_WR_CHECKS`, don't set the success bit to be 1 anymore,\r\n```",
              "createdAt": "2023-09-14T21:56:11Z",
              "updatedAt": "2023-09-14T22:16:14Z"
            },
            {
              "originalPosition": 237,
              "body": "Don't just translate the code into English; say what it does.\r\n```suggestion\r\n        # because Aggregators will check that at exactly `self.NUM_PASS_WR_CHECKS` wraparound tests passed.\r\n```",
              "createdAt": "2023-09-14T21:57:34Z",
              "updatedAt": "2023-09-14T22:16:14Z"
            },
            {
              "originalPosition": 241,
              "body": "I don't think this comment is necessary.\r\n```suggestion\r\n```",
              "createdAt": "2023-09-14T21:58:36Z",
              "updatedAt": "2023-09-14T22:16:14Z"
            },
            {
              "originalPosition": 174,
              "body": "Much better.",
              "createdAt": "2023-09-14T21:59:20Z",
              "updatedAt": "2023-09-14T22:16:14Z"
            },
            {
              "originalPosition": 244,
              "body": "For consistency with Client/Aggregator above. You could also use the terms prover/verifier, but I think Client/Aggregator works perfectly well as well.\r\n```suggestion\r\n            # `[-wr_bound, wr_bound+1]`. To prove this, the Client sends the\r\n```",
              "createdAt": "2023-09-14T22:00:41Z",
              "updatedAt": "2023-09-14T22:16:14Z"
            },
            {
              "originalPosition": 249,
              "body": "This makes cross-referencing with the circuit a tad easier\r\n```suggestion\r\n            # `computed_wr_res = dot_prod(x, z) + wr_bound`. The upper bound is checked\r\n```",
              "createdAt": "2023-09-14T22:01:38Z",
              "updatedAt": "2023-09-14T22:16:14Z"
            },
            {
              "originalPosition": 258,
              "body": "```suggestion\r\n                # in range, and the number of passing checks hasn't\r\n```",
              "createdAt": "2023-09-14T22:02:19Z",
              "updatedAt": "2023-09-14T22:16:14Z"
            },
            {
              "originalPosition": 259,
              "body": "```suggestion\r\n                # reached `self.NUM_PASS_WR_CHECKS`, set the success bit\r\n```",
              "createdAt": "2023-09-14T22:02:28Z",
              "updatedAt": "2023-09-14T22:16:14Z"
            },
            {
              "originalPosition": 109,
              "body": "For consistency with the encoding finalizer method.\r\n```suggestion\r\n        wr_joint_rand, joint_rand = front(self.wraparound_joint_rand_len, joint_rand)\r\n```",
              "createdAt": "2023-09-14T22:03:58Z",
              "updatedAt": "2023-09-14T22:16:14Z"
            },
            {
              "originalPosition": 331,
              "body": "nit: Wrap at 80 cols",
              "createdAt": "2023-09-14T22:04:35Z",
              "updatedAt": "2023-09-14T22:16:14Z"
            },
            {
              "originalPosition": 347,
              "body": "I suspect we don't need to test the gadget, since we don't need a new gadget for PINE.",
              "createdAt": "2023-09-14T22:11:30Z",
              "updatedAt": "2023-09-14T22:16:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5hDOvN",
          "commit": {
            "abbreviatedOid": "a9b0ae7"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-15T05:55:18Z",
          "updatedAt": "2023-09-15T05:55:18Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "so it's used by `test_vec_set_type_param`, I think it's some function used by VDAF test helpers. Maybe keep `l2_norm_bound` for now?",
              "createdAt": "2023-09-15T05:55:18Z",
              "updatedAt": "2023-09-15T05:55:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5hDReE",
          "commit": {
            "abbreviatedOid": "3a9cc4d"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-15T06:00:05Z",
          "updatedAt": "2023-09-15T09:36:31Z",
          "comments": [
            {
              "originalPosition": 53,
              "body": "> Is 0 a valid value for num_frac_bits?\r\n\r\nI guess it is. We should allow it. I changed the code logic.",
              "createdAt": "2023-09-15T06:00:05Z",
              "updatedAt": "2023-09-15T09:36:31Z"
            },
            {
              "originalPosition": 87,
              "body": "To include the success bit. Added a comment there.",
              "createdAt": "2023-09-15T06:05:02Z",
              "updatedAt": "2023-09-15T09:36:31Z"
            },
            {
              "originalPosition": 331,
              "body": "which line exactly? I made a pass over the file to make sure every line is within 80 cols now.",
              "createdAt": "2023-09-15T06:16:35Z",
              "updatedAt": "2023-09-15T09:36:31Z"
            },
            {
              "originalPosition": 59,
              "body": "- Having `float_field_encoder.py` allows these two functions to be tested separately, and also helps to keep `PineValid` clear with only methods required for `Valid`.\r\n- Making these two methods into `PineValid` saves some arguments.\r\n\r\nI'm ok with either way, but will the first argument make you leave `encode_f64_into_field` as-is?",
              "createdAt": "2023-09-15T06:34:55Z",
              "updatedAt": "2023-09-15T09:36:31Z"
            },
            {
              "originalPosition": 215,
              "body": "You are right. Good catch! I think I need to multiply `offset` by 2.",
              "createdAt": "2023-09-15T09:19:30Z",
              "updatedAt": "2023-09-15T09:36:31Z"
            },
            {
              "originalPosition": 207,
              "body": "This takes the ceiling of: the number of field elements for wraparound joint randomness divided by the number of elements we can sample from each byte, which makes sure to sample one more byte if `self.wraparound_joint_rand_len` is not divisible by `NUM_ELEMS_IN_ONE_BYTE`.\r\n\r\nAdded a comment there, let me know if this makes things clearer.",
              "createdAt": "2023-09-15T09:22:40Z",
              "updatedAt": "2023-09-15T09:36:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5hHw2f",
          "commit": {
            "abbreviatedOid": "a9b0ae7"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-15T17:26:30Z",
          "updatedAt": "2023-09-15T17:26:30Z",
          "comments": [
            {
              "originalPosition": 331,
              "body": "The entire paragraph: so something like this:\r\n```python3\r\n    \"\"\"\r\n    Compute the dot product of `vec0` and `vec1`, and check if it is in the\r\n    range `[lower_bound, upper_bound]`, per Section 4.1 of PINE paper.\r\n    \"\"\"\r\n```",
              "createdAt": "2023-09-15T17:26:30Z",
              "updatedAt": "2023-09-15T17:26:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5hHxQc",
          "commit": {
            "abbreviatedOid": "a9b0ae7"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-15T17:27:49Z",
          "updatedAt": "2023-09-15T17:27:49Z",
          "comments": [
            {
              "originalPosition": 331,
              "body": "Not sure what editor you're using but there is probably an easy way to automated this. In VIM you jump to visual mode, highlight the text you want to justify, then type `gq`.",
              "createdAt": "2023-09-15T17:27:49Z",
              "updatedAt": "2023-09-15T17:27:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5hIF0s",
          "commit": {
            "abbreviatedOid": "3a9cc4d"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-15T18:26:54Z",
          "updatedAt": "2023-09-15T18:26:55Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "Why does `test_vec_set_type_param` need this value?",
              "createdAt": "2023-09-15T18:26:54Z",
              "updatedAt": "2023-09-15T18:26:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5hIF6W",
          "commit": {
            "abbreviatedOid": "3a9cc4d"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-15T18:27:13Z",
          "updatedAt": "2023-09-15T19:30:23Z",
          "comments": [
            {
              "originalPosition": 87,
              "body": "Ah of course, thanks!",
              "createdAt": "2023-09-15T18:27:13Z",
              "updatedAt": "2023-09-15T19:30:23Z"
            },
            {
              "originalPosition": 207,
              "body": "Oh, I read the `/` as integer division, not floating point. The code is correct. Yes I think the comment is sufficient.",
              "createdAt": "2023-09-15T18:28:46Z",
              "updatedAt": "2023-09-15T19:30:23Z"
            },
            {
              "originalPosition": 59,
              "body": "No, I think I'd make this change still. Helper methods aren't so bad for readability, I think. ",
              "createdAt": "2023-09-15T18:31:11Z",
              "updatedAt": "2023-09-15T19:30:23Z"
            },
            {
              "originalPosition": 263,
              "body": "This looks correct to me now, but the bit fiddling makes me a bit nervous, as it is delecate. I think we we should try to encapsulate the bit fiddling in a way that make it clear that we're iterating over chunks of bits. Then we can separate unit tests for that to make sure it's correct. Here's what I came up with (ignore ugly test code):\r\n```python3\r\ndef bit_chunks(buf, chunk_bits):\r\n    assert 8 % chunk_bits == 0 and 0 < chunk_bits and chunk_bits <= 8\r\n    for byte in buf:\r\n        for chunk_start in reversed(range(0, 8, chunk_bits)):\r\n            chunk = 0\r\n            for chunk_bit in range(chunk_start, chunk_start+chunk_bits):\r\n                chunk |= byte & (1<<chunk_bit)\r\n            chunk >>= chunk_start\r\n            yield chunk\r\n\r\nbuf = urandom(16)\r\nassert ''.join(\r\n            map(lambda bit_chunk: '{0:02b}'.format(bit_chunk),\r\n                bit_chunks(buf, 2))) \\\r\n        == ''.join(map(lambda byte: '{0:08b}'.format(byte), buf))\r\n```\r\n\r\nThen we can rework this loop to be:\r\n```python3\r\nfor rand_bits in bit_chunks(xof.next(xof_output_len), 2):\r\n    pass # TODO\r\n```",
              "createdAt": "2023-09-15T19:30:02Z",
              "updatedAt": "2023-09-15T19:30:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5hJEnG",
          "commit": {
            "abbreviatedOid": "5ac30b5"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-15T21:51:19Z",
          "updatedAt": "2023-09-15T22:51:53Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "I believe it prints the parameters that initialize the VDAF during unit test execution. [here](https://github.com/cfrg/draft-irtf-cfrg-vdaf/blob/main/poc/vdaf.py#L205) and [here](https://github.com/cfrg/draft-irtf-cfrg-vdaf/blob/main/poc/vdaf.py#L309).",
              "createdAt": "2023-09-15T21:51:19Z",
              "updatedAt": "2023-09-15T22:51:53Z"
            },
            {
              "originalPosition": 331,
              "body": "Nice tip. I guess I was sometimes restricting lines to 70 cols too when we may need to copy things into the draft. I will wrap at 80 cols for now.",
              "createdAt": "2023-09-15T21:54:37Z",
              "updatedAt": "2023-09-15T22:51:53Z"
            },
            {
              "originalPosition": 263,
              "body": "Great idea. I took some of the code, and tried to simplify it with bits logic, and added tests for it.",
              "createdAt": "2023-09-15T22:48:18Z",
              "updatedAt": "2023-09-15T22:51:53Z"
            },
            {
              "originalPosition": 59,
              "body": "Ok, I moved them into `flp_pine.py` now.",
              "createdAt": "2023-09-15T22:51:44Z",
              "updatedAt": "2023-09-15T22:51:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5hJOTo",
          "commit": {
            "abbreviatedOid": "a9b0ae7"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-15T22:56:48Z",
          "updatedAt": "2023-09-15T22:56:48Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "Got it. Good enough for me.",
              "createdAt": "2023-09-15T22:56:48Z",
              "updatedAt": "2023-09-15T22:56:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5hJPSz",
          "commit": {
            "abbreviatedOid": "3a9cc4d"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-15T23:02:02Z",
          "updatedAt": "2023-09-15T23:02:02Z",
          "comments": [
            {
              "originalPosition": 263,
              "body": "Nice simplification!",
              "createdAt": "2023-09-15T23:02:02Z",
              "updatedAt": "2023-09-15T23:02:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5hJQB7",
          "commit": {
            "abbreviatedOid": "084fc78"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "\ud83c\udf82 ",
          "createdAt": "2023-09-15T23:03:33Z",
          "updatedAt": "2023-09-18T02:34:53Z",
          "comments": []
        }
      ]
    },
    {
      "number": 32,
      "id": "PR_kwDOJWdxls5abIBE",
      "title": "Script to analyze PINE soundness and zero-knowledge error",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/32",
      "state": "CLOSED",
      "author": "junyechen1996",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-09-15T10:01:25Z",
      "updatedAt": "2024-02-12T16:20:10Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "fbf3d9a8e0d04b38c660cf50a5cb0af33ff7ed6c",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "junyec/wr-param-search",
      "headRefOid": "cd77c9c178b1797ac8bf1d60311ff8a1b33905e8",
      "closedAt": "2024-02-12T16:20:06Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 33,
      "id": "PR_kwDOJWdxls5ai25I",
      "title": "poc: norm check",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/33",
      "state": "MERGED",
      "author": "junyechen1996",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "Use PolyEval gadget to evaluate the squared L2-norm because that can save the number of field elements in prover randomness.",
      "createdAt": "2023-09-18T08:55:29Z",
      "updatedAt": "2023-12-21T16:48:26Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "d0c626a933413db12cfbaa30cf4b19a82943d131",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "junyec/norm-check",
      "headRefOid": "503e293f7e27631651e1d1ebf6ff8c8d67d32774",
      "closedAt": "2023-09-22T17:07:22Z",
      "mergedAt": "2023-09-22T17:07:22Z",
      "mergedBy": "junyechen1996",
      "mergeCommit": {
        "oid": "082b456f4991a557cac8eaa854b84724cb42720d"
      },
      "comments": [
        {
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "body": "Squashed, and updated commit message.",
          "createdAt": "2023-09-22T14:21:03Z",
          "updatedAt": "2023-09-22T14:21:03Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJWdxls5hPZNQ",
          "commit": {
            "abbreviatedOid": "ad39319"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-18T15:56:29Z",
          "updatedAt": "2023-09-18T15:56:30Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "An alternative would be to use `Mul()` directly, which would allow us to fold this check into the parallel sum optimization. We should pick the approach that saves on proof size.\r\n\r\n My expectation is that the alternative would result in a smaller proof, but I could be wrong.",
              "createdAt": "2023-09-18T15:56:29Z",
              "updatedAt": "2023-09-18T15:56:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5hQM-R",
          "commit": {
            "abbreviatedOid": "ad39319"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-18T17:31:56Z",
          "updatedAt": "2023-09-18T17:31:56Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "For computing this polynomial `x^2` at least, the saving with `PolyEval` is on the prover randomness (abbreviated as PR later), because for every multiplication pair, you only need to sample one field element for PR if using `PolyEval`, but two field elements if using `Mul`, so you can save roughly `O(sqrt(d))` field elements, where `d` is dimension.\r\n\r\nThe advantage with `Mul` is we may be able to fold all three checks into one gadget if we use ParallelSum. So we can set chunk length to be roughly `O(sqrt(num_bit_entries + d + num_wr_checks))`, but I think we need to pad the chunk for each check, e.g. if `num_bit_entries` is not divisible by `sqrt(num_bit_entries + d + num_wr_checks)`, we need to pad the last chunk with 0s, in order for ParallelSum to output the right result for each check.",
              "createdAt": "2023-09-18T17:31:56Z",
              "updatedAt": "2023-09-18T17:31:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5hQNhH",
          "commit": {
            "abbreviatedOid": "ad39319"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-18T17:33:16Z",
          "updatedAt": "2023-09-18T17:33:27Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "It might be worth seeing if doing the latter actually saves communication and computation cost.",
              "createdAt": "2023-09-18T17:33:16Z",
              "updatedAt": "2023-09-18T17:33:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5hQTzK",
          "commit": {
            "abbreviatedOid": "ad39319"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-18T17:49:21Z",
          "updatedAt": "2023-09-18T17:49:21Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "What do you mean by prover randomness? `PROVE_RAND_LEN` in the spec is the sum of the arities of each of the gadgets: https://www.ietf.org/archive/id/draft-irtf-cfrg-vdaf-07.html#figure-21",
              "createdAt": "2023-09-18T17:49:21Z",
              "updatedAt": "2023-09-18T17:49:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5hQVjB",
          "commit": {
            "abbreviatedOid": "ad39319"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-18T17:53:16Z",
          "updatedAt": "2023-09-18T17:53:16Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "Prover randomness is part of the proof, and the arity for `Mul` would be 2, and the arity of `PolyEval` is 1.",
              "createdAt": "2023-09-18T17:53:16Z",
              "updatedAt": "2023-09-18T17:53:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5hQXMP",
          "commit": {
            "abbreviatedOid": "ad39319"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-18T17:57:39Z",
          "updatedAt": "2023-09-18T17:57:39Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "Right, the length of the proof depends on how many gadgets we have and the arity of each gadget. This because each proof polynomial begins with a \"seed\" for each gadget input wire.  But if the only gadget we have is `Mul`, then we actually get less blow up if we just use `Mul`, because there are less seeds. Of course, using `Mul` more times makes the proof larger.\r\n\r\nIt should be straightforward to compare the two: for each circuit, compute the proof length as a function of the dimension. The formulae to use are in the base draft.",
              "createdAt": "2023-09-18T17:57:39Z",
              "updatedAt": "2023-09-18T17:57:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5hRvxC",
          "commit": {
            "abbreviatedOid": "ad39319"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-18T21:59:26Z",
          "updatedAt": "2023-09-18T21:59:27Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "So this is how I implemented and calculated the communication cost if I use one `Mul` gadget. I computed the total number of calls for all the checks, i.e. the number of bits (`num_bits`) + `dimension` + `num_wr_checks`. The chunk length (`chunk_len`) would be `sqrt(num_bits + dimension + num_wr_checks)`, and the number of calls is `ceil(num_bits / chunk_len) + ceil(dimension / chunk_len) + ceil(num_wr_checks / chunk_len)`. I computed it like this because for each check, I think we have to pad a less-than-full chunk. Let me know if you disagree.\r\n\r\nThese are the communication cost and computation cost at the FLP layer, using 3 gadgets vs 1 Mul gadget:\r\n\r\n```\r\nthree gadgets:\r\nd = 10, proof len = 302, sample_wraparound_joint_rand: 0 ms, valid: 13 ms, prove: 62ms, query: 24 ms, distributed decision: 104 ms\r\nd = 100, proof len = 325, sample_wraparound_joint_rand: 2 ms, valid: 20 ms, prove: 64ms, query: 25 ms, distributed deicision: 87 ms\r\nd = 1000, proof len = 442, sample_wraparound_joint_rand: 22 ms, valid: 13 ms, prove: 48 ms, query: 22 ms, distributed decision: 84 ms\r\nd = 10000, proof len = 639, sample_wraparound_joint_rand: 164 ms, valid: 68 ms, prove: 163 ms, query: 83 ms, distributed decision: 311 ms\r\nd = 100000, proof len = 1623, sample_wraparound_joint_rand: 1643 ms, valid: 654 ms, prove: 1739 ms, query: 738 ms, distributed decision: 2628 ms\r\n\r\none gadget:\r\nd = 10, proof len = 233, sample_wraparound_joint_rand: 0 ms, valid: 12 ms, prove: 58 ms, query: 24 ms, distributed decision: 129 ms\r\nd = 100, proof len = 235, sample_wraparound_joint_rand: 2 ms, valid: 14 ms, prove: 62 ms, query: 24 ms, distributed decision: 81 ms\r\nd = 1000, proof len = 379, sample_wraparound_joint_rand: 17 ms, valid: 19 ms, prove: 84 ms, query: 37 ms, distributed decision: 135 ms\r\nd = 10000, proof len = 481, sample_wraparound_joint_rand: 179 ms, valid: 60 ms, prove: 170 ms, query: 96 ms, distributed decision: 351 ms\r\nd = 100000, proof len = 1663, sample_wraparound_joint_rand: 1682 ms, valid: 625 ms, prove: 2054 ms, query: 924 ms, distributed decision: 3190 ms\r\n```\r\n\r\nWith higher `dimension`, three gadgets start to show advantage. The computation cost between the two is very similar. I think choosing `chunk_len` can also be important for communication cost.",
              "createdAt": "2023-09-18T21:59:27Z",
              "updatedAt": "2023-09-18T22:00:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5haRrU",
          "commit": {
            "abbreviatedOid": "ad39319"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-19T22:10:52Z",
          "updatedAt": "2023-09-19T22:10:52Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "\r\n> These are the communication cost and computation cost at the FLP layer, using 3 gadgets vs 1 Mul gadget:\r\n\r\nWhat are the three gadgets? Mul is used for bit checks and the warparound checks;  PolyEval($x^2$) is used for the norm check; what is the third?\r\n\r\nAnd is your idea to do ParallelSum for all three, separately? I don't understand why this would ever have better performance than if we coalesced all multiplications into ParallelSum calls.\r\n\r\n> ```\r\n> three gadgets:\r\n> d = 10, proof len = 302, sample_wraparound_joint_rand: 0 ms, valid: 13 ms, prove: 62ms, query: 24 ms, distributed decision: 104 ms\r\n> d = 100, proof len = 325, sample_wraparound_joint_rand: 2 ms, valid: 20 ms, prove: 64ms, query: 25 ms, distributed deicision: 87 ms\r\n> d = 1000, proof len = 442, sample_wraparound_joint_rand: 22 ms, valid: 13 ms, prove: 48 ms, query: 22 ms, distributed decision: 84 ms\r\n> d = 10000, proof len = 639, sample_wraparound_joint_rand: 164 ms, valid: 68 ms, prove: 163 ms, query: 83 ms, distributed decision: 311 ms\r\n> d = 100000, proof len = 1623, sample_wraparound_joint_rand: 1643 ms, valid: 654 ms, prove: 1739 ms, query: 738 ms, distributed decision: 2628 ms\r\n> \r\n> one gadget:\r\n> d = 10, proof len = 233, sample_wraparound_joint_rand: 0 ms, valid: 12 ms, prove: 58 ms, query: 24 ms, distributed decision: 129 ms\r\n> d = 100, proof len = 235, sample_wraparound_joint_rand: 2 ms, valid: 14 ms, prove: 62 ms, query: 24 ms, distributed decision: 81 ms\r\n> d = 1000, proof len = 379, sample_wraparound_joint_rand: 17 ms, valid: 19 ms, prove: 84 ms, query: 37 ms, distributed decision: 135 ms\r\n> d = 10000, proof len = 481, sample_wraparound_joint_rand: 179 ms, valid: 60 ms, prove: 170 ms, query: 96 ms, distributed decision: 351 ms\r\n> d = 100000, proof len = 1663, sample_wraparound_joint_rand: 1682 ms, valid: 625 ms, prove: 2054 ms, query: 924 ms, distributed decision: 3190 ms\r\n> ```\r\n> \r\n> With higher `dimension`, three gadgets start to show advantage. The computation cost between the two is very similar. I think choosing `chunk_len` can also be important for communication cost.\r\n\r\nAre these criterion benchmarks ore are these still your handwritten timers?\r\n\r\nChosing the right `chunk_len` will indeed be important for communication cost. It also matters for prove/query time because these depend on the length of the proof. The neat thing about PINE is that the proof length is relatively constant, at least for fixed num_frac_bits, alpha, and so on. We should be able to pick an optimal `chunk_len`.",
              "createdAt": "2023-09-19T22:10:52Z",
              "updatedAt": "2023-09-19T22:10:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5hajQy",
          "commit": {
            "abbreviatedOid": "ad39319"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-19T23:45:15Z",
          "updatedAt": "2023-09-19T23:45:16Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "> What are the three gadgets?\r\n\r\nI was using one Mul gadget for bit check, one Mul gadget for degree-2 check in wraparound check, and PolyEval(x^2) for norm check. I call this solution \"PINE (3 matrices)\". You are right the two Mul checks can be collapsed for better performance in all cases. I also wrote a solution that collapsed all three checks into one gadget (I call this \"PINE (1 matrix)\"), and benchmarked that. See \"Actual Benchmark\" in the attached PDF, starting from page 3.\r\n\r\n> Are these criterion benchmarks ore are these still your handwritten timers?\r\n\r\nThose were from handwritten timers, but I've written a Criterion benchmark and produce the numbers. See attached PDF. Ignore the first two pages.\r\n\r\n> Chosing the right chunk_len will indeed be important for communication cost... We should be able to pick an optimal chunk_len.\r\n\r\nAgreed. For bit checks, it depends on `l2_norm_bound` and `num_frac_bits` though.\r\n\r\n[PINE Computation Benchmark.pdf](https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/files/12667293/PINE.Computation.Benchmark.pdf)\r\n\r\n",
              "createdAt": "2023-09-19T23:45:15Z",
              "updatedAt": "2023-09-19T23:45:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5heq6N",
          "commit": {
            "abbreviatedOid": "ad39319"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-20T11:37:53Z",
          "updatedAt": "2023-09-20T11:37:53Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "Updated the benchmark with an approach that uses one Mul gadget for both bit check and wraparound check, and one PolyEval gadget for norm check. TL;DR; I did get better communication cost, but computation cost for all approaches seems similar. Ignore the theoretical analysis before page 3.\r\n\r\n[PINE Computation Benchmark.pdf](https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/files/12672544/PINE.Computation.Benchmark.pdf)\r\n",
              "createdAt": "2023-09-20T11:37:53Z",
              "updatedAt": "2023-09-20T11:37:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5hhoCL",
          "commit": {
            "abbreviatedOid": "ad39319"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-20T17:47:57Z",
          "updatedAt": "2023-09-20T17:47:58Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "Thanks for being so thorough! So it sounds like the proposal is to use `ParallelSum(Mul())` for the bit checks and wraparound checks and use `ParallelSum(PolyEval(x^2))` for the norm check?\r\n\r\nQuestion: Is `ParallelSum`-ing the norm check actually worth it? Note that the `ParallelSum` optimization usually results in a smaller proof, but a larger verifier message. If the savings on the size of the proof are negligible (<10 field elements, say) then it might worth not blowing up the verifier message. (If indeed it does.)",
              "createdAt": "2023-09-20T17:47:57Z",
              "updatedAt": "2023-09-20T17:47:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5hhsoP",
          "commit": {
            "abbreviatedOid": "ad39319"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-20T17:59:57Z",
          "updatedAt": "2023-09-20T18:04:15Z",
          "comments": [
            {
              "originalPosition": 49,
              "body": "Why `+1`? A comment similar to the one for `self.num_bits_for_wr_res` would be helpful.",
              "createdAt": "2023-09-20T17:59:58Z",
              "updatedAt": "2023-09-20T18:04:15Z"
            },
            {
              "originalPosition": 94,
              "body": "We now know the exact number of calls, right?\r\n```suggestion\r\n        # The number of calls to the `Mul` gadget should be the\r\n```",
              "createdAt": "2023-09-20T18:02:50Z",
              "updatedAt": "2023-09-20T18:04:15Z"
            },
            {
              "originalPosition": 22,
              "body": "Ohhh, disregard: `ParrallelSum` for `PolyEval` will absolutely be worth it because we use it for squaring each coordinate of the gradient!",
              "createdAt": "2023-09-20T18:04:09Z",
              "updatedAt": "2023-09-20T18:04:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5hhw2N",
          "commit": {
            "abbreviatedOid": "ad39319"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Looking good!",
          "createdAt": "2023-09-20T18:10:40Z",
          "updatedAt": "2023-09-20T18:21:32Z",
          "comments": [
            {
              "originalPosition": 115,
              "body": "Instead of `0` and `1`, I'd go with something that is more inline with the notation in the paper.\r\n```suggestion\r\n        (norm_check_v, norm_check_u) = \\\r\n```",
              "createdAt": "2023-09-20T18:10:41Z",
              "updatedAt": "2023-09-20T18:21:32Z"
            },
            {
              "originalPosition": 149,
              "body": "```suggestion\r\n        # Compute the squared L2-norm of the gradient.\r\n```",
              "createdAt": "2023-09-20T18:11:09Z",
              "updatedAt": "2023-09-20T18:21:32Z"
            },
            {
              "originalPosition": 152,
              "body": "A little neater maybe (though not sure if the interpreter will be happy with this)\r\n```suggestion\r\n        computed_sq_norm = sum(self.GADGETS[1].eval(self.Field, [val]) for val in x)\r\n```",
              "createdAt": "2023-09-20T18:15:58Z",
              "updatedAt": "2023-09-20T18:21:32Z"
            },
            {
              "originalPosition": 154,
              "body": "what do you mean by \"result\" and \"difference\"? These are `sq_norm - lower_bound` and `upper_bound - sq_norm`, correct?\r\n\r\nIt would be useful if these values had names, but I don't understand the intended meaning of \"result\" and \"difference\". \"result\" kind of makes sense because in this case `lower_bound == 0`, but difference is kinda vague.\r\n\r\nThis is one of those situation where I think lining up with the notation of the paper is appropriate. that way the notation carries the \"meaning\" of these values as they're represented in the paper.",
              "createdAt": "2023-09-20T18:20:55Z",
              "updatedAt": "2023-09-20T18:21:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5hh1wr",
          "commit": {
            "abbreviatedOid": "ad39319"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-20T18:24:20Z",
          "updatedAt": "2023-09-20T18:24:21Z",
          "comments": [
            {
              "originalPosition": 115,
              "body": "Or \"res\" and \"diff\" as you did elsewhere, but see comment below.",
              "createdAt": "2023-09-20T18:24:20Z",
              "updatedAt": "2023-09-20T18:24:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5hlPVc",
          "commit": {
            "abbreviatedOid": "1563170"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-21T07:49:37Z",
          "updatedAt": "2023-09-21T07:58:18Z",
          "comments": [
            {
              "originalPosition": 115,
              "body": "So the first check is to check the squared L2-norm computed with the gadget matches the `v` bits claimed by the Client. The second check is the range check for squared L2-norm. I call them `norm_sum_check` and `norm_range_check` now. Let me know if it's better.",
              "createdAt": "2023-09-21T07:49:37Z",
              "updatedAt": "2023-09-21T07:58:18Z"
            },
            {
              "originalPosition": 154,
              "body": "Makes sense. I call them `norm_range_check_v` and `norm_range_check_u` now.",
              "createdAt": "2023-09-21T07:50:31Z",
              "updatedAt": "2023-09-21T07:58:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5hqUd6",
          "commit": {
            "abbreviatedOid": "1563170"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-21T18:36:21Z",
          "updatedAt": "2023-09-21T18:36:21Z",
          "comments": [
            {
              "originalPosition": 152,
              "body": "nit: Sorry to go back on forth on this: Let's avoid importing packages we don't absolutely need. We don't want the eventual draft to have to use `functools` :)",
              "createdAt": "2023-09-21T18:36:21Z",
              "updatedAt": "2023-09-21T18:36:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5hqWn7",
          "commit": {
            "abbreviatedOid": "ad39319"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-21T18:42:14Z",
          "updatedAt": "2023-09-21T18:42:15Z",
          "comments": [
            {
              "originalPosition": 115,
              "body": "`norm_range_check` is good. `norm_sum_check` is not quite right (sum of what?). How about `norm_equality_check`?",
              "createdAt": "2023-09-21T18:42:14Z",
              "updatedAt": "2023-09-21T18:42:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5hqXJs",
          "commit": {
            "abbreviatedOid": "1563170"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-21T18:43:47Z",
          "updatedAt": "2023-09-21T18:51:35Z",
          "comments": [
            {
              "originalPosition": 168,
              "body": "* we're actually checking the squared L2-norm, right?\r\n* Less is more\r\n```suggestion\r\n            # Check that the computed squared L2-norm result matches the value claimed by the Client.\r\n```",
              "createdAt": "2023-09-21T18:43:47Z",
              "updatedAt": "2023-09-21T18:51:36Z"
            },
            {
              "originalPosition": 172,
              "body": "Don't just re-iterate the math in comments; let the code speak for itself. Instead, just say what's happening here. Maybe: \"Check that the squared L2-norm is in range.\"",
              "createdAt": "2023-09-21T18:45:00Z",
              "updatedAt": "2023-09-21T18:51:36Z"
            },
            {
              "originalPosition": 47,
              "body": "nit: Avoid declaring this variable. (On line 90 do `self.encoded_sq_norm_bound.as_unsigned()`)",
              "createdAt": "2023-09-21T18:46:41Z",
              "updatedAt": "2023-09-21T18:51:36Z"
            },
            {
              "originalPosition": 49,
              "body": "The comment doesn't clarify (to me at least) why an extra bit is needed.",
              "createdAt": "2023-09-21T18:48:40Z",
              "updatedAt": "2023-09-21T18:51:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5hqaZQ",
          "commit": {
            "abbreviatedOid": "1563170"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Looks functionally correct, I just have editorial comments left.",
          "createdAt": "2023-09-21T18:52:24Z",
          "updatedAt": "2023-09-21T19:00:23Z",
          "comments": [
            {
              "originalPosition": 211,
              "body": "```suggestion\r\n        return (red_mul_check_res, success_bit_check_res)\r\n```",
              "createdAt": "2023-09-21T18:52:24Z",
              "updatedAt": "2023-09-21T19:00:24Z"
            },
            {
              "originalPosition": 187,
              "body": "More descriptive\r\n```suggestion\r\n        wr_success_count_check = \\\r\n```",
              "createdAt": "2023-09-21T18:53:25Z",
              "updatedAt": "2023-09-21T19:00:24Z"
            },
            {
              "originalPosition": 156,
              "body": "connect the reader to the paper here: what are `v` and `u`?",
              "createdAt": "2023-09-21T18:54:18Z",
              "updatedAt": "2023-09-21T19:00:24Z"
            },
            {
              "originalPosition": 127,
              "body": "Whenever possible, It's good practice to use the same variable name in the function body as is used for the return value. That way the reader doesn't have to keep two names for the same thing in there head at once.",
              "createdAt": "2023-09-21T18:55:57Z",
              "updatedAt": "2023-09-21T19:00:24Z"
            },
            {
              "originalPosition": 220,
              "body": "The names used here hsould match the names used in the circuit.",
              "createdAt": "2023-09-21T18:56:45Z",
              "updatedAt": "2023-09-21T19:00:24Z"
            },
            {
              "originalPosition": 251,
              "body": "The \"otherwise\" part of this comment should be moved to the `else` branch.",
              "createdAt": "2023-09-21T18:58:58Z",
              "updatedAt": "2023-09-21T19:00:24Z"
            },
            {
              "originalPosition": 251,
              "body": "It's a good idea to clarify that the value is arbitrary, but we don't want implementers to think they can pick any value they want. We need to specify it in order to avoid interop issues.\r\n```suggestion\r\n                # check result to 0.\r\n```",
              "createdAt": "2023-09-21T19:00:04Z",
              "updatedAt": "2023-09-21T19:00:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5hrIjf",
          "commit": {
            "abbreviatedOid": "1563170"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-21T20:58:33Z",
          "updatedAt": "2023-09-21T20:58:37Z",
          "comments": [
            {
              "originalPosition": 87,
              "body": "nit: Remove outer paranthesis\r\n```suggestion\r\n        total_num_bits = 2 * self.num_bits_for_norm +\r\n```",
              "createdAt": "2023-09-21T20:58:33Z",
              "updatedAt": "2023-09-21T20:58:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5hrI1j",
          "commit": {
            "abbreviatedOid": "1563170"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-21T20:59:28Z",
          "updatedAt": "2023-09-21T20:59:28Z",
          "comments": [
            {
              "originalPosition": 76,
              "body": "Double check that this is still correct",
              "createdAt": "2023-09-21T20:59:28Z",
              "updatedAt": "2023-09-21T20:59:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5hrvoL",
          "commit": {
            "abbreviatedOid": "48131e1"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-21T23:32:04Z",
          "updatedAt": "2023-09-22T00:19:15Z",
          "comments": [
            {
              "originalPosition": 76,
              "body": "It's still correct. I hope the comment there is useful for readers.",
              "createdAt": "2023-09-21T23:32:04Z",
              "updatedAt": "2023-09-22T00:19:15Z"
            },
            {
              "originalPosition": 87,
              "body": "Fine with me. The good thing about parenthesis is that I don't have to stick a \"\\\\\" at the end of an unfinished line.",
              "createdAt": "2023-09-21T23:32:38Z",
              "updatedAt": "2023-09-22T00:19:15Z"
            },
            {
              "originalPosition": 127,
              "body": "Good point. Fixed now.",
              "createdAt": "2023-09-21T23:36:29Z",
              "updatedAt": "2023-09-22T00:19:15Z"
            },
            {
              "originalPosition": 152,
              "body": "err I didn't know `sum` takes in an initial value as the second argument. I removed `functools` now.",
              "createdAt": "2023-09-21T23:45:38Z",
              "updatedAt": "2023-09-22T00:19:15Z"
            },
            {
              "originalPosition": 156,
              "body": "explained more in the comments.",
              "createdAt": "2023-09-21T23:51:51Z",
              "updatedAt": "2023-09-22T00:19:15Z"
            },
            {
              "originalPosition": 47,
              "body": "Also fixed this case for `wr_bound`.",
              "createdAt": "2023-09-21T23:59:37Z",
              "updatedAt": "2023-09-22T00:19:15Z"
            },
            {
              "originalPosition": 49,
              "body": "I clarified it further. Let me know if it is better. Hope it's not too verbose.",
              "createdAt": "2023-09-21T23:59:48Z",
              "updatedAt": "2023-09-22T00:19:15Z"
            },
            {
              "originalPosition": 115,
              "body": "I meant sum of squares. https://eprint.iacr.org/2019/188.pdf was using the word \"sum-check\" a couple of times. But calling it `norm_equality_check` sounds good to me.",
              "createdAt": "2023-09-22T00:19:08Z",
              "updatedAt": "2023-09-22T00:19:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5hr50l",
          "commit": {
            "abbreviatedOid": "48131e1"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-22T00:20:13Z",
          "updatedAt": "2023-09-22T00:20:14Z",
          "comments": [
            {
              "originalPosition": 302,
              "body": "I have to add `Field` as an argument to this function to take care of the base case `len(vec0) == 0`, since I removed `functools.reduce`.",
              "createdAt": "2023-09-22T00:20:13Z",
              "updatedAt": "2023-09-22T00:20:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5hr_bb",
          "commit": {
            "abbreviatedOid": "48131e1"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-09-22T00:36:03Z",
          "updatedAt": "2023-09-22T00:41:30Z",
          "comments": [
            {
              "originalPosition": 302,
              "body": "Here I think we'd be fine with `functools` since `dot_prod()` is simple enough to specify in English:\r\n\r\n```\r\n* `dot_prod(vec0: list[Field], vec1: list[Field]) -> Field` computes the dot product of vectors `vec0` and `vec1`.\r\n```",
              "createdAt": "2023-09-22T00:36:03Z",
              "updatedAt": "2023-09-22T00:41:30Z"
            },
            {
              "originalPosition": 176,
              "body": "Hmm, I was hoping that this would be a lot simpler. Feel free to leave as is, but I think what you had originally is a little easier to read.",
              "createdAt": "2023-09-22T00:41:13Z",
              "updatedAt": "2023-09-22T00:41:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5hwWls",
          "commit": {
            "abbreviatedOid": "48131e1"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-22T14:19:55Z",
          "updatedAt": "2023-09-22T14:19:56Z",
          "comments": [
            {
              "originalPosition": 302,
              "body": "ok, I've reverted it back to using `functoolss.reduce` here. It's not a huge problem because now I know how to use `sum()` to sum elements that are not integers...",
              "createdAt": "2023-09-22T14:19:55Z",
              "updatedAt": "2023-09-22T14:19:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5hwW-X",
          "commit": {
            "abbreviatedOid": "48131e1"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-22T14:20:48Z",
          "updatedAt": "2023-09-22T14:20:48Z",
          "comments": [
            {
              "originalPosition": 176,
              "body": "Maybe it's because `sum` has to take another argument here. I've replaced `map(lambda val: ..., x)` with `[... for val in x]`. Hope that makes things slightly simpler.",
              "createdAt": "2023-09-22T14:20:48Z",
              "updatedAt": "2023-09-22T14:20:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5hwnyR",
          "commit": {
            "abbreviatedOid": "503e293"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-09-22T14:55:26Z",
          "updatedAt": "2023-09-22T14:55:26Z",
          "comments": []
        }
      ]
    },
    {
      "number": 35,
      "id": "PR_kwDOJWdxls5bHOVy",
      "title": "PINE VDAF Shard implementation",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/35",
      "state": "MERGED",
      "author": "junyechen1996",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "Mimic Prio3 shard implementation but derive joint randomness twice, first for wraparound joint randomness with partially-encoded measurement of length \"dimension\", second for verification joint randomness with the full-encoded measurement.",
      "createdAt": "2023-09-25T11:37:24Z",
      "updatedAt": "2023-11-30T20:32:11Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "52cb9dc24146edbd3a0532b1c6ffa77472b08b32",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "junyec/vdaf-shard",
      "headRefOid": "92f33d35c98e1d166274855d331d45ccb2eb7fab",
      "closedAt": "2023-11-30T20:32:07Z",
      "mergedAt": "2023-11-30T20:32:07Z",
      "mergedBy": "junyechen1996",
      "mergeCommit": {
        "oid": "0c85319ddf7413034d39e13107b7e4f58d122dfc"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJWdxls5h3fzM",
          "commit": {
            "abbreviatedOid": "89dc7ac"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-25T11:39:08Z",
          "updatedAt": "2023-09-25T11:39:08Z",
          "comments": [
            {
              "originalPosition": 89,
              "body": "@cjpatton I followed the current reference implementation for Prio3 VDAF, which still uses class methods. Will the standard draft eventually move to using instance methods?",
              "createdAt": "2023-09-25T11:39:08Z",
              "updatedAt": "2023-09-25T11:39:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5jcnMf",
          "commit": {
            "abbreviatedOid": "89dc7ac"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Looking good overall! Most comments are editorial, I have just one suggestion for the spec itself: Before we generate the wraparound joint randomness, I think it's a good idea to commit to as much of the encoded measurement as possible. In particular I would move the following out of `finalize_encoding_with_wraparound_joint_rnad()` to `encode()`:\r\n```python3\r\n        # Encode results for range check of the squared L2-norm.\r\n        (_, norm_range_check_v, norm_range_check_u) = range_check(\r\n            x, x, self.Field(0), self.encoded_sq_norm_bound,\r\n        )\r\n        encoded_measurement += self.Field.encode_into_bit_vector(\r\n            norm_range_check_v.as_unsigned(),\r\n            self.num_bits_for_norm,\r\n        )\r\n        encoded_measurement += self.Field.encode_into_bit_vector(\r\n            norm_range_check_u.as_unsigned(),\r\n            self.num_bits_for_norm,\r\n        )\r\n```",
          "createdAt": "2023-10-10T17:19:10Z",
          "updatedAt": "2023-10-10T18:07:58Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "We could import most of these from the `vdaf_prio3` module.",
              "createdAt": "2023-10-10T17:19:10Z",
              "updatedAt": "2023-10-10T18:07:58Z"
            },
            {
              "originalPosition": 50,
              "body": "This conflicts with the codepoint we're currently using with Prio2. Consult with Shan to figure out which codepoint you want to use for Pine.",
              "createdAt": "2023-10-10T17:21:58Z",
              "updatedAt": "2023-10-10T18:07:58Z"
            },
            {
              "originalPosition": 41,
              "body": "A littler simpler\r\n```suggestion\r\nclass Pine(Vdaf):\r\n```",
              "createdAt": "2023-10-10T17:22:17Z",
              "updatedAt": "2023-10-10T18:07:58Z"
            },
            {
              "originalPosition": 60,
              "body": "Inline these comments like you do below.",
              "createdAt": "2023-10-10T17:23:16Z",
              "updatedAt": "2023-10-10T18:07:58Z"
            },
            {
              "originalPosition": 66,
              "body": "```suggestion\r\n            # Helper: seeds both measurement share and proof share.\r\n```",
              "createdAt": "2023-10-10T17:24:13Z",
              "updatedAt": "2023-10-10T18:07:58Z"
            },
            {
              "originalPosition": 64,
              "body": "```suggestion\r\n            # Leader: expanded measurement share and proof share.\r\n```",
              "createdAt": "2023-10-10T17:24:19Z",
              "updatedAt": "2023-10-10T18:07:58Z"
            },
            {
              "originalPosition": 67,
              "body": "If interested, we should be able to securely re-use the same seed for the measurement share, proof share, and blinds: https://github.com/cfrg/draft-irtf-cfrg-vdaf/issues/185\r\n\r\nIf you plan to do a fresh proof for Pine anyway, then I think it's worth taking this optimization as well. We didn't take it for Prio3 only because it would break the existing security proof and we're not yet sure how it impacts bounds.",
              "createdAt": "2023-10-10T17:25:57Z",
              "updatedAt": "2023-10-10T18:07:58Z"
            },
            {
              "originalPosition": 89,
              "body": "Good question. This is an area where there is somewhat of a gap between the reference code and the spec. Namely, we don't spell out how to construct, say, Prio3SumVec from its parameters, but just define the parameters that are used in the circuit. I think one can do something similar here.\r\n\r\nFor now, I think we could stick with what you have.",
              "createdAt": "2023-10-10T17:27:54Z",
              "updatedAt": "2023-10-10T18:07:59Z"
            },
            {
              "originalPosition": 103,
              "body": "```suggestion\r\n            # - One measurement share seed for each Helper.\r\n            # - One proof share seed for each Helper.\r\n```",
              "createdAt": "2023-10-10T17:29:16Z",
              "updatedAt": "2023-10-10T18:07:58Z"
            },
            {
              "originalPosition": 95,
              "body": "```suggestion\r\n        class PineVdafWithParams(PineVdaf):\r\n```",
              "createdAt": "2023-10-10T17:29:40Z",
              "updatedAt": "2023-10-10T18:07:58Z"
            },
            {
              "originalPosition": 414,
              "body": "What do you mean by \"sanity\"? Why not just give this a name that says what you're testing?\r\n```suggestion\r\ndef test_shard_sanity(Vdaf: PineVdaf):\r\n```",
              "createdAt": "2023-10-10T17:30:23Z",
              "updatedAt": "2023-10-10T18:07:58Z"
            },
            {
              "originalPosition": 120,
              "body": "```suggestion\r\n        # Parse Helper seeds. Each Helper has 4 seeds:\r\n```",
              "createdAt": "2023-10-10T17:43:54Z",
              "updatedAt": "2023-10-10T18:07:59Z"
            },
            {
              "originalPosition": 181,
              "body": "```suggestion\r\n        # Finish encoding the measurement with the wraparound joint randomness.\r\n```",
              "createdAt": "2023-10-10T17:45:28Z",
              "updatedAt": "2023-10-10T18:07:59Z"
            },
            {
              "originalPosition": 246,
              "body": "This comment seems redundant in light of the comment above.",
              "createdAt": "2023-10-10T17:46:57Z",
              "updatedAt": "2023-10-10T18:07:59Z"
            },
            {
              "originalPosition": 356,
              "body": "This comment seems somewhat redundant. Do you think any of the function parameters are not clear from context? ",
              "createdAt": "2023-10-10T17:51:31Z",
              "updatedAt": "2023-10-10T18:07:59Z"
            },
            {
              "originalPosition": 194,
              "body": "It's odd that we call `helper_meas_share()` both on the partially encoded measurement and the fully encoded measurement. This happens to work because the former (`x`) is a prefix of the latter (`x || bit_checked`). My hunch is that, if we had some other encoding (`bit_checked || x`, for example), then we could end up with some weird issues.\r\n\r\nTo make this more clear, I'd suggesting changing the terminology to make it clear that we expect a stricter encoding. Maybe change\r\n\r\n```python3\r\nencoded = finalize_encoding_with(wr_joint_rand, partially_encoded)\r\n```\r\n\r\nto something like\r\n\r\n```python3\r\nencoded = partially_encoded + run_wr_tests(wr_joint_rand, partially_encoded)\r\n```",
              "createdAt": "2023-10-10T18:03:32Z",
              "updatedAt": "2023-10-10T18:07:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5k-uN5",
          "commit": {
            "abbreviatedOid": "599643f"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "I believe the remaining opens are:\r\n\r\n- Importing constants from `vdaf_prio3` module, but I made some tweaks: https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/35/files#r1353031295\r\n- Comment about prover committing to L2-norm check results before deriving wraparound joint randomness, and the comment of renaming `finalize_encoding_with` to `run_wr_tests`: https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/35/files#r1353075330",
          "createdAt": "2023-10-24T07:16:06Z",
          "updatedAt": "2023-10-24T08:20:24Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "Good point, done. I made two changes on top of it:\r\n\r\nI tried to alias `USAGE_JOINT_RAND_*` into `USAGE_VERIFICATION_JOINT_RAND_*`, to make the distinction between verification joint randomness and wraparound joint randomness, e.g.:\r\n\r\n```\r\nimport USAGE_JOINT_RANDOMNESS as USAGE_VERIFICATION_JOINT_RANDOMNESS\r\n```\r\n\r\nAnd I tried to use the new usage constant beyond what's used in Prio3, e.g.:\r\n\r\n```\r\nUSAGE_WRAPAROUND_JOINT_RANDOMNESS = USAGE_JOINT_RAND_PART + 1\r\nUSAGE_WRAPAROUND_JOINT_RAND_SEED = USAGE_JOINT_RAND_PART + 2\r\nUSAGE_WRAPAROUND_JOINT_RAND_PART = USAGE_JOINT_RAND_PART + 3\r\n```",
              "createdAt": "2023-10-24T07:16:06Z",
              "updatedAt": "2023-10-24T08:20:24Z"
            },
            {
              "originalPosition": 50,
              "body": "Changed it to `0xFFFFFFFF` for now until we officially decide it later.",
              "createdAt": "2023-10-24T07:16:30Z",
              "updatedAt": "2023-10-24T08:20:24Z"
            },
            {
              "originalPosition": 67,
              "body": "Thanks for bringing this up. I asked this question briefly to Kunal and Guy before, and they prefer to separate the seed blinds for now. The issue seems to suggest there is still some security analysis needed. I think we will have time to make this optimization later until we have more certainty.",
              "createdAt": "2023-10-24T07:17:06Z",
              "updatedAt": "2023-10-24T08:20:24Z"
            },
            {
              "originalPosition": 356,
              "body": "Good point. Simplied the header comment.",
              "createdAt": "2023-10-24T07:18:44Z",
              "updatedAt": "2023-10-24T08:20:24Z"
            },
            {
              "originalPosition": 414,
              "body": "Its goal is to check the output share length of `shard()`. I renamed it to `test_shard_result_share_length()`.",
              "createdAt": "2023-10-24T07:32:55Z",
              "updatedAt": "2023-10-24T08:20:24Z"
            },
            {
              "originalPosition": 194,
              "body": "I made this change along with [your suggestion](https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/35#pullrequestreview-1668444959) to ask prover to commit to as much result as possible, when deriving wraparound joint randomness. But I think for `helper_meas_share`, we still need to call it twice, once to derive wraparound joint rand, and the second time to derive verification joint rand. An alternative is to only call it once with length `Pine.Flp.MEAS_LEN`, but we need to keep those secret shares in memory all the time until both joint randomness are derived.",
              "createdAt": "2023-10-24T08:16:21Z",
              "updatedAt": "2023-10-24T08:20:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5nUEd3",
          "commit": {
            "abbreviatedOid": "1639c22"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good! The remaining comments are just about readability and code style.\r\n\r\nOne high level suggestion for the spec itself: It would be simpler if you defined it in terms of two Aggregators instead of many. Although we did this for Prio3, I don't think it's necessary to do so here. If you think the generalization would be useful, then by all means, keep it. It's totally your decision, I don't have a strong opinion either way.",
          "createdAt": "2023-11-16T00:59:59Z",
          "updatedAt": "2023-11-16T01:21:59Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "Hmm, thanks for taking the time to implement my suggestion here, but now that I'm looking at it, this looks a little dangerous. Suppose the constants from `vdaf_prio3` changed so that we end up with two of these constants having the same value.\r\n\r\nI think best coding practice here would be to define all oft he constants ourselves. That way any changes to the upstream code don't break us here without us knowing.\r\n\r\nAn alternative would be to add a unit test that checks that all of the constants are distinct, but this seems overly commplicated.",
              "createdAt": "2023-11-16T00:59:59Z",
              "updatedAt": "2023-11-16T01:21:59Z"
            },
            {
              "originalPosition": 26,
              "body": "Nice, I think this is a great improvement.",
              "createdAt": "2023-11-16T01:10:46Z",
              "updatedAt": "2023-11-16T01:21:59Z"
            },
            {
              "originalPosition": 183,
              "body": "nit: s/wraparound/wr/\r\n\r\n(I think it would be useful to use the abbreviation consistently.)\r\n\r\nHere and elsewhere.",
              "createdAt": "2023-11-16T01:14:57Z",
              "updatedAt": "2023-11-16T01:21:59Z"
            },
            {
              "originalPosition": 188,
              "body": "This logic of generating joint randomness is used twice, once for the wraparound checks and another for the FLP. I wonder if we can cleanly de-duplicate the code so that there is a function that we call twice instead of having to plop down the same big loop twice.",
              "createdAt": "2023-11-16T01:17:23Z",
              "updatedAt": "2023-11-16T01:21:59Z"
            },
            {
              "originalPosition": 211,
              "body": "I'd probably call this variable `vf_joint_rand`, for consistency with `wr_joint_rand`.",
              "createdAt": "2023-11-16T01:17:56Z",
              "updatedAt": "2023-11-16T01:21:59Z"
            },
            {
              "originalPosition": 301,
              "body": "Instead of passing in `meas_len`, we should be able to compute it here with just `Pine.Flp`. That would make the API a bit simpler.",
              "createdAt": "2023-11-16T01:19:23Z",
              "updatedAt": "2023-11-16T01:21:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5odHVk",
          "commit": {
            "abbreviatedOid": "e5a419d"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "Remaining open threads:\r\n\r\n- Robustness with using Prio3's domain separation tags, I made it slightly more robust: https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/35#discussion_r1395031300\r\n- https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/35#discussion_r1395040460: @cjpatton I put the two loops to generate joint randomness parts into a helper function, to reduce duplicated code.\r\n- Whether we can remove `meas_len` in `helper_meas_share` function: https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/35/files#r1395041607",
          "createdAt": "2023-11-28T09:45:47Z",
          "updatedAt": "2023-11-28T13:41:25Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "I made it slightly more robust. I take the max of all the domain separation tags in Prio3, and start incrementing from the maximum value. If the Prio3 domain separation tags are unique, and the max domain separation tag is at most `0xFFFF - 3` (to make sure the tags are representable with uint16), then we should get unique values in PINE.\r\n\r\nLet me know if you still prefer to re-define all the values.",
              "createdAt": "2023-11-28T09:45:47Z",
              "updatedAt": "2023-11-28T13:38:34Z"
            },
            {
              "originalPosition": 188,
              "body": "I put these in a helper function, that will return the leader measurement share, and joint randomness parts.",
              "createdAt": "2023-11-28T13:23:44Z",
              "updatedAt": "2023-11-28T13:38:34Z"
            },
            {
              "originalPosition": 301,
              "body": "But we need this function when computing both wraparound joint randomness and verification joint randomness, which need different lengths of helper measurement share.",
              "createdAt": "2023-11-28T13:24:50Z",
              "updatedAt": "2023-11-28T13:38:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5ogA1W",
          "commit": {
            "abbreviatedOid": "1639c22"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-28T15:36:05Z",
          "updatedAt": "2023-11-28T15:36:05Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "This is fine, but I'd suggest also adding a test that enforces our assumption about Prio3, i.e., that all of the tags are unique and less than `0xffff - 3`. I guess these values are unlikely to change at this point, but it still feels like good programming practice.",
              "createdAt": "2023-11-28T15:36:05Z",
              "updatedAt": "2023-11-28T15:36:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5ogDym",
          "commit": {
            "abbreviatedOid": "1639c22"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-28T15:40:10Z",
          "updatedAt": "2023-11-28T15:40:11Z",
          "comments": [
            {
              "originalPosition": 301,
              "body": "As far as I can see, `helper_meas_share` is only called once, with `mes_len = len(encoded_measurement`.",
              "createdAt": "2023-11-28T15:40:11Z",
              "updatedAt": "2023-11-28T15:40:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5ohlQy",
          "commit": {
            "abbreviatedOid": "1639c22"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-28T18:36:15Z",
          "updatedAt": "2023-11-28T18:36:15Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "Now I just check all the Prio3 usages are from 1 to 7, and then add the PINE usage starting from 8.",
              "createdAt": "2023-11-28T18:36:15Z",
              "updatedAt": "2023-11-28T18:36:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5oh5t5",
          "commit": {
            "abbreviatedOid": "15dd1ac"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2023-11-28T19:21:41Z",
          "updatedAt": "2023-11-28T19:22:08Z",
          "comments": [
            {
              "originalPosition": 30,
              "body": "Better to move this to a test that is only executed if `__name__ == \"__main__\"`.",
              "createdAt": "2023-11-28T19:21:41Z",
              "updatedAt": "2023-11-28T19:22:08Z"
            },
            {
              "originalPosition": 22,
              "body": "It would be easier to read if we didn't rename these.",
              "createdAt": "2023-11-28T19:22:05Z",
              "updatedAt": "2023-11-28T19:22:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5oxFgt",
          "commit": {
            "abbreviatedOid": "15dd1ac"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-30T15:07:14Z",
          "updatedAt": "2023-11-30T15:07:41Z",
          "comments": [
            {
              "originalPosition": 30,
              "body": "Moved it under `if __name == \"__main__\":`, but I don't think this will be executed if someone just imports this file?",
              "createdAt": "2023-11-30T15:07:14Z",
              "updatedAt": "2023-11-30T15:07:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5oxaIu",
          "commit": {
            "abbreviatedOid": "15dd1ac"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-30T15:45:06Z",
          "updatedAt": "2023-11-30T15:45:06Z",
          "comments": [
            {
              "originalPosition": 30,
              "body": "That's fine. This is a unit test to validate our assumptions. We don't need to run it every time we import the code.",
              "createdAt": "2023-11-30T15:45:06Z",
              "updatedAt": "2023-11-30T15:45:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5oxaai",
          "commit": {
            "abbreviatedOid": "92f33d3"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-11-30T15:45:36Z",
          "updatedAt": "2023-11-30T20:31:11Z",
          "comments": []
        }
      ]
    },
    {
      "number": 36,
      "id": "PR_kwDOJWdxls5bQ5mh",
      "title": "PineValid: Group operational parameters together",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/36",
      "state": "MERGED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-09-26T18:56:16Z",
      "updatedAt": "2023-09-26T20:28:27Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "082b456f4991a557cac8eaa854b84724cb42720d",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "cjpatton/25/1",
      "headRefOid": "6206f888b15e52f4ad928d6008e94fad23dc4116",
      "closedAt": "2023-09-26T20:28:27Z",
      "mergedAt": "2023-09-26T20:28:27Z",
      "mergedBy": "cjpatton",
      "mergeCommit": {
        "oid": "f2ca398ae56e6de77c3f7b99b69dca266fa7952d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJWdxls5iDq_E",
          "commit": {
            "abbreviatedOid": "6206f88"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-09-26T20:18:17Z",
          "updatedAt": "2023-09-26T20:18:17Z",
          "comments": []
        }
      ]
    },
    {
      "number": 37,
      "id": "PR_kwDOJWdxls5bRjQp",
      "title": "flp_pine: Apply ParallelSum optimization",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/37",
      "state": "MERGED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #25.\r\n\r\nIt's probably easiest to review commit-by-commit, as there is some code movement.",
      "createdAt": "2023-09-26T21:09:26Z",
      "updatedAt": "2023-09-28T15:54:40Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "f2ca398ae56e6de77c3f7b99b69dca266fa7952d",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "cjpatton/25/2",
      "headRefOid": "1208a48fe5970578245002bc9fd6236f3de89c24",
      "closedAt": "2023-09-28T15:54:39Z",
      "mergedAt": "2023-09-28T15:54:39Z",
      "mergedBy": "cjpatton",
      "mergeCommit": {
        "oid": "52cb9dc24146edbd3a0532b1c6ffa77472b08b32"
      },
      "comments": [
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "> This looks really clean after using only one gadget, and padding the chunk for each chunk... Thanks!\r\n\r\nYup, you're instincts were great from the start!",
          "createdAt": "2023-09-28T15:54:06Z",
          "updatedAt": "2023-09-28T15:54:06Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJWdxls5iD_mG",
          "commit": {
            "abbreviatedOid": "25c2389"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-26T21:10:09Z",
          "updatedAt": "2023-09-26T21:12:16Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "Reviewer note: now set by constructor.",
              "createdAt": "2023-09-26T21:10:09Z",
              "updatedAt": "2023-09-26T21:12:16Z"
            },
            {
              "originalPosition": 23,
              "body": "Reviewer note: not strictly related to this change, but it seemed unnecessary to have this list of `None`s when this is implied by the base class `Valid`.",
              "createdAt": "2023-09-26T21:10:46Z",
              "updatedAt": "2023-09-26T21:12:16Z"
            },
            {
              "originalPosition": 270,
              "body": "Reviewer note: for some reason this attribute doesn't exist. (Similarly below.)",
              "createdAt": "2023-09-26T21:11:57Z",
              "updatedAt": "2023-09-26T21:12:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5iGqrJ",
          "commit": {
            "abbreviatedOid": "25c2389"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "Thanks for the PR. The implementation makes sense to me. I have some inline comments.",
          "createdAt": "2023-09-27T08:29:41Z",
          "updatedAt": "2023-09-27T10:48:00Z",
          "comments": [
            {
              "originalPosition": 144,
              "body": "good call to remove another random linear combination of the Mul checks for bit check and wraparound check ... I forgot we already did a random linear combination inside Mul checks.",
              "createdAt": "2023-09-27T08:29:41Z",
              "updatedAt": "2023-09-27T10:48:00Z"
            },
            {
              "originalPosition": 105,
              "body": "One idea for still keeping `bit_check` and `wraparound_check` in their respective helper functions is we pass the `mul_inputs` to the helpers. What do you think?\r\n\r\nI don't think the current way of moving the two checks into `eval()` is terribly hard to read, so I don't have a strong opinion.",
              "createdAt": "2023-09-27T08:31:41Z",
              "updatedAt": "2023-09-27T10:48:00Z"
            },
            {
              "originalPosition": 39,
              "body": "Rename it to `norm_check_chunk_length`? since we are using two chunk lengths here.",
              "createdAt": "2023-09-27T10:39:05Z",
              "updatedAt": "2023-09-27T10:48:00Z"
            },
            {
              "originalPosition": 39,
              "body": "Also what do you think how we can initialize this parameter in production? I think It's similar to the `ALPHA`, `NUM_WR_CHECKS` that should be not exposed to users.",
              "createdAt": "2023-09-27T10:39:16Z",
              "updatedAt": "2023-09-27T10:48:00Z"
            },
            {
              "originalPosition": 61,
              "body": "Oh I see, so in this case, you don't have to pad the chunk of ParallelSum(Mul()) for wraparound check, because you will have exactly one chunk for it. Do you know if this is optimal for communication cost, or do you just pick it arbitrarily for now?",
              "createdAt": "2023-09-27T10:40:55Z",
              "updatedAt": "2023-09-27T10:48:00Z"
            },
            {
              "originalPosition": 270,
              "body": "hmm I borrowed this code from `flp_generic`. This might be the case for all Prio3 tests if they fail?",
              "createdAt": "2023-09-27T10:47:41Z",
              "updatedAt": "2023-09-27T10:48:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5iL-Ew",
          "commit": {
            "abbreviatedOid": "0c38a0a"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-27T18:15:24Z",
          "updatedAt": "2023-09-27T18:33:43Z",
          "comments": [
            {
              "originalPosition": 270,
              "body": "Yeah it would seem so.",
              "createdAt": "2023-09-27T18:15:24Z",
              "updatedAt": "2023-09-27T18:33:43Z"
            },
            {
              "originalPosition": 39,
              "body": "* How about `gradient_chunk_length`, since it's a chunk of the gradient? (Or, is there another name we want to use instead of gradient?)\r\n* Yeah ideally we'd not expose this choise to users. Asymptotically, the best choice is $\\sqrt{d}$ ($d$=dimension), but concretely the best choice depends on how close $d$ is to a power of 2. (David Cook did some work on this, I'm not sure where it is. You could ask about this in the slack.) Because the choice is kind of \"complicated\", for Prio3SumVec and Prio3Histogram we decided to leave it to the user.",
              "createdAt": "2023-09-27T18:22:49Z",
              "updatedAt": "2023-09-27T18:33:43Z"
            },
            {
              "originalPosition": 105,
              "body": "Ah interesting idea, I think that could work. If you think that would be valuable I'd be happy to implement it.",
              "createdAt": "2023-09-27T18:25:17Z",
              "updatedAt": "2023-09-27T18:33:43Z"
            },
            {
              "originalPosition": 61,
              "body": "Actually I'm not sure that either the bit checks or the wraparound checks fit into a single chunk. The problem we're solving here is that we want to use as few chunks as possible.\r\n\r\nFor the sake of arguments, suppose call Mul() 50 times to do the bit checks and 100 times to do the wraparound checks. Let's say the chunk size (i.e., `self.mul_chunk_length`) is 30.\r\n\r\nIf we coalesce the Mul() calls (current PR) then the length of `mul_inputs` is `2 * (50 + 100)`, so we have `2 * (50 + 100) / 30 == 10` chunks.\r\n\r\nIf instead we wanted to ensure that the bit checks and wraparound checks are all in different chunks, then we get `2 * 50 / 30 == 3.3` chunks for the bit checks and `2 * 100 / 30 == 6.6` chunks. Padding each partial chunk with zeros, we end up with `4 + 7 == 11` chunks.",
              "createdAt": "2023-09-27T18:33:31Z",
              "updatedAt": "2023-09-27T18:33:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5iMSZK",
          "commit": {
            "abbreviatedOid": "0c38a0a"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-27T19:11:12Z",
          "updatedAt": "2023-09-27T19:13:36Z",
          "comments": [
            {
              "originalPosition": 61,
              "body": "> If we coalesce the Mul() calls (current PR) then the length of mul_inputs is 2 * (50 + 100), so we have 2 * (50 + 100) / 30 == 10 chunks.\r\n\r\nThis is not possible right? This comes at the possibility that one chunk may contain inputs for both bit checks and wraparound checks. If you eval that chunk, you can't split the results of bit check and wraparound check. The current PR works because the number of calls to Mul in wraparound check is divisible by `mul_chunk_length`, so you don't need to pad the last chunk for bit check.",
              "createdAt": "2023-09-27T19:11:12Z",
              "updatedAt": "2023-09-27T19:13:36Z"
            },
            {
              "originalPosition": 105,
              "body": "I think it'd be useful for readers to have `bit_check`, `wraparound_check` and `norm_check` as helpers. We can make `bit_check` and `wraparound_check` to add its inputs to `mul_inputs`.",
              "createdAt": "2023-09-27T19:12:48Z",
              "updatedAt": "2023-09-27T19:13:36Z"
            },
            {
              "originalPosition": 270,
              "body": "ah I realized: `flp.Valid` is a concrete instantiation. `__name__` is a class attribute, so `flp.Valid.__class__.__name__` should work.",
              "createdAt": "2023-09-27T19:13:29Z",
              "updatedAt": "2023-09-27T19:13:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5iMTfc",
          "commit": {
            "abbreviatedOid": "25c2389"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-27T19:14:25Z",
          "updatedAt": "2023-09-27T19:14:25Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "`gradient_chunk_length` sounds good. We can also leave that as an argument, but I think we should eventually initialize it internally in the constructor.",
              "createdAt": "2023-09-27T19:14:25Z",
              "updatedAt": "2023-09-27T19:14:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5iMYo3",
          "commit": {
            "abbreviatedOid": "25c2389"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-27T19:28:15Z",
          "updatedAt": "2023-09-27T19:28:16Z",
          "comments": [
            {
              "originalPosition": 270,
              "body": "FYI a PR to fix it for poc in standard draft: https://github.com/cfrg/draft-irtf-cfrg-vdaf/pull/296. Not a big deal, but in case the test fails, it will display the correct exception message.",
              "createdAt": "2023-09-27T19:28:15Z",
              "updatedAt": "2023-09-27T19:28:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5iM6KQ",
          "commit": {
            "abbreviatedOid": "25c2389"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-27T20:58:33Z",
          "updatedAt": "2023-09-27T20:58:33Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "Changed. How would you suggest we set it internally?",
              "createdAt": "2023-09-27T20:58:33Z",
              "updatedAt": "2023-09-27T20:58:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5iNIgG",
          "commit": {
            "abbreviatedOid": "817cb31"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-27T21:43:19Z",
          "updatedAt": "2023-09-27T21:43:19Z",
          "comments": [
            {
              "originalPosition": 61,
              "body": "Add TODO to maybe re-think this later.",
              "createdAt": "2023-09-27T21:43:19Z",
              "updatedAt": "2023-09-27T21:43:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5iNL9U",
          "commit": {
            "abbreviatedOid": "817cb31"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-27T21:56:41Z",
          "updatedAt": "2023-09-27T21:56:42Z",
          "comments": [
            {
              "originalPosition": 172,
              "body": "Use the `Mul()` gadget ",
              "createdAt": "2023-09-27T21:56:42Z",
              "updatedAt": "2023-09-27T21:56:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5iNbbe",
          "commit": {
            "abbreviatedOid": "25c2389"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-27T23:16:21Z",
          "updatedAt": "2023-09-27T23:16:21Z",
          "comments": [
            {
              "originalPosition": 105,
              "body": "Done.",
              "createdAt": "2023-09-27T23:16:21Z",
              "updatedAt": "2023-09-27T23:16:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5iR6Vx",
          "commit": {
            "abbreviatedOid": "1208a48"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "This looks really clean after using only one gadget, and padding the chunk for each chunk... Thanks!",
          "createdAt": "2023-09-28T13:21:48Z",
          "updatedAt": "2023-09-28T13:21:48Z",
          "comments": []
        }
      ]
    },
    {
      "number": 38,
      "id": "PR_kwDOJWdxls5do_Ta",
      "title": "Implement VDAF preparation, and enable tests",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/38",
      "state": "MERGED",
      "author": "junyechen1996",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "Reviewer's note: stacked PR on #35 ",
      "createdAt": "2023-10-24T13:23:30Z",
      "updatedAt": "2023-12-19T09:49:22Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "0c85319ddf7413034d39e13107b7e4f58d122dfc",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "junyec/vdaf-prep",
      "headRefOid": "b9eddf27fcf51e1e6fb91369c6396b790c1cbd69",
      "closedAt": "2023-12-19T09:49:18Z",
      "mergedAt": "2023-12-19T09:49:18Z",
      "mergedBy": "junyechen1996",
      "mergeCommit": {
        "oid": "9af1f1f21b58b58dc3c4b06b8a827a8f5ec76ed0"
      },
      "comments": [
        {
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "body": "> One high level thing: Is there anything we can do to reduce the runtime of the tests?\r\n\r\nTurns out I forgot to increase the chunk length in `vdaf_pine.py`. The unit test time should reduce significantly now, ~5s. It's still not super ideal, but I will try to reduce the time further when I have time to add more tests, for both happy and sad cases.",
          "createdAt": "2023-12-17T18:10:23Z",
          "updatedAt": "2023-12-17T18:10:23Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJWdxls5pGUF6",
          "commit": {
            "abbreviatedOid": "ffbaac8"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Already looks great :)\r\n\r\nOne high level thing: Is there anything we can do to reduce the runtime of the tests?\r\n```\r\n[junyec/vdaf-prep][~/github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/poc]$ time sage -python vdaf_pine.py\r\nsage -python vdaf_pine.py  33.91s user 0.45s system 98% cpu 35.043 total\r\n```",
          "createdAt": "2023-12-04T19:42:27Z",
          "updatedAt": "2023-12-04T19:51:14Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Let's try to be consistent about syntax for tuple unpacking. This suggestion is consistent with the next line, I'm not sure about elsewhere.\r\n\r\n```suggestion\r\n        (k_wr_joint_rand_parts, k_vf_joint_rand_parts) = public_share\r\n```",
              "createdAt": "2023-12-04T19:42:27Z",
              "updatedAt": "2023-12-04T19:51:14Z"
            },
            {
              "originalPosition": 20,
              "body": "```suggestion\r\n            meas_share[:Pine.encoded_meas_len()],\r\n```",
              "createdAt": "2023-12-04T19:45:10Z",
              "updatedAt": "2023-12-04T19:51:14Z"
            },
            {
              "originalPosition": 17,
              "body": "Can we think of a better term than \"partially encoded measurement\"?",
              "createdAt": "2023-12-04T19:45:37Z",
              "updatedAt": "2023-12-04T19:51:14Z"
            },
            {
              "originalPosition": 35,
              "body": "I bet we can de-duplicate the code for the wr and vf joint rand.",
              "createdAt": "2023-12-04T19:47:44Z",
              "updatedAt": "2023-12-04T19:51:14Z"
            },
            {
              "originalPosition": 69,
              "body": "nit/suggestion: Consistent style within the same expression\r\n```suggestion\r\n            (\r\n                 out_share,\r\n                 k_corrected_wr_joint_rand_seed,\r\n                 k_corrected_vf_joint_rand_seed\r\n            ),\r\n```",
              "createdAt": "2023-12-04T19:48:57Z",
              "updatedAt": "2023-12-04T19:51:14Z"
            },
            {
              "originalPosition": 99,
              "body": "prep_init happens first, then prep_shares_to_prep second, then prep_next third. I'd suggest defining the functions in this order, too.",
              "createdAt": "2023-12-04T19:49:57Z",
              "updatedAt": "2023-12-04T19:51:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5qbDdE",
          "commit": {
            "abbreviatedOid": "f36126b"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "@cjpatton  I've addressed all the comments. These threads probably just need another eye from you, but no major issues I see so far.\r\n\r\n- Define a new property in `PineValid` to output the length of the result of  `encode()`: https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/38/commits/ffbaac87095b93bded4a53a5d5040679a8075058#r1414410916\r\n- Dedup code to compute joint randomness part and seed in `prep_init()`: https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/38/commits/ffbaac87095b93bded4a53a5d5040679a8075058#r1414413040",
          "createdAt": "2023-12-17T17:14:10Z",
          "updatedAt": "2023-12-17T18:08:32Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "How about \"encoded measurement without wraparound check results\"? and for variables, I'll define `encoded_meas_no_wr`.",
              "createdAt": "2023-12-17T17:14:10Z",
              "updatedAt": "2023-12-17T18:08:33Z"
            },
            {
              "originalPosition": 20,
              "body": "I'll move this property definition to the `PineValid`, calling it `encoded_meas_len_no_wr`?",
              "createdAt": "2023-12-17T17:14:49Z",
              "updatedAt": "2023-12-17T18:08:33Z"
            },
            {
              "originalPosition": 35,
              "body": "Done. I defined a subroutine to compute joint randomness part and seed for `prep_init`.",
              "createdAt": "2023-12-17T18:04:36Z",
              "updatedAt": "2023-12-17T18:08:33Z"
            },
            {
              "originalPosition": 6,
              "body": "I made a pass to clean this up for both `flp_pine.py` and `vdaf_pine.py`.",
              "createdAt": "2023-12-17T18:06:05Z",
              "updatedAt": "2023-12-17T18:08:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5qkCfW",
          "commit": {
            "abbreviatedOid": "ffbaac8"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-18T22:49:10Z",
          "updatedAt": "2023-12-18T22:49:10Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "I would write \"without\" instead of \"no\" but otherwise this seems fine.",
              "createdAt": "2023-12-18T22:49:10Z",
              "updatedAt": "2023-12-18T22:49:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5qkCo5",
          "commit": {
            "abbreviatedOid": "f36126b"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-12-18T22:49:24Z",
          "updatedAt": "2023-12-18T22:49:24Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJWdxls5qmjEw",
          "commit": {
            "abbreviatedOid": "ffbaac8"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-19T09:49:08Z",
          "updatedAt": "2023-12-19T09:49:08Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "Changing it to `encoded_gradient` per discussion [here](https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/40#discussion_r1430752049).",
              "createdAt": "2023-12-19T09:49:08Z",
              "updatedAt": "2023-12-19T09:49:09Z"
            }
          ]
        }
      ]
    },
    {
      "number": 40,
      "id": "PR_kwDOJWdxls5iPozD",
      "title": "Refactor to prepare for multiproof implementation",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/40",
      "state": "MERGED",
      "author": "junyechen1996",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "Compute dot products before Flp.eval(), so we don't have to persist all wraparound joint randomness in memory, and don't have to repeatedly sample them in each invocation of Flp.eval(), because the dot products don't change within in each proof.\r\n\r\nReviewer's note: stacked PR on #38 .",
      "createdAt": "2023-12-18T10:29:35Z",
      "updatedAt": "2023-12-21T16:05:24Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "9af1f1f21b58b58dc3c4b06b8a827a8f5ec76ed0",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "junyec/multiproof-refactor",
      "headRefOid": "67ff536b65a9571565ccc3991ddde0532157dc02",
      "closedAt": "2023-12-21T16:05:19Z",
      "mergedAt": "2023-12-21T16:05:19Z",
      "mergedBy": "junyechen1996",
      "mergeCommit": {
        "oid": "460ac6fc33afa5e83fc0822d135ef2d505b19156"
      },
      "comments": [
        {
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "body": "> A couple minor suggestions but this looks good to me. Great work!\r\n\r\n@cjpatton Thanks for the feedback! Those are really helpful.",
          "createdAt": "2023-12-21T16:05:15Z",
          "updatedAt": "2023-12-21T16:05:15Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJWdxls5qkKRu",
          "commit": {
            "abbreviatedOid": "0f0807e"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Nice improvement \ud83d\udc4d \r\n\r\nI think I've spotted a bug: the bit check no longer covers the entire range of the encoded measurement that needs to be bit-checked. Please double check and let me know if I've missed something.\r\n\r\nStepping back a little, I think it would be really useful to put a diagram some where (in the docucomment for eval()?) of how the encoding works and make sure all of the variables in all of the vunctions are consistent. Something like this (using `||` to denote concatenation, also correct me if I'm wrong about anything, this isn't totally fresh in my mind):\r\n\r\n```\r\nencoded_measurement =\r\n    encoded_gradient ||  # self.dimension\r\n    bit_checked = (\r\n        norm_bits ||     # self.num_bits_for_norm\r\n        wr_test_bits ||  # self.num_bits_for_wr_res * self.NUM_WR_CHECKS\r\n        wr_test_results  # self.NUM_WR_CHECKS\r\n    ) ||\r\n    wr_dot_prods         # self.NUM_WR_CHECKS\r\n)   \r\n```\r\n\r\nAlso, it would be useful to make sure we use variable names consistenly.",
          "createdAt": "2023-12-18T23:27:28Z",
          "updatedAt": "2023-12-19T00:06:42Z",
          "comments": [
            {
              "originalPosition": 110,
              "body": "Prefer native types: https://github.com/cfrg/draft-irtf-cfrg-vdaf/issues/222\r\nHere and below.\r\n\r\n```suggestion\r\n                 wr_dot_prods: list[Field],\r\n```",
              "createdAt": "2023-12-18T23:27:28Z",
              "updatedAt": "2023-12-19T00:06:42Z"
            },
            {
              "originalPosition": 240,
              "body": "Maybe worth commenting here that the Aggregators re-compute the dot products on their side.",
              "createdAt": "2023-12-18T23:29:27Z",
              "updatedAt": "2023-12-19T00:06:42Z"
            },
            {
              "originalPosition": 429,
              "body": "Kind of related to our discussion here: https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/38#discussion_r1429215489\r\n\r\n\"encoded_meas_no_wr\" is kind of confusing and verbose. What about just calling it the encoded gradient? (We could change `x` to `encoded_gradient` to match elsewhere.)\r\n\r\n```python3\r\n    encoded_gradient = flp.encode(gradient)\r\n    (wr_dot_prods, wr_res) = pine_valid.run_wr_checks(encoded_meas_no_wr, xof)\r\n    flp_meas = encoded_greadient + wr_res + wr_dot_prods\r\n    test_flp_generic(flp, [(flp_meas, True)])\r\n```",
              "createdAt": "2023-12-18T23:36:46Z",
              "updatedAt": "2023-12-19T00:06:42Z"
            },
            {
              "originalPosition": 243,
              "body": "```suggestion\r\n        # First compute the dot product between`x` and each wraparound joint\r\n        # randomness field elements sampled from `wr_joint_rand_xof`.\r\n```",
              "createdAt": "2023-12-18T23:39:12Z",
              "updatedAt": "2023-12-19T00:06:42Z"
            },
            {
              "originalPosition": 177,
              "body": "I would just say that the circuit input encodes the dot products. I don't think it'll be relevant to the reader why we did it this way. In retrospect, this is just a better design :)",
              "createdAt": "2023-12-18T23:44:14Z",
              "updatedAt": "2023-12-19T00:06:42Z"
            },
            {
              "originalPosition": 132,
              "body": "For consistency\r\n\r\n```suggestion\r\n            (wr_res_bits, wr_bits) = front(self.num_bits_for_wr_res, wr_bits)\r\n```",
              "createdAt": "2023-12-18T23:47:23Z",
              "updatedAt": "2023-12-19T00:06:42Z"
            },
            {
              "originalPosition": 72,
              "body": "I'm not sure this range is computed correctly. IIRC the bit-checked portion of the encoded measurement should include:\r\n1. L2 norm range check\r\n2. wraparound test range checks\r\n3. wraparound test result",
              "createdAt": "2023-12-18T23:56:32Z",
              "updatedAt": "2023-12-19T00:06:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5qkSK1",
          "commit": {
            "abbreviatedOid": "0f0807e"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-19T00:08:40Z",
          "updatedAt": "2023-12-19T00:08:41Z",
          "comments": [
            {
              "originalPosition": 100,
              "body": "Again, it would be useful to be consistent about variable names.",
              "createdAt": "2023-12-19T00:08:41Z",
              "updatedAt": "2023-12-19T00:08:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5qmlx_",
          "commit": {
            "abbreviatedOid": "0f0807e"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-19T09:54:58Z",
          "updatedAt": "2023-12-19T09:54:58Z",
          "comments": [
            {
              "originalPosition": 429,
              "body": "Sounds good. `encoded_gradient` is not completely precise, since we decided to make `encode()` also encode the result of L2-norm check, but `encoded_gradient` is good enough...",
              "createdAt": "2023-12-19T09:54:58Z",
              "updatedAt": "2023-12-19T09:54:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5qmtiT",
          "commit": {
            "abbreviatedOid": "730891f"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "> I think I've spotted a bug\r\n\r\nYou are right. It should be fixed now.\r\n\r\n> Stepping back a little, I think it would be really useful to put a diagram some where\r\n\r\nThat's a good idea. I put that in `eval()` function now.\r\n\r\n> Also, it would be useful to make sure we use variable names consistenly.\r\n\r\nMakes sense. I made a pass to call the output of `encode()`: `encoded_gradient` (although it's not completely accurate, it also contains the bits of L2-norm check). The output of `run_wr_checks` are the `wr_bits` and `wr_dot_prods`, which are used throughout the validity circuit and VDAF. Note `wr_bits` contains the wraparound check result bits, and also the success bits.\r\n\r\n@cjpatton The only open thread: https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/40/files#r1430770039. I'm not sure about which variable you are referring to here...",
          "createdAt": "2023-12-19T10:12:03Z",
          "updatedAt": "2023-12-19T10:43:49Z",
          "comments": [
            {
              "originalPosition": 72,
              "body": "Yes... good catch. I meant `rest[:(len(rest) - self.NUM_WR_CHECKS)]`.",
              "createdAt": "2023-12-19T10:12:03Z",
              "updatedAt": "2023-12-19T10:43:07Z"
            },
            {
              "originalPosition": 110,
              "body": "Made a pass to fix all the `Vec` in this file.",
              "createdAt": "2023-12-19T10:12:29Z",
              "updatedAt": "2023-12-19T10:43:07Z"
            },
            {
              "originalPosition": 100,
              "body": "which variable here? Do you mean `meas_share`? I believe that is consistent in the Aggregators' side, it means \"a share of the encoded measurement\"...",
              "createdAt": "2023-12-19T10:32:10Z",
              "updatedAt": "2023-12-19T10:43:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5qpQty",
          "commit": {
            "abbreviatedOid": "0f0807e"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-19T15:57:07Z",
          "updatedAt": "2023-12-19T15:57:08Z",
          "comments": [
            {
              "originalPosition": 100,
              "body": "Here I think `meas_share` is used for everything but the dot prods, but elsewhere `meas_share` includes the dot prods.",
              "createdAt": "2023-12-19T15:57:07Z",
              "updatedAt": "2023-12-19T15:57:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5qpxxf",
          "commit": {
            "abbreviatedOid": "730891f"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-19T16:59:30Z",
          "updatedAt": "2023-12-19T16:59:56Z",
          "comments": [
            {
              "originalPosition": 100,
              "body": "At `vdaf_pine.py`, `meas_share` and also `encoded_measurement` doesn't include the dot products because that's what gets sent between Client and Aggregators. I think you mean the `meas` you see elsewhere is from `flp_pine.py`? I'm not sure what's the best way to distinguish the two... Perhaps we call the `meas` in `flp_pine.py`: `flp_meas` (that's what I did in tests), or `meas_with_dot_prods`, or call the `meas` in `vdaf_pine.py`: `vdaf_meas`, or `meas_without_dot_prods`?",
              "createdAt": "2023-12-19T16:59:30Z",
              "updatedAt": "2023-12-19T16:59:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5qqdpM",
          "commit": {
            "abbreviatedOid": "0f0807e"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-19T18:45:03Z",
          "updatedAt": "2023-12-19T18:45:03Z",
          "comments": [
            {
              "originalPosition": 100,
              "body": "I think we should think of the \"encoded measurement\" as *everything* that's passed to `eval()`, including the dot products. Is there anything that prevents us from being consistent at both the VDAF and FLP level?",
              "createdAt": "2023-12-19T18:45:03Z",
              "updatedAt": "2023-12-19T18:45:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5qrQpy",
          "commit": {
            "abbreviatedOid": "0f0807e"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-19T21:14:26Z",
          "updatedAt": "2023-12-19T21:14:26Z",
          "comments": [
            {
              "originalPosition": 100,
              "body": "The dot products aren\u2019t actually sent between Client and Aggregators. In VDAF layer, `encoded_measurement` is `encoded_gradient + wr_bits`. When we do the proof or validation with `PineValid.eval()`, it expects `encoded_gradient + wr_bits + wr_dot_prods`. Perhaps we should call `encoded_gradient + wr_bits`: `vdaf_meas`, or `meas_on_the_wire` (what is being sent from the Client)?",
              "createdAt": "2023-12-19T21:14:26Z",
              "updatedAt": "2023-12-19T21:14:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5qz2az",
          "commit": {
            "abbreviatedOid": "0f0807e"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-21T01:24:13Z",
          "updatedAt": "2023-12-21T01:24:13Z",
          "comments": [
            {
              "originalPosition": 100,
              "body": "Ah great point. Any distinguished name is fine with me. My main goal is to avoid using the same variable name for two different things.",
              "createdAt": "2023-12-21T01:24:13Z",
              "updatedAt": "2023-12-21T01:24:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5qz3fh",
          "commit": {
            "abbreviatedOid": "730891f"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "A couple minor suggestions but this looks good to me. Great work!",
          "createdAt": "2023-12-21T01:31:47Z",
          "updatedAt": "2023-12-21T01:39:06Z",
          "comments": [
            {
              "originalPosition": 86,
              "body": "Idea: We can make this self-documenting if we just unpack `meas` here.\r\n```suggestion\r\n        # Unpack meas = encoded_gradient || bit_checked || wr_dot_prods\r\n        (encoded_gradient, rest) = front(self.dimension, meas)\r\n        (bit_checked, rest) = front(self.bit_checked_len(), rest)\r\n        (wr_dot_prods, rest) = front(self.NUM_WR_CHECKS, rest)\r\n        assert len(rest) == 0\r\n \r\n        # Unpack bit_checked = norm_bits || wr_bits\r\n        (norm_bits, rest) = front(2 * self.num_bits_for_norm, bit_checked)\r\n        (wr_bits, rest) = front((self.num_bits_for_wr_res + 1) * self.NUM_WR_CHECKS, rest)\r\n        assert len(rest) == 0\r\n```",
              "createdAt": "2023-12-21T01:31:47Z",
              "updatedAt": "2023-12-21T01:39:06Z"
            },
            {
              "originalPosition": 105,
              "body": "If you take the suggestion above, then we can just pass `bit_checked` here.",
              "createdAt": "2023-12-21T01:34:21Z",
              "updatedAt": "2023-12-21T01:39:06Z"
            },
            {
              "originalPosition": 128,
              "body": "Suggestion: I think `wr_test_bits` is as bit more meaningful.\r\n```suggestion\r\n            wr_test_bits,\r\n```",
              "createdAt": "2023-12-21T01:35:40Z",
              "updatedAt": "2023-12-21T01:39:06Z"
            },
            {
              "originalPosition": 100,
              "body": "Seems fine as-is.",
              "createdAt": "2023-12-21T01:38:46Z",
              "updatedAt": "2023-12-21T01:39:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5q4v7U",
          "commit": {
            "abbreviatedOid": "730891f"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-21T16:03:28Z",
          "updatedAt": "2023-12-21T16:04:42Z",
          "comments": [
            {
              "originalPosition": 86,
              "body": "Nice. I think this is much clearer",
              "createdAt": "2023-12-21T16:03:28Z",
              "updatedAt": "2023-12-21T16:04:42Z"
            },
            {
              "originalPosition": 128,
              "body": "I'm going to call it `wr_check_bits`, since we've been using \"check\" so far. We can change it to \"test\" if you are more used to that.",
              "createdAt": "2023-12-21T16:04:03Z",
              "updatedAt": "2023-12-21T16:04:42Z"
            }
          ]
        }
      ]
    },
    {
      "number": 41,
      "id": "PR_kwDOJWdxls5iPpYF",
      "title": "Support multiproof in PINE",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/41",
      "state": "MERGED",
      "author": "junyechen1996",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "Reviewer's note: stacked PR on #40 . ",
      "createdAt": "2023-12-18T10:30:23Z",
      "updatedAt": "2023-12-21T16:34:25Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "460ac6fc33afa5e83fc0822d135ef2d505b19156",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "junyec/multiproof",
      "headRefOid": "d3ba212e166c9a14ce289c3995abf728f15c66d5",
      "closedAt": "2023-12-21T16:34:22Z",
      "mergedAt": "2023-12-21T16:34:22Z",
      "mergedBy": "junyechen1996",
      "mergeCommit": {
        "oid": "2497295dbd1267fb36a8ab68a3d869e90e6efc1c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJWdxls5qkSlN",
          "commit": {
            "abbreviatedOid": "3e3765d"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-19T00:10:48Z",
          "updatedAt": "2023-12-19T00:23:50Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "Hmmm, this is gross, I'm sorry about this. I think we instead need to overcome this limitation.\r\n\r\nThe problem is that if we use the reference code for TurboSHAKE directly, we end up with something that is very inefficient. The way forward I think is to replace the implementation of TurboSHAKE that's efficient.",
              "createdAt": "2023-12-19T00:10:48Z",
              "updatedAt": "2023-12-19T00:23:50Z"
            },
            {
              "originalPosition": 20,
              "body": "Instead of making these associated parameters, I would just make them concrete. I.e., wherever you have a reference to `Pine.Field`, just use `PineValid.Field`.\r\n\r\nSimilarly for `Xof`.",
              "createdAt": "2023-12-19T00:12:21Z",
              "updatedAt": "2023-12-19T00:23:50Z"
            },
            {
              "originalPosition": 88,
              "body": "FWIW I don't think this function is worth copy-pasting from Prio3. I don't expect it to ever be used for anything.",
              "createdAt": "2023-12-19T00:13:33Z",
              "updatedAt": "2023-12-19T00:23:50Z"
            },
            {
              "originalPosition": 79,
              "body": "We need to be flexible with the field (i.e., we need `with_field()`) but I don't think we need to be flexible with the XOF. Let's just pick one? ",
              "createdAt": "2023-12-19T00:17:45Z",
              "updatedAt": "2023-12-19T00:23:50Z"
            },
            {
              "originalPosition": 20,
              "body": "https://github.com/cfrg/draft-irtf-cfrg-vdaf/issues/321",
              "createdAt": "2023-12-19T00:23:10Z",
              "updatedAt": "2023-12-19T00:23:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5qnA3s",
          "commit": {
            "abbreviatedOid": "3e3765d"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-19T10:54:49Z",
          "updatedAt": "2023-12-19T11:21:58Z",
          "comments": [
            {
              "originalPosition": 79,
              "body": "Makes sense. Let's hardcode XOF",
              "createdAt": "2023-12-19T10:54:49Z",
              "updatedAt": "2023-12-19T11:21:58Z"
            },
            {
              "originalPosition": 88,
              "body": "But don't we want to evaluate the robustness for different field sizes as well?",
              "createdAt": "2023-12-19T10:55:07Z",
              "updatedAt": "2023-12-19T11:21:58Z"
            },
            {
              "originalPosition": 20,
              "body": "I changed `Field` to `Valid`, which by default is set to `PineValid`. We either need `Field` or `Valid`, to hold the type set by `with_field()`. `PineValid` is only a class that hardcodes `Field` to be `Field128`. The calling path looks like the following:\r\n\r\n```\r\nconcrete_pine = Pine.with_field(Field64) \\  # This will set `Pine.Field` to be `Field64`,\r\n                                            # or `Pine.Valid` to be `PineValid.with_field(Field64)`\r\n    .with_params(...)  # This will create validity circuit `PineValid.with_field(Pine.Field).with_params(...)`,\r\n                       # and then create the `Flp`\r\n```",
              "createdAt": "2023-12-19T11:15:10Z",
              "updatedAt": "2023-12-19T11:23:11Z"
            },
            {
              "originalPosition": 20,
              "body": "I could be missing something... Setting the associated type in python is a little weird to me...",
              "createdAt": "2023-12-19T11:16:32Z",
              "updatedAt": "2023-12-19T11:21:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5qpOkO",
          "commit": {
            "abbreviatedOid": "3e3765d"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-19T15:54:03Z",
          "updatedAt": "2023-12-19T15:54:03Z",
          "comments": [
            {
              "originalPosition": 88,
              "body": "Sure, but how does this function help with that?",
              "createdAt": "2023-12-19T15:54:03Z",
              "updatedAt": "2023-12-19T15:54:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5qpP1Y",
          "commit": {
            "abbreviatedOid": "3e3765d"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-19T15:56:00Z",
          "updatedAt": "2023-12-19T15:56:00Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "The point is to let `PineValid` determine the field, and to make that clear in the code. There is no need to set Pine.Field if you already have Pine.Valid.Field. Does that make more sense?",
              "createdAt": "2023-12-19T15:56:00Z",
              "updatedAt": "2023-12-19T15:56:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5qpcbu",
          "commit": {
            "abbreviatedOid": "9ed64b3"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-19T16:17:56Z",
          "updatedAt": "2023-12-19T16:17:56Z",
          "comments": [
            {
              "originalPosition": 76,
              "body": "Remvoe this and follow this pattern: https://github.com/cfrg/draft-irtf-cfrg-vdaf/blob/3d2dd77befcf149c818b4bae1744e60c00d0a4f3/poc/vdaf_prio3.py#L534",
              "createdAt": "2023-12-19T16:17:56Z",
              "updatedAt": "2023-12-19T16:17:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5qp3kh",
          "commit": {
            "abbreviatedOid": "3e3765d"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-19T17:12:01Z",
          "updatedAt": "2023-12-19T17:12:01Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "Discussed offline. Let `with_params()` take in field as well.",
              "createdAt": "2023-12-19T17:12:01Z",
              "updatedAt": "2023-12-19T17:12:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5qp3zt",
          "commit": {
            "abbreviatedOid": "3e3765d"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-19T17:12:19Z",
          "updatedAt": "2023-12-19T17:12:20Z",
          "comments": [
            {
              "originalPosition": 88,
              "body": "Discussed offline, removing this and leave a TODO to evaluate robustness.",
              "createdAt": "2023-12-19T17:12:19Z",
              "updatedAt": "2023-12-19T17:12:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5qyHE7",
          "commit": {
            "abbreviatedOid": "3e3765d"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-20T19:19:46Z",
          "updatedAt": "2023-12-20T19:19:46Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "Here you go! It should be sufficient to point to this branch, or feel free to wait to resolve this until we merge the PR:  https://github.com/cfrg/draft-irtf-cfrg-vdaf/pull/322",
              "createdAt": "2023-12-20T19:19:46Z",
              "updatedAt": "2023-12-20T19:19:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5qz4sw",
          "commit": {
            "abbreviatedOid": "3f8c203"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks correct to me. I suggest removing some of the type hints, as these tend to turn into code rot. (See inline comment.)",
          "createdAt": "2023-12-21T01:40:10Z",
          "updatedAt": "2023-12-21T01:56:48Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "This would be fine as well.\r\n```suggestion\r\n    Field = None  # Set by `with_field()`.\r\n```",
              "createdAt": "2023-12-21T01:40:10Z",
              "updatedAt": "2023-12-21T01:56:48Z"
            },
            {
              "originalPosition": 135,
              "body": "For consistency with `flp_pine.py`?\r\n```suggestion\r\n        meas = encoded_measurement + wr_dot_prods\r\n```",
              "createdAt": "2023-12-21T01:46:22Z",
              "updatedAt": "2023-12-21T01:56:48Z"
            },
            {
              "originalPosition": 204,
              "body": "nit: Consistently include parantheses when breaking tuples. Here and below.\r\n```suggestion\r\n            (proof_share, proofs_share) = front(Pine.Flp.PROOF_LEN, proofs_share)\r\n```",
              "createdAt": "2023-12-21T01:49:06Z",
              "updatedAt": "2023-12-21T01:56:48Z"
            },
            {
              "originalPosition": 268,
              "body": "Here and below.\r\n\r\nFor what it's worth, I would remove the type hints here. This was a feature that we were eager to use early on when we started working on the VDAF draft, but they have turned out to be kind of a pain. The problem is that if we don't actually enforce the type hints, they become code rot.\r\n\r\nThe main value of the type hints I think is having explicit types in APIs defined in the VDAF draft. But in this draft, we're implementing an API, not defining one.\r\n\r\n```suggestion\r\n                agg_shares: list[list[Pine.Flp.Field]],\r\n```",
              "createdAt": "2023-12-21T01:53:23Z",
              "updatedAt": "2023-12-21T01:56:48Z"
            },
            {
              "originalPosition": 283,
              "body": "It's a bit odd to use PineValid here (a global variable) and `Pine.Flp.Field` above. How about `Pine.Flp.Valid.Xof`?",
              "createdAt": "2023-12-21T01:53:43Z",
              "updatedAt": "2023-12-21T02:37:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5q4zas",
          "commit": {
            "abbreviatedOid": "d3ba212"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-21T16:11:47Z",
          "updatedAt": "2023-12-21T16:33:53Z",
          "comments": [
            {
              "originalPosition": 204,
              "body": "Missed it again... I made a pass over `flp_pine.py` and `vdaf_pine.py` again...",
              "createdAt": "2023-12-21T16:11:47Z",
              "updatedAt": "2023-12-21T16:33:53Z"
            },
            {
              "originalPosition": 283,
              "body": "That's fine too. In a real implementation, I think we might actually just use `XofTurboShake128` directly.",
              "createdAt": "2023-12-21T16:16:01Z",
              "updatedAt": "2023-12-21T16:33:53Z"
            },
            {
              "originalPosition": 268,
              "body": "Makes sense. Removed type hints in all the `Vdaf` required methods. I'm leaving them in all helper methods.\r\n\r\nRegarding `Flp.Field` -> `Pine.Flp.Field`, the type hints themselves don't have access to `Pine`. They have access to the properties in `Pine`. That's why it should be `Flp.Field` here.",
              "createdAt": "2023-12-21T16:22:43Z",
              "updatedAt": "2023-12-21T16:33:53Z"
            },
            {
              "originalPosition": 20,
              "body": "Appreciate it. I'll leave a TODO in `flp_pine.py` that points to this branch.",
              "createdAt": "2023-12-21T16:29:49Z",
              "updatedAt": "2023-12-21T16:33:53Z"
            }
          ]
        }
      ]
    },
    {
      "number": 42,
      "id": "PR_kwDOJWdxls5ilszy",
      "title": "Acknowledge Chris",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/42",
      "state": "MERGED",
      "author": "junyechen1996",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-12-21T16:39:22Z",
      "updatedAt": "2023-12-21T16:48:11Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "2497295dbd1267fb36a8ab68a3d869e90e6efc1c",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "junyec/ack-chris",
      "headRefOid": "389bcebc413fd73849521f9bb4c3064ef621feb1",
      "closedAt": "2023-12-21T16:48:08Z",
      "mergedAt": "2023-12-21T16:48:08Z",
      "mergedBy": "junyechen1996",
      "mergeCommit": {
        "oid": "4be87207a3b9233a5de9529c5f96b40c7f565dc7"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJWdxls5q5BAg",
          "commit": {
            "abbreviatedOid": "389bceb"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "FWIW, acknowledgement at the end of the draft is sufficient. Authorship is not necessary. That said, I'd be happy to help edit this.",
          "createdAt": "2023-12-21T16:45:26Z",
          "updatedAt": "2023-12-21T16:45:26Z",
          "comments": []
        }
      ]
    },
    {
      "number": 45,
      "id": "PR_kwDOJWdxls5jgbnM",
      "title": "Improve unit testing for the FLP",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/45",
      "state": "MERGED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "* Use the `unitest` module to define unit tests.\r\n* Add unit tests for encoding floats as field elements. While at it, simplify `encode_f64_into_field()`.\r\n\r\nReviewer note: I originally thought there was a bug in the encoding, so I wrote tests to confirm. It turned out to be a non-issue, but I thought it would be useful to merge the changes I made along the way.",
      "createdAt": "2024-01-08T18:45:38Z",
      "updatedAt": "2024-01-08T21:00:00Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "4be87207a3b9233a5de9529c5f96b40c7f565dc7",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "cjpatton/bug-negative-float-encoding",
      "headRefOid": "9923a479470a0800c8dd6268160df535b0b0b878",
      "closedAt": "2024-01-08T21:00:00Z",
      "mergedAt": "2024-01-08T21:00:00Z",
      "mergedBy": "cjpatton",
      "mergeCommit": {
        "oid": "e73d4d34f6c7653409cd0d285742fc456a81bdf4"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJWdxls5r4Qqo",
          "commit": {
            "abbreviatedOid": "9923a47"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-01-08T19:47:37Z",
          "updatedAt": "2024-01-08T19:47:55Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "oh... does the constructor do the offsetting?",
              "createdAt": "2024-01-08T19:47:37Z",
              "updatedAt": "2024-01-08T19:47:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5r4YDi",
          "commit": {
            "abbreviatedOid": "9923a47"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-08T20:09:58Z",
          "updatedAt": "2024-01-08T20:09:58Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "This is just a result of modular arithmetic. Sage does the right thing here:\r\n```\r\n$ sage\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 SageMath version 9.8, Release Date: 2023-02-11                     \u2502\r\n\u2502 Using Python 3.11.1. Type \"help()\" for help.                       \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\nsage: f = GF(2^32 * 4294967295 + 1)\r\nsage: f(-23)\r\n18446744069414584298\r\nsage: f(-23 + f.order())\r\n18446744069414584298\r\n```",
              "createdAt": "2024-01-08T20:09:58Z",
              "updatedAt": "2024-01-08T20:09:59Z"
            }
          ]
        }
      ]
    },
    {
      "number": 47,
      "id": "PR_kwDOJWdxls5jhSw4",
      "title": "Code clean up",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/47",
      "state": "MERGED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "See commit messages for details. It's best to review commit by commit.",
      "createdAt": "2024-01-08T21:49:02Z",
      "updatedAt": "2024-01-09T15:57:00Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "e73d4d34f6c7653409cd0d285742fc456a81bdf4",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "cjpatton/2",
      "headRefOid": "bcbfad585ee7c5c578ee44372ec7466709f05175",
      "closedAt": "2024-01-09T15:57:00Z",
      "mergedAt": "2024-01-09T15:57:00Z",
      "mergedBy": "cjpatton",
      "mergeCommit": {
        "oid": "04d300626817537417de28549e5768a6f5315c21"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJWdxls5r6XAv",
          "commit": {
            "abbreviatedOid": "bcbfad5"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "Thanks!",
          "createdAt": "2024-01-09T06:09:57Z",
          "updatedAt": "2024-01-09T06:09:57Z",
          "comments": []
        }
      ]
    },
    {
      "number": 48,
      "id": "PR_kwDOJWdxls5jpRqE",
      "title": "Use Turboshake128 as XOF",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/48",
      "state": "MERGED",
      "author": "junyechen1996",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-01-10T05:36:50Z",
      "updatedAt": "2024-01-10T19:33:40Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "04d300626817537417de28549e5768a6f5315c21",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "junyec/use-turboshake",
      "headRefOid": "b8a955c51913a75dbb2e78c4757b9b6473c4920d",
      "closedAt": "2024-01-10T19:33:37Z",
      "mergedAt": "2024-01-10T19:33:37Z",
      "mergedBy": "junyechen1996",
      "mergeCommit": {
        "oid": "5234c9d03f962db55a540dd3b72fb9d563d62189"
      },
      "comments": [
        {
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "body": "> Let's also remove this from the test code (see flp_pine_test.py)\r\n\r\noops. I missed this. Changed the one in `flp_pine_test.py` to use `PineValid.Xof`.",
          "createdAt": "2024-01-10T19:21:23Z",
          "updatedAt": "2024-01-10T19:21:23Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJWdxls5sGyIH",
          "commit": {
            "abbreviatedOid": "5641eac"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Let's also remove this from the test code (see flp_pine_test.py)",
          "createdAt": "2024-01-10T17:12:52Z",
          "updatedAt": "2024-01-10T17:12:52Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJWdxls5sHz_9",
          "commit": {
            "abbreviatedOid": "b8a955c"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-01-10T19:28:18Z",
          "updatedAt": "2024-01-10T19:31:00Z",
          "comments": []
        }
      ]
    },
    {
      "number": 49,
      "id": "PR_kwDOJWdxls5jpbnL",
      "title": "Override domain_separation_tag",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/49",
      "state": "MERGED",
      "author": "junyechen1996",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "Addresses issue #44 .\r\n\r\nWe don't want to use the base VDAF draft version in domain separation tag, since PINE won't always evolve with base draft changes, which will be relatively stable from now on. Instead PINE draft may change often earlier, so we will at least include the PINE draft version in domain separation tag.",
      "createdAt": "2024-01-10T06:17:04Z",
      "updatedAt": "2024-01-10T21:56:26Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "5234c9d03f962db55a540dd3b72fb9d563d62189",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "junyec/domain-separation-tag",
      "headRefOid": "152b05843e5e63fbed8114f577fad5da0b8bca56",
      "closedAt": "2024-01-10T21:56:23Z",
      "mergedAt": "2024-01-10T21:56:23Z",
      "mergedBy": "junyechen1996",
      "mergeCommit": {
        "oid": "9d68a5ee80e3376a258ca310e426c0b5de69a55a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJWdxls5sCFSN",
          "commit": {
            "abbreviatedOid": "93d42a0"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-10T06:18:23Z",
          "updatedAt": "2024-01-10T06:18:36Z",
          "comments": [
            {
              "originalPosition": 43,
              "body": "The base draft also includes an \"algorithm class\" string, which I'm entirely clear what it is. Seems like for Prio3, the base draft uses a class 0, and for Poplar, it uses a class 1. I don't think there is too much value including it in the domain separation tag here, since PINE draft version + PINE ID is enough to make sure this is a PINE VDAF. Thoughts @cjpatton ?",
              "createdAt": "2024-01-10T06:18:23Z",
              "updatedAt": "2024-01-10T06:18:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5sIMtz",
          "commit": {
            "abbreviatedOid": "152b058"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-01-10T20:13:57Z",
          "updatedAt": "2024-01-10T21:52:41Z",
          "comments": [
            {
              "originalPosition": 43,
              "body": "The intent there was to provide domain separation for different \"types\" of objects. For example, IDPF and Poplar1 both use an XOF, but have different algorithm classes.\r\n\r\nI agree, this isn't going to come up in PINE.",
              "createdAt": "2024-01-10T20:13:57Z",
              "updatedAt": "2024-01-10T20:14:29Z"
            }
          ]
        }
      ]
    },
    {
      "number": 51,
      "id": "PR_kwDOJWdxls5juiHi",
      "title": "Don't overload `Flp.encode()`",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/51",
      "state": "MERGED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #43.\r\n\r\nThe output of this method is meant to be the input the `prove()` or `query()` algorithm, but in PIne, we have more encoding steps to do before we have the complete input.",
      "createdAt": "2024-01-10T20:37:34Z",
      "updatedAt": "2024-01-10T23:00:12Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "5234c9d03f962db55a540dd3b72fb9d563d62189",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "cjpatton/43",
      "headRefOid": "80a56e5fdfc989df97ea6e6a5792e8e1ffad5a1d",
      "closedAt": "2024-01-10T23:00:12Z",
      "mergedAt": "2024-01-10T23:00:12Z",
      "mergedBy": "cjpatton",
      "mergeCommit": {
        "oid": "e0ab8b5b66d343119131337d1e9c3154bbde3cac"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJWdxls5sI1Sc",
          "commit": {
            "abbreviatedOid": "80a56e5"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-01-10T21:50:11Z",
          "updatedAt": "2024-01-10T21:50:52Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Should we still have the `encode` method that throws an error, because this is defined by `Flp`?",
              "createdAt": "2024-01-10T21:50:11Z",
              "updatedAt": "2024-01-10T21:50:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5sJMmJ",
          "commit": {
            "abbreviatedOid": "80a56e5"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-10T23:00:03Z",
          "updatedAt": "2024-01-10T23:00:03Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "It already does (see flp.rs in the base repo)",
              "createdAt": "2024-01-10T23:00:03Z",
              "updatedAt": "2024-01-10T23:00:03Z"
            }
          ]
        }
      ]
    },
    {
      "number": 52,
      "id": "PR_kwDOJWdxls5jvOz3",
      "title": "More clean up",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/52",
      "state": "MERGED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #50.",
      "createdAt": "2024-01-10T22:59:12Z",
      "updatedAt": "2024-01-12T20:23:52Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "e0ab8b5b66d343119131337d1e9c3154bbde3cac",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "cjpatton/50",
      "headRefOid": "80ff22e94ac1e0a05f8369cd7db9432fddda7022",
      "closedAt": "2024-01-12T20:23:52Z",
      "mergedAt": "2024-01-12T20:23:52Z",
      "mergedBy": "cjpatton",
      "mergeCommit": {
        "oid": "4ef945a5a9a406959cbab8ea31b5728c82ca2b93"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJWdxls5sJM-0",
          "commit": {
            "abbreviatedOid": "7667001"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-10T23:01:42Z",
          "updatedAt": "2024-01-10T23:01:42Z",
          "comments": [
            {
              "originalPosition": 490,
              "body": "This is the only (intended!) breaking change.",
              "createdAt": "2024-01-10T23:01:42Z",
              "updatedAt": "2024-01-10T23:01:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5sKdtE",
          "commit": {
            "abbreviatedOid": "7667001"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-01-11T05:22:05Z",
          "updatedAt": "2024-01-12T20:11:25Z",
          "comments": [
            {
              "originalPosition": 145,
              "body": "```suggestion\r\n        where `B[i]` is the `(i+1)`-th bit. The value of `B[i](B[i]-1)` is 0 if\r\n```\r\n\r\n?\r\n\r\nOr the `i`-th bit? I'm ok with counting from zero.",
              "createdAt": "2024-01-12T19:54:39Z",
              "updatedAt": "2024-01-12T20:11:25Z"
            },
            {
              "originalPosition": 33,
              "body": "```suggestion\r\n        tests devised by [ROCT23]. A successful wraparound test indicates,\r\n```\r\n\r\nsince we are taking the abbreviation by authors' last names. Also make a pass in this file as well.",
              "createdAt": "2024-01-12T19:56:29Z",
              "updatedAt": "2024-01-12T20:11:25Z"
            },
            {
              "originalPosition": 490,
              "body": "I see, so the client just sends whatever the `wr_check_v` is?",
              "createdAt": "2024-01-12T20:08:45Z",
              "updatedAt": "2024-01-12T20:11:25Z"
            },
            {
              "originalPosition": 5,
              "body": "Thoughts on `num_wr_check_v_bits`?",
              "createdAt": "2024-01-12T20:10:05Z",
              "updatedAt": "2024-01-12T20:11:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5sa3oJ",
          "commit": {
            "abbreviatedOid": "7667001"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-12T20:17:23Z",
          "updatedAt": "2024-01-12T20:17:23Z",
          "comments": [
            {
              "originalPosition": 145,
              "body": "ahh hmmm let's just count from 0! (changed to `i`).",
              "createdAt": "2024-01-12T20:17:23Z",
              "updatedAt": "2024-01-12T20:17:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5sa3zC",
          "commit": {
            "abbreviatedOid": "7667001"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-12T20:17:57Z",
          "updatedAt": "2024-01-12T20:17:57Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "duh, thanks!",
              "createdAt": "2024-01-12T20:17:57Z",
              "updatedAt": "2024-01-12T20:17:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5sa35A",
          "commit": {
            "abbreviatedOid": "7667001"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-12T20:18:17Z",
          "updatedAt": "2024-01-12T20:18:17Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Too wordy.",
              "createdAt": "2024-01-12T20:18:17Z",
              "updatedAt": "2024-01-12T20:18:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5sa5Or",
          "commit": {
            "abbreviatedOid": "7667001"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-12T20:23:09Z",
          "updatedAt": "2024-01-12T20:23:09Z",
          "comments": [
            {
              "originalPosition": 490,
              "body": "Yup! This should be sufficient from a security perspective and has the advantage that the prover and verifier compute the same value.",
              "createdAt": "2024-01-12T20:23:09Z",
              "updatedAt": "2024-01-12T20:23:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5sa5Zf",
          "commit": {
            "abbreviatedOid": "80ff22e"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-01-12T20:23:39Z",
          "updatedAt": "2024-01-12T20:23:39Z",
          "comments": []
        }
      ]
    },
    {
      "number": 55,
      "id": "PR_kwDOJWdxls5kuVv1",
      "title": "Generate test vectors",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/55",
      "state": "MERGED",
      "author": "junyechen1996",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "Add missing methods for generating test vectors in both flp_pine and vdaf_pine, and add instructions for generating test vectors in README file:\r\nTEST_VECTOR=TRUE TEST_VECTOR_PATH=test_vec/00 sage -python generate_test_vector.py",
      "createdAt": "2024-01-22T13:47:42Z",
      "updatedAt": "2024-01-23T20:08:21Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "4ef945a5a9a406959cbab8ea31b5728c82ca2b93",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "junyec/test-vector",
      "headRefOid": "6386bc03461cf0d6a773dcb1b4614a11f5035aa1",
      "closedAt": "2024-01-23T20:08:18Z",
      "mergedAt": "2024-01-23T20:08:18Z",
      "mergedBy": "junyechen1996",
      "mergeCommit": {
        "oid": "fbf3d9a8e0d04b38c660cf50a5cb0af33ff7ed6c"
      },
      "comments": [
        {
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "body": "@cjpatton I addressed all the comments except [this thread](https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/55#discussion_r1461968769) needs another look from you. I'm not sure if you like the \"improved\" approach that can set `TEST_VECTOR_PATH` for users.",
          "createdAt": "2024-01-22T22:21:03Z",
          "updatedAt": "2024-01-22T22:21:30Z"
        },
        {
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "body": "Squashed.",
          "createdAt": "2024-01-23T20:02:56Z",
          "updatedAt": "2024-01-23T20:02:56Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJWdxls5teENF",
          "commit": {
            "abbreviatedOid": "9827692"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-22T14:27:00Z",
          "updatedAt": "2024-01-22T14:27:10Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Included these internal operational parameters as well, so we can test with smaller test vectors after we resolve #54 . ",
              "createdAt": "2024-01-22T14:27:00Z",
              "updatedAt": "2024-01-22T14:27:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5tePa8",
          "commit": {
            "abbreviatedOid": "9827692"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Excellent!",
          "createdAt": "2024-01-22T14:46:32Z",
          "updatedAt": "2024-01-22T14:50:47Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "Suggestion: Users are likely to just copy-paste this without inspecting it. I'd suggest having a default `TEST_VECTOR_PATH` and not overwrite the default here such that copy-pasting this always writes top the correct directory.",
              "createdAt": "2024-01-22T14:46:32Z",
              "updatedAt": "2024-01-22T14:50:47Z"
            },
            {
              "originalPosition": 15,
              "body": "My guess is `num_proofs == 2` isn't going to be a safe choice. I'd suggest `3` for tests.\\",
              "createdAt": "2024-01-22T14:47:32Z",
              "updatedAt": "2024-01-22T14:50:47Z"
            },
            {
              "originalPosition": 1,
              "body": "`PineField128` and `PineField64` would be more descriptive names.",
              "createdAt": "2024-01-22T14:48:42Z",
              "updatedAt": "2024-01-22T14:50:47Z"
            },
            {
              "originalPosition": 1,
              "body": "nit: `generate_test_vectors.py`? (add an `s`?)",
              "createdAt": "2024-01-22T14:49:56Z",
              "updatedAt": "2024-01-22T14:50:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5thCmb",
          "commit": {
            "abbreviatedOid": "9827692"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-22T21:08:40Z",
          "updatedAt": "2024-01-22T21:08:41Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "I'm pick a larger dimension, say at least 20",
              "createdAt": "2024-01-22T21:08:40Z",
              "updatedAt": "2024-01-22T21:08:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5thOwi",
          "commit": {
            "abbreviatedOid": "9827692"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-22T21:42:41Z",
          "updatedAt": "2024-01-22T21:42:41Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "We also need \"chunk_length\".",
              "createdAt": "2024-01-22T21:42:41Z",
              "updatedAt": "2024-01-22T21:42:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5thSLx",
          "commit": {
            "abbreviatedOid": "4430176"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-22T21:53:14Z",
          "updatedAt": "2024-01-22T22:13:37Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "So I've made some improvements:\r\n\r\n- I got rid of `generate_test_vector.py`, instead rely on `vdaf_pine_test.py` along with `TEST_VECTOR` environmental variable to generate test vectors, same as base VDAF spec.\r\n- Since I need to set the default `TEST_VECTOR_PATH` properly before the base VDAF spec checks the environmental variable, I put the command to generate test vectors in a shell script `generate_test_vectors.sh`, which reads the PINE version from a file called `VERSION`, and exposes the environmental variable `TEST_VECTOR_PATH`. Similarly the domain separation tag derivation will read this `VERSION` file for consistency throughout the repo.",
              "createdAt": "2024-01-22T21:53:14Z",
              "updatedAt": "2024-01-22T22:17:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5tiZ9f",
          "commit": {
            "abbreviatedOid": "4430176"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-23T02:02:08Z",
          "updatedAt": "2024-01-23T02:02:08Z",
          "comments": [
            {
              "originalPosition": 1,
              "body": "Uh ohhh I didn't know we were FAAANCY",
              "createdAt": "2024-01-23T02:02:08Z",
              "updatedAt": "2024-01-23T02:02:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5tia-q",
          "commit": {
            "abbreviatedOid": "4430176"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-01-23T02:07:46Z",
          "updatedAt": "2024-01-23T02:07:50Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "Suggestion: I think it would be nice to create subclasses of Pine with concrete choices for the filed and number of proofs. What do you think of `Pine128` for Pine with Field128 `Pine64` for Pine with Field64?\r\n\r\n",
              "createdAt": "2024-01-23T02:07:47Z",
              "updatedAt": "2024-01-23T02:07:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5tn8ZK",
          "commit": {
            "abbreviatedOid": "4430176"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-23T15:59:02Z",
          "updatedAt": "2024-01-23T15:59:03Z",
          "comments": [
            {
              "originalPosition": 95,
              "body": "```suggestion\r\n    def test_field64_three_proofs(self):\r\n```",
              "createdAt": "2024-01-23T15:59:02Z",
              "updatedAt": "2024-01-23T15:59:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5toABW",
          "commit": {
            "abbreviatedOid": "4430176"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-23T16:04:58Z",
          "updatedAt": "2024-01-23T16:04:59Z",
          "comments": [
            {
              "originalPosition": 1,
              "body": "Check out main",
              "createdAt": "2024-01-23T16:04:58Z",
              "updatedAt": "2024-01-23T16:04:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5tp2-f",
          "commit": {
            "abbreviatedOid": "3fa6f6f"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "@cjpatton I addressed all the comments.",
          "createdAt": "2024-01-23T18:55:53Z",
          "updatedAt": "2024-01-23T18:57:37Z",
          "comments": [
            {
              "originalPosition": 1,
              "body": "I just checked again, the commit hash matches.",
              "createdAt": "2024-01-23T18:55:53Z",
              "updatedAt": "2024-01-23T18:57:37Z"
            },
            {
              "originalPosition": 28,
              "body": "I added them now.",
              "createdAt": "2024-01-23T18:56:09Z",
              "updatedAt": "2024-01-23T18:57:37Z"
            }
          ]
        }
      ]
    },
    {
      "number": 56,
      "id": "PR_kwDOJWdxls5mbiIo",
      "title": "Add script for finding wraparound parameters",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/56",
      "state": "MERGED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-02-08T22:28:25Z",
      "updatedAt": "2024-02-09T19:15:02Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "fbf3d9a8e0d04b38c660cf50a5cb0af33ff7ed6c",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "cjpatton/parameters",
      "headRefOid": "c63b630e767e4e4bd15543d186d60eadff730db1",
      "closedAt": "2024-02-09T19:15:02Z",
      "mergedAt": "2024-02-09T19:15:02Z",
      "mergedBy": "cjpatton",
      "mergeCommit": {
        "oid": "230da39dbeb6d7e20aa07cb461f625ed9d5971f4"
      },
      "comments": [
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "Addressed comments and squashed.",
          "createdAt": "2024-02-09T17:24:30Z",
          "updatedAt": "2024-02-09T17:24:30Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJWdxls5viysG",
          "commit": {
            "abbreviatedOid": "ebf050f"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-08T22:43:18Z",
          "updatedAt": "2024-02-08T22:43:18Z",
          "comments": [
            {
              "originalPosition": 46,
              "body": "@junyechen1996 please review this part carefully!",
              "createdAt": "2024-02-08T22:43:18Z",
              "updatedAt": "2024-02-08T22:43:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5vne2j",
          "commit": {
            "abbreviatedOid": "ebf050f"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-09T15:13:09Z",
          "updatedAt": "2024-02-09T17:12:02Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Why adding this file to .gitignore?",
              "createdAt": "2024-02-09T15:13:09Z",
              "updatedAt": "2024-02-09T17:12:02Z"
            },
            {
              "originalPosition": 43,
              "body": "```suggestion\r\n    l2_norm_bound_encoded = floor(l2_norm_bound * 2**num_frac_bits)\r\n```",
              "createdAt": "2024-02-09T15:13:39Z",
              "updatedAt": "2024-02-09T17:12:02Z"
            },
            {
              "originalPosition": 43,
              "body": "I think ^ might mean xor or some other things in python at least..",
              "createdAt": "2024-02-09T15:31:13Z",
              "updatedAt": "2024-02-09T17:12:02Z"
            },
            {
              "originalPosition": 46,
              "body": "LGTM.",
              "createdAt": "2024-02-09T17:11:53Z",
              "updatedAt": "2024-02-09T17:12:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5vocFX",
          "commit": {
            "abbreviatedOid": "ebf050f"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-09T17:20:51Z",
          "updatedAt": "2024-02-09T17:20:52Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "sage produces this file when you run `sage find_wr_params.sage` and we don't actually want to check this in.",
              "createdAt": "2024-02-09T17:20:52Z",
              "updatedAt": "2024-02-09T17:20:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5vocVY",
          "commit": {
            "abbreviatedOid": "ebf050f"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-09T17:21:33Z",
          "updatedAt": "2024-02-09T17:21:33Z",
          "comments": [
            {
              "originalPosition": 43,
              "body": "Yeah since this is a sage script this is correct, by sage also is fine with `**` so let's just do that. I'll take this and make sure we're consistent throughout this script.",
              "createdAt": "2024-02-09T17:21:33Z",
              "updatedAt": "2024-02-09T17:21:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5voiog",
          "commit": {
            "abbreviatedOid": "c63b630"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "LGTM. Let's start with this, I can rebase my PR if needed.",
          "createdAt": "2024-02-09T17:36:53Z",
          "updatedAt": "2024-02-09T17:37:09Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "oh I see.. so it's a generated python file. Interesting.",
              "createdAt": "2024-02-09T17:36:53Z",
              "updatedAt": "2024-02-09T17:37:09Z"
            }
          ]
        }
      ]
    },
    {
      "number": 57,
      "id": "PR_kwDOJWdxls5mo-6x",
      "title": "Improvements to ZK error analysis script",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/57",
      "state": "MERGED",
      "author": "junyechen1996",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "Change tau to r_succ since r_succ is the ultimate value that determines ZK error and soundness error.\r\nReuse code in PineValid to compute the number of bits needed for wraparound checks in find_wr_params.sage script.\r\nPrint parameters into a table, so it's easier to view and we may put it into the draft.",
      "createdAt": "2024-02-12T14:10:02Z",
      "updatedAt": "2024-02-12T16:11:41Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "230da39dbeb6d7e20aa07cb461f625ed9d5971f4",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "junyec/zk-script-improvement",
      "headRefOid": "3d85f5d450f1958f459173334e5bd2fec2cfd724",
      "closedAt": "2024-02-12T16:11:38Z",
      "mergedAt": "2024-02-12T16:11:38Z",
      "mergedBy": "junyechen1996",
      "mergeCommit": {
        "oid": "21c43447f9b3ed283cc44500001ab4e9411a72c7"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJWdxls5vylnO",
          "commit": {
            "abbreviatedOid": "fdc3ad1"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-02-12T15:40:22Z",
          "updatedAt": "2024-02-12T15:43:30Z",
          "comments": [
            {
              "originalPosition": 56,
              "body": "I agree with the comment, but it seems sensible to compute this properly, i.e., using `r * eta`.",
              "createdAt": "2024-02-12T15:40:22Z",
              "updatedAt": "2024-02-12T15:43:30Z"
            },
            {
              "originalPosition": 41,
              "body": "Consider passing `r_succ` here instead of `eta` for consistency.",
              "createdAt": "2024-02-12T15:41:19Z",
              "updatedAt": "2024-02-12T15:43:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5vy1NM",
          "commit": {
            "abbreviatedOid": "3d85f5d"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-12T16:06:13Z",
          "updatedAt": "2024-02-12T16:11:23Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "We need `eta` as well to compute `alpha`. I'm going to pass in both now.",
              "createdAt": "2024-02-12T16:06:13Z",
              "updatedAt": "2024-02-12T16:11:23Z"
            }
          ]
        }
      ]
    },
    {
      "number": 58,
      "id": "PR_kwDOJWdxls5nUEul",
      "title": "Analyze overall soundness error of PINE",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/58",
      "state": "MERGED",
      "author": "junyechen1996",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "Some results:\r\n\r\n```\r\n------- Target soundness error: 2^(-32)\r\nWraparound check parameters:\r\n|r         |r_succ    |-log2(eta)     |-log2(zk)      |-log2(sound)   |overhead  |alpha               |\r\n|:---------|:---------|:--------------|:--------------|:--------------|:---------|:-------------------|\r\n|32        |32        |134            |129            |32             |672       |9.673410431465864   |\r\n|37        |36        |69             |128            |31             |740       |6.965651630622664   |\r\n|41        |39        |48             |130            |31             |820       |5.827882278103885   |\r\n|86        |71        |12             |135            |31             |1634      |3.0018183401530623  |\r\n\r\nUser parameters:\r\n|l2_norm   |frac_bits |dimension |chunk_len |field     |proofs    |r         |r_succ    |-log2(eta)|-log2(zk) |-log2(wr_sound)     |-log2(gadget_sound) |\r\n|:---------|:---------|:---------|:---------|:---------|:---------|:---------|:---------|:---------|:---------|:-------------------|:-------------------|\r\n|1         |15        |1000      |42        |Field64   |1         |32        |32        |134       |129       |32                  |54                  |\r\n|1         |15        |1000      |42        |Field128  |1         |32        |32        |134       |129       |32                  |118                 |\r\n|1         |15        |10000     |103       |Field64   |1         |32        |32        |134       |129       |32                  |54                  |\r\n|1         |15        |10000     |103       |Field128  |1         |32        |32        |134       |129       |32                  |118                 |\r\n|1         |15        |100000    |317       |Field64   |1         |32        |32        |134       |129       |32                  |53                  |\r\n|1         |15        |100000    |317       |Field128  |1         |32        |32        |134       |129       |32                  |117                 |\r\n\r\n------- Target soundness error: 2^(-64)\r\nWraparound check parameters:\r\n|r         |r_succ    |-log2(eta)     |-log2(zk)      |-log2(sound)   |overhead  |alpha               |\r\n|:---------|:---------|:--------------|:--------------|:--------------|:---------|:-------------------|\r\n|64        |64        |134            |128            |64             |1344      |9.673410431465864   |\r\n|70        |69        |69             |126            |63             |1400      |6.965651630622664   |\r\n|75        |73        |48             |127            |63             |1500      |5.827882278103885   |\r\n|101       |93        |19             |130            |63             |1919      |3.723297411059034   |\r\n|127       |112       |12             |125            |63             |2413      |3.0018183401530623  |\r\n\r\nUser parameters:\r\n|l2_norm   |frac_bits |dimension |chunk_len |field     |proofs    |r         |r_succ    |-log2(eta)|-log2(zk) |-log2(wr_sound)     |-log2(gadget_sound) |\r\n|:---------|:---------|:---------|:---------|:---------|:---------|:---------|:---------|:---------|:---------|:-------------------|:-------------------|\r\n|1         |15        |1000      |49        |Field64   |2         |64        |64        |134       |128       |64                  |106                 |\r\n|1         |15        |1000      |49        |Field128  |1         |64        |64        |134       |128       |64                  |117                 |\r\n|1         |15        |10000     |107       |Field64   |2         |64        |64        |134       |128       |64                  |106                 |\r\n|1         |15        |10000     |107       |Field128  |1         |64        |64        |134       |128       |64                  |117                 |\r\n|1         |15        |100000    |318       |Field64   |2         |64        |64        |134       |128       |64                  |105                 |\r\n|1         |15        |100000    |318       |Field128  |1         |64        |64        |134       |128       |64                  |116                 |\r\n\r\n------- Target soundness error: 2^(-80)\r\nWraparound check parameters:\r\n|r         |r_succ    |-log2(eta)     |-log2(zk)      |-log2(sound)   |overhead  |alpha               |\r\n|:---------|:---------|:--------------|:--------------|:--------------|:---------|:-------------------|\r\n|80        |80        |134            |127            |80             |1680      |9.673410431465864   |\r\n|86        |85        |69             |126            |79             |1720      |6.965651630622664   |\r\n|92        |90        |48             |127            |79             |1840      |5.827882278103885   |\r\n|146       |131       |12             |122            |79             |2774      |3.0018183401530623  |\r\n\r\nUser parameters:\r\n|l2_norm   |frac_bits |dimension |chunk_len |field     |proofs    |r         |r_succ    |-log2(eta)|-log2(zk) |-log2(wr_sound)     |-log2(gadget_sound) |\r\n|:---------|:---------|:---------|:---------|:---------|:---------|:---------|:---------|:---------|:---------|:-------------------|:-------------------|\r\n|1         |15        |1000      |53        |Field64   |2         |80        |80        |134       |127       |80                  |106                 |\r\n|1         |15        |1000      |53        |Field128  |1         |80        |80        |134       |127       |80                  |117                 |\r\n|1         |15        |10000     |108       |Field64   |2         |80        |80        |134       |127       |80                  |106                 |\r\n|1         |15        |10000     |108       |Field128  |1         |80        |80        |134       |127       |80                  |117                 |\r\n|1         |15        |100000    |319       |Field64   |2         |80        |80        |134       |127       |80                  |105                 |\r\n|1         |15        |100000    |319       |Field128  |1         |80        |80        |134       |127       |80                  |116                 |\r\n```\r\n",
      "createdAt": "2024-02-19T17:15:05Z",
      "updatedAt": "2024-02-22T07:54:04Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "3f64f59ab5de1c84bf5475e930fc3b66c2b4cf73",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "junyec/soundness",
      "headRefOid": "3224a427a25d96cbadfe17be24b6625ac1afca50",
      "closedAt": "2024-02-22T07:54:01Z",
      "mergedAt": "2024-02-22T07:54:01Z",
      "mergedBy": "junyechen1996",
      "mergeCommit": {
        "oid": "7740201e353004a4de931b7024b48e4804d44b3f"
      },
      "comments": [
        {
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "body": "Squashed.",
          "createdAt": "2024-02-22T07:53:22Z",
          "updatedAt": "2024-02-22T07:53:22Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJWdxls5wvUBg",
          "commit": {
            "abbreviatedOid": "9052633"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks mostly correct, please confirm and merge if you're comfortable. I also left some suggestions for minor improvments.",
          "createdAt": "2024-02-20T19:48:19Z",
          "updatedAt": "2024-02-20T20:09:35Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "nit: break comment blocks at 80 charcters",
              "createdAt": "2024-02-20T19:48:19Z",
              "updatedAt": "2024-02-20T20:06:12Z"
            },
            {
              "originalPosition": 36,
              "body": "What are the \"constraints\" exactly? Are these the things that we \"compute a random linear combination over\"? If so, this should include:\r\n1. The bit checks (`valid.bit_checked_len`) => bit_checks_result\r\n2. The wraparound test results (`valid.num_wr_checks`) => wr_checks_result\r\n3. The final reduction over bit_checks_result, wr_checks_result, wr_success_count_result, sq_norm_equality_check_result, and sq_norm_range_check_result (`4`?)",
              "createdAt": "2024-02-20T19:53:19Z",
              "updatedAt": "2024-02-20T20:06:12Z"
            },
            {
              "originalPosition": 25,
              "body": "Would `flp_sound` be more accurate?",
              "createdAt": "2024-02-20T19:53:45Z",
              "updatedAt": "2024-02-20T20:06:12Z"
            },
            {
              "originalPosition": 75,
              "body": "The output is pretty, but a machine-readable format may be more useful. What about outputting CSV?",
              "createdAt": "2024-02-20T19:54:32Z",
              "updatedAt": "2024-02-20T20:06:12Z"
            },
            {
              "originalPosition": 104,
              "body": "nit: Give these the same variable names as the arguments to the `PineValid` constructor.",
              "createdAt": "2024-02-20T19:54:58Z",
              "updatedAt": "2024-02-20T20:06:12Z"
            },
            {
              "originalPosition": 133,
              "body": "I think it would be more useful to combine these as they are in Theorem 3.14.",
              "createdAt": "2024-02-20T20:05:59Z",
              "updatedAt": "2024-02-20T20:06:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5wzefQ",
          "commit": {
            "abbreviatedOid": "9052633"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-21T09:38:56Z",
          "updatedAt": "2024-02-21T10:14:13Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "Updated to +4.\r\n\r\n1 and 2 are correct for both paper and implementation. I used to put +1 here because we are checking the squared L2-norm equality check (i.e., the squared L2-norm computed from the secret shares of the client gradient is equal to the client-submitted bits of the squared L2-norm). I think +4 is correct for implementation since we are taking a final random linear combination of the things we are checking: https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/blob/21c43447f9b3ed283cc44500001ab4e9411a72c7/poc/flp_pine.py#L212-L215. In theory, we can do better by exchanging the secret shares of each check directly instead of taking a random linear combination, which introduces a bit more soundness error, but very negligible.",
              "createdAt": "2024-02-21T09:38:56Z",
              "updatedAt": "2024-02-21T10:14:13Z"
            },
            {
              "originalPosition": 75,
              "body": "Done.",
              "createdAt": "2024-02-21T10:13:33Z",
              "updatedAt": "2024-02-21T10:14:13Z"
            }
          ]
        }
      ]
    },
    {
      "number": 61,
      "id": "PR_kwDOJWdxls5ndR76",
      "title": "Begin pass of draft",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/61",
      "state": "MERGED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I'm working my way through the draft and cleaning as I go. The goal for the first pass is to flesh out the skeleton. There are already lots of bits we can use here.\r\n\r\nOne thing I'm doing is de-emphasizing the \"completeness problem\" for PINE. Given how we will choose parameters, it seems to me that the impact on ZK is really going to be negligible.",
      "createdAt": "2024-02-21T00:31:06Z",
      "updatedAt": "2024-02-21T19:19:20Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "21c43447f9b3ed283cc44500001ab4e9411a72c7",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "cjpatton/draft-skeleton",
      "headRefOid": "0a62d4e5de300273ed3558d38973543b22179e94",
      "closedAt": "2024-02-21T19:19:19Z",
      "mergedAt": "2024-02-21T19:19:19Z",
      "mergedBy": "cjpatton",
      "mergeCommit": {
        "oid": "3f64f59ab5de1c84bf5475e930fc3b66c2b4cf73"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJWdxls5wz44n",
          "commit": {
            "abbreviatedOid": "eb9b01d"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-02-21T10:18:11Z",
          "updatedAt": "2024-02-21T10:30:55Z",
          "comments": [
            {
              "originalPosition": 3,
              "body": "I think we should update this to `ROCT23`.",
              "createdAt": "2024-02-21T10:18:11Z",
              "updatedAt": "2024-02-21T10:30:56Z"
            },
            {
              "originalPosition": 121,
              "body": "```suggestion\r\nThis computation is not easy to do efficiently: the challenge lies in ensuring that\r\n```\r\n?",
              "createdAt": "2024-02-21T10:19:09Z",
              "updatedAt": "2024-02-21T10:30:56Z"
            },
            {
              "originalPosition": 221,
              "body": "```suggestion\r\nCrucially, arithmetic in this computation is modulo the field size `q`. This\r\n```",
              "createdAt": "2024-02-21T10:24:40Z",
              "updatedAt": "2024-02-21T10:30:56Z"
            },
            {
              "originalPosition": 232,
              "body": "```suggestion\r\nAggregators can ensure each falls in a range, which ensures wraparounds do not\r\n```",
              "createdAt": "2024-02-21T10:26:18Z",
              "updatedAt": "2024-02-21T10:30:56Z"
            },
            {
              "originalPosition": 231,
              "body": "I think it's quick enough to just mention \"one way to do this is to encode the bit representation of each entry of the gradient such that...\"? Otherwise it's not immediately clear why the communication cost is `O(num_frac_bits * dimension)`?",
              "createdAt": "2024-02-21T10:27:37Z",
              "updatedAt": "2024-02-21T10:30:56Z"
            },
            {
              "originalPosition": 168,
              "body": "```suggestion\r\n| `l2_norm_bound` | float | The L2-norm upper bound (inclusive). |\r\n```",
              "createdAt": "2024-02-21T10:28:43Z",
              "updatedAt": "2024-02-21T10:30:56Z"
            },
            {
              "originalPosition": 170,
              "body": "```suggestion\r\n| `num_frac_bits` | int   | The number of bits of precision to use when encoding each gradient entry into the field. At most XXX |\r\n```",
              "createdAt": "2024-02-21T10:28:57Z",
              "updatedAt": "2024-02-21T10:30:56Z"
            },
            {
              "originalPosition": 226,
              "body": "```suggestion\r\nbecause the sum of the squares \"wraps around\" the field modulus `q`.\r\n```",
              "createdAt": "2024-02-21T10:29:39Z",
              "updatedAt": "2024-02-21T10:30:56Z"
            }
          ]
        }
      ]
    },
    {
      "number": 62,
      "id": "PR_kwDOJWdxls5nmOlh",
      "title": "Complete the skeleton for draft-00",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/62",
      "state": "MERGED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The bits that we should fill out before cutting the draft are marked with \"XXX\". Ignore \"TODO\" for now: my intention is that we would fill these out once the spec is more baked.",
      "createdAt": "2024-02-22T04:04:11Z",
      "updatedAt": "2024-02-22T15:51:01Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "7740201e353004a4de931b7024b48e4804d44b3f",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "cjpatton/pass-2",
      "headRefOid": "7e95b2f11892cb6daa986608ea3103e60246bc19",
      "closedAt": "2024-02-22T15:51:01Z",
      "mergedAt": "2024-02-22T15:51:00Z",
      "mergedBy": "cjpatton",
      "mergeCommit": {
        "oid": "4d511485de135d898beb7abcf2ec7a7f94660c70"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJWdxls5xAPFV",
          "commit": {
            "abbreviatedOid": "973661b"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-02-22T13:42:34Z",
          "updatedAt": "2024-02-22T15:36:30Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "```suggestion\r\nvector is called an \"entry\". The \"L2-norm\", or simply \"norm\", of a gradient is\r\n```",
              "createdAt": "2024-02-22T13:42:34Z",
              "updatedAt": "2024-02-22T15:36:30Z"
            },
            {
              "originalPosition": 82,
              "body": "```suggestion\r\nvector and the gradient, and check if the result is in a specific range. The range\r\n```",
              "createdAt": "2024-02-22T13:45:21Z",
              "updatedAt": "2024-02-22T15:36:30Z"
            },
            {
              "originalPosition": 86,
              "body": "```suggestion\r\nbe large. In fact, {{ROCT23}} show that this test correctly detects wraparounds\r\n```",
              "createdAt": "2024-02-22T13:46:10Z",
              "updatedAt": "2024-02-22T15:36:30Z"
            },
            {
              "originalPosition": 78,
              "body": "I don't think Aggregators can ever prevent wraparounds from occurring? How about:\r\n\r\n```suggestion\r\nIn order to detect whether a wraparound has occurred, PINE uses a probabilistic test,\r\nwhich works as follows: A\r\n```",
              "createdAt": "2024-02-22T15:29:54Z",
              "updatedAt": "2024-02-22T15:36:30Z"
            },
            {
              "originalPosition": 88,
              "body": "```suggestion\r\nthe probability of misclassifying an invalid gradient as valid), we simply\r\n```",
              "createdAt": "2024-02-22T15:31:07Z",
              "updatedAt": "2024-02-22T15:36:30Z"
            },
            {
              "originalPosition": 93,
              "body": "```suggestion\r\npositive probability (the probability of misclassifying a valid gradient as\r\n```",
              "createdAt": "2024-02-22T15:31:21Z",
              "updatedAt": "2024-02-22T15:36:30Z"
            },
            {
              "originalPosition": 105,
              "body": "```suggestion\r\n({{Section 7.3 of !VDAF}}) for checking that (1) the gradient's\r\nsquared L2-norm falls in the desired range and (2) the squared L2-norm does not wrap around the field modulus.\r\n```",
              "createdAt": "2024-02-22T15:33:51Z",
              "updatedAt": "2024-02-22T15:36:30Z"
            },
            {
              "originalPosition": 108,
              "body": "```suggestion\r\nderive the random vectors for the wraparound tests. The seed must be known\r\n```",
              "createdAt": "2024-02-22T15:34:37Z",
              "updatedAt": "2024-02-22T15:36:30Z"
            },
            {
              "originalPosition": 212,
              "body": "The other difference from Prio3 is there are two Fiat-Shamir derivation, so the robustness needs to account for the random oracle attack from both wraparound joint randomness and verification joint randomness?",
              "createdAt": "2024-02-22T15:36:25Z",
              "updatedAt": "2024-02-22T15:36:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5xBbfY",
          "commit": {
            "abbreviatedOid": "973661b"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-22T15:45:41Z",
          "updatedAt": "2024-02-22T15:45:41Z",
          "comments": [
            {
              "originalPosition": 212,
              "body": "Our goal will be to tune the parameters such that the user doesn't have to worry about this.",
              "createdAt": "2024-02-22T15:45:41Z",
              "updatedAt": "2024-02-22T15:45:41Z"
            }
          ]
        }
      ]
    },
    {
      "number": 63,
      "id": "PR_kwDOJWdxls5nryIV",
      "title": "Update the base parameters for ZK/soundness error of 2^-100",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/63",
      "state": "MERGED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We will target ZK/soundness bounds of at most 2^-100. The following parameters are optimal for communication overhead:\r\n\r\nALPHA = 8.7\r\nNUM_WR_CHECKS = 100\r\nNUM_WR_SUCCESSES = 100",
      "createdAt": "2024-02-22T19:03:36Z",
      "updatedAt": "2024-02-26T15:15:43Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "4d511485de135d898beb7abcf2ec7a7f94660c70",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "cjpatton/initial-parameters",
      "headRefOid": "421a21031f9d4bba5cbce646085b6d9680fbe847",
      "closedAt": "2024-02-26T15:15:43Z",
      "mergedAt": "2024-02-26T15:15:43Z",
      "mergedBy": "cjpatton",
      "mergeCommit": {
        "oid": "fb64c4a6b2b1189ba5c0684a797c1f347413cce6"
      },
      "comments": [
        {
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "body": "I saw 2 proofs with Field64 based on our current analysis:\r\n\r\n```\r\nUser parameters:\r\n|l2_norm   |frac_bits |dimension |chunk_len |field     |proofs    |r         |r_succ    |-log2(eta)|-log2(zk) |-log2(sound)        |\r\n|:---------|:---------|:---------|:---------|:---------|:---------|:---------|:---------|:---------|:---------|:-------------------|\r\n|1         |15        |1000      |57        |Field64   |2         |100       |100       |107       |100       |99                  |\r\n|1         |15        |1000      |57        |Field128  |1         |100       |100       |107       |100       |99                  |\r\n|1         |15        |10000     |110       |Field64   |2         |100       |100       |107       |100       |99                  |\r\n|1         |15        |10000     |110       |Field128  |1         |100       |100       |107       |100       |99                  |\r\n|1         |15        |100000    |319       |Field64   |2         |100       |100       |107       |100       |99                  |\r\n|1         |15        |100000    |319       |Field128  |1         |100       |100       |107       |100       |99                  |\r\n```\r\n\r\nShould we update number of proofs to 2 for now?",
          "createdAt": "2024-02-23T09:59:51Z",
          "updatedAt": "2024-02-23T10:00:34Z"
        },
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "> I saw 2 proofs with Field64 based on our current analysis:\r\n> \r\n> ```\r\n> User parameters:\r\n> |l2_norm   |frac_bits |dimension |chunk_len |field     |proofs    |r         |r_succ    |-log2(eta)|-log2(zk) |-log2(sound)        |\r\n> |:---------|:---------|:---------|:---------|:---------|:---------|:---------|:---------|:---------|:---------|:-------------------|\r\n> |1         |15        |1000      |57        |Field64   |2         |100       |100       |107       |100       |99                  |\r\n> |1         |15        |1000      |57        |Field128  |1         |100       |100       |107       |100       |99                  |\r\n> |1         |15        |10000     |110       |Field64   |2         |100       |100       |107       |100       |99                  |\r\n> |1         |15        |10000     |110       |Field128  |1         |100       |100       |107       |100       |99                  |\r\n> |1         |15        |100000    |319       |Field64   |2         |100       |100       |107       |100       |99                  |\r\n> |1         |15        |100000    |319       |Field128  |1         |100       |100       |107       |100       |99                  |\r\n> ```\r\n> \r\n> Should we update number of proofs to 2 for now?\r\n\r\nGood catch! The analysis doesn't account for offline attacks against Fiat-Shamir. Personally, I'm more comfortable with three proofs than two, based on our analysis in https://github.com/cfrg/draft-irtf-cfrg-vdaf/issues/311.",
          "createdAt": "2024-02-23T16:25:10Z",
          "updatedAt": "2024-02-23T16:25:10Z"
        },
        {
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "body": "LGTM. I'm good with merging this.",
          "createdAt": "2024-02-25T17:14:07Z",
          "updatedAt": "2024-02-25T17:14:07Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJWdxls5xHVVC",
          "commit": {
            "abbreviatedOid": "421a210"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "How about number of proofs?",
          "createdAt": "2024-02-23T09:56:44Z",
          "updatedAt": "2024-02-23T09:56:44Z",
          "comments": []
        }
      ]
    },
    {
      "number": 64,
      "id": "PR_kwDOJWdxls5n2Ik_",
      "title": "Fill in FLP overview in draft",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/64",
      "state": "MERGED",
      "author": "junyechen1996",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "The remaining two sections to fill:\r\n- Wraparound checks and FLP circuit\r\n- VDAF overview",
      "createdAt": "2024-02-25T17:15:00Z",
      "updatedAt": "2024-02-27T21:55:17Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "fb64c4a6b2b1189ba5c0684a797c1f347413cce6",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "junyec/fill-flp-overview",
      "headRefOid": "16d379520cd1bced9eb326b45b76aadba56aac6b",
      "closedAt": "2024-02-27T21:55:15Z",
      "mergedAt": "2024-02-27T21:55:14Z",
      "mergedBy": "junyechen1996",
      "mergeCommit": {
        "oid": "6014969b4a715f3fdad1c0a55a27b975eb065831"
      },
      "comments": [
        {
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "body": "Squashed.",
          "createdAt": "2024-02-27T21:54:52Z",
          "updatedAt": "2024-02-27T21:54:52Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJWdxls5xO2VK",
          "commit": {
            "abbreviatedOid": "5b961d7"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-25T17:15:43Z",
          "updatedAt": "2024-02-25T17:16:47Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Fix to wrap texts after 80 characters",
              "createdAt": "2024-02-25T17:15:44Z",
              "updatedAt": "2024-02-25T17:16:47Z"
            },
            {
              "originalPosition": 37,
              "body": "Fix to wrap texts after 80 characters",
              "createdAt": "2024-02-25T17:15:53Z",
              "updatedAt": "2024-02-25T17:16:47Z"
            },
            {
              "originalPosition": 68,
              "body": "Fix to wrap texts after 80 characters",
              "createdAt": "2024-02-25T17:15:59Z",
              "updatedAt": "2024-02-25T17:16:47Z"
            },
            {
              "originalPosition": 58,
              "body": "The goal is to briefly mention ZK error here.",
              "createdAt": "2024-02-25T17:16:08Z",
              "updatedAt": "2024-02-25T17:16:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5xUY8l",
          "commit": {
            "abbreviatedOid": "5b961d7"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-26T15:19:18Z",
          "updatedAt": "2024-02-26T15:24:55Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "The upper bound depends on the field and norm bound, correct?\r\n\r\nPerhaps we should just say nothing here.\r\n```suggestion\r\n| `num_frac_bits` | int   | The number of bits of precision to use when encoding each gradient entry into the field. |\r\n```",
              "createdAt": "2024-02-26T15:19:18Z",
              "updatedAt": "2024-02-26T15:24:55Z"
            },
            {
              "originalPosition": 58,
              "body": "```suggestion\r\ninvalid). We refer to this probability as the \"zero-knowledge error\", or in short,\r\n```",
              "createdAt": "2024-02-26T15:19:57Z",
              "updatedAt": "2024-02-26T15:24:55Z"
            },
            {
              "originalPosition": 20,
              "body": "```suggestion\r\nA floating point number, denoted `float`, is a IEEE-754 compatible float64 value {{IEEE754-2019}}.\r\n```",
              "createdAt": "2024-02-26T15:20:59Z",
              "updatedAt": "2024-02-26T15:24:55Z"
            },
            {
              "originalPosition": 91,
              "body": "Let's make sure to connect `float` to the spec (see suggestion above).",
              "createdAt": "2024-02-26T15:21:18Z",
              "updatedAt": "2024-02-26T15:24:55Z"
            },
            {
              "originalPosition": 95,
              "body": "```suggestion\r\n| wr_check_bound        | Field    | The bound of the range check for each wraparound check. |\r\n```",
              "createdAt": "2024-02-26T15:21:47Z",
              "updatedAt": "2024-02-26T15:24:55Z"
            },
            {
              "originalPosition": 98,
              "body": "The reader doesn't quite know yet what \"chunk length\" means\r\n```suggestion\r\n| chunk_length          | int      | Parameter of the FLP. |\r\n```",
              "createdAt": "2024-02-26T15:22:17Z",
              "updatedAt": "2024-02-26T15:24:55Z"
            },
            {
              "originalPosition": 112,
              "body": "Don't refer to syntax that hasn't been defined yet. Instead, how about adding a forward reference to the section that describes it?\r\n```suggestion\r\n* \r\n```",
              "createdAt": "2024-02-26T15:23:53Z",
              "updatedAt": "2024-02-26T15:24:55Z"
            },
            {
              "originalPosition": 123,
              "body": "Instead of speaking of an XOF here, we should only speak of the seed used to derive the random vectors via the XOF.",
              "createdAt": "2024-02-26T15:24:51Z",
              "updatedAt": "2024-02-26T15:24:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5xcrGQ",
          "commit": {
            "abbreviatedOid": "0a5aa71"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-27T12:17:14Z",
          "updatedAt": "2024-02-27T12:17:49Z",
          "comments": [
            {
              "originalPosition": 112,
              "body": "I added a section `Encoding Gradient {#encode-gradient}` and mentions this function there. I also put floating point encoding and L2-norm check as subsections of it.",
              "createdAt": "2024-02-27T12:17:14Z",
              "updatedAt": "2024-02-27T12:17:49Z"
            },
            {
              "originalPosition": 123,
              "body": "isn't the XOF composed of the seed and domain separation tag? Mentioning XOF here also connects to our reference implementation?",
              "createdAt": "2024-02-27T12:17:37Z",
              "updatedAt": "2024-02-27T12:17:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5xhn-a",
          "commit": {
            "abbreviatedOid": "5b961d7"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-27T19:30:34Z",
          "updatedAt": "2024-02-27T19:30:34Z",
          "comments": [
            {
              "originalPosition": 112,
              "body": "Works for me",
              "createdAt": "2024-02-27T19:30:34Z",
              "updatedAt": "2024-02-27T19:30:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5xhol8",
          "commit": {
            "abbreviatedOid": "42f80df"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-02-27T19:32:06Z",
          "updatedAt": "2024-02-27T19:32:25Z",
          "comments": [
            {
              "originalPosition": 128,
              "body": "```suggestion\r\n  the vectors derived from a short, random seed using an XOF.\r\n````",
              "createdAt": "2024-02-27T19:32:06Z",
              "updatedAt": "2024-02-27T19:32:25Z"
            }
          ]
        }
      ]
    },
    {
      "number": 66,
      "id": "PR_kwDOJWdxls5oDX01",
      "title": "Fill the section about running wraparound checks",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/66",
      "state": "MERGED",
      "author": "junyechen1996",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "Reviewer's note: stacked PR on #64 .",
      "createdAt": "2024-02-27T14:24:07Z",
      "updatedAt": "2024-02-27T23:13:24Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "56200091243c369989be66a88e09b10fa7cd4408",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "junyec/fill-run-wraparound-check",
      "headRefOid": "cfe9fadeef65d641c60464781cbe1a5dea3f6db1",
      "closedAt": "2024-02-27T23:13:22Z",
      "mergedAt": "2024-02-27T23:13:22Z",
      "mergedBy": "junyechen1996",
      "mergeCommit": {
        "oid": "c10fdcec3d228ac364515f2d29b327e92c5e7a8a"
      },
      "comments": [
        {
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "body": "Rebased and squashed.",
          "createdAt": "2024-02-27T23:13:06Z",
          "updatedAt": "2024-02-27T23:13:06Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJWdxls5xhrOT",
          "commit": {
            "abbreviatedOid": "9102a09"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-02-27T19:37:47Z",
          "updatedAt": "2024-02-27T19:47:39Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "Harmonize with #65 once you have a PR up for that.",
              "createdAt": "2024-02-27T19:37:48Z",
              "updatedAt": "2024-02-27T19:47:39Z"
            },
            {
              "originalPosition": 20,
              "body": "```suggestion\r\nrandom vectors, the Client needs to run wraparound check `num_wr_checks`\r\n```",
              "createdAt": "2024-02-27T19:38:29Z",
              "updatedAt": "2024-02-27T19:47:39Z"
            },
            {
              "originalPosition": 24,
              "body": "```suggestion\r\nFor each test, the Client generates a random vector with the same dimension as the\r\n```",
              "createdAt": "2024-02-27T19:39:05Z",
              "updatedAt": "2024-02-27T19:47:39Z"
            },
            {
              "originalPosition": 25,
              "body": "nit (grammar): It sounds like you're using the variable `dimension` to denote the gradient.",
              "createdAt": "2024-02-27T19:39:48Z",
              "updatedAt": "2024-02-27T19:47:39Z"
            },
            {
              "originalPosition": 28,
              "body": "```suggestion\r\nfrom the XOF output stream two bits at a time:\r\n```",
              "createdAt": "2024-02-27T19:39:59Z",
              "updatedAt": "2024-02-27T19:47:39Z"
            },
            {
              "originalPosition": 35,
              "body": "Move the definition of the dot product to the conventions section above.\r\n```suggestion\r\nThen the Client computes the dot product. If\r\nthe dot product is in the range of\r\n```",
              "createdAt": "2024-02-27T19:44:32Z",
              "updatedAt": "2024-02-27T19:47:39Z"
            },
            {
              "originalPosition": 36,
              "body": "We can be a bit informal here:  it's clear from context that arithmetic is mod `q`.\r\n```suggestion\r\n`[-wr_check_bound, wr_check_bound+1]`, then the Client passes that\r\n```",
              "createdAt": "2024-02-27T19:45:15Z",
              "updatedAt": "2024-02-27T19:47:39Z"
            },
            {
              "originalPosition": 37,
              "body": "nit (grammar): As a general rule, technical writing doesn't have contractions in it. Some authors make exceptions of course. In an Internet-Draft, I'd probably not use contractions.\r\n```suggestion\r\nwraparound check, and fails otherwise. Note the Client does not send this dot\r\n```",
              "createdAt": "2024-02-27T19:46:23Z",
              "updatedAt": "2024-02-27T19:47:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5xi9w9",
          "commit": {
            "abbreviatedOid": "9102a09"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-27T23:12:43Z",
          "updatedAt": "2024-02-27T23:12:43Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "Done.",
              "createdAt": "2024-02-27T23:12:43Z",
              "updatedAt": "2024-02-27T23:12:43Z"
            }
          ]
        }
      ]
    },
    {
      "number": 67,
      "id": "PR_kwDOJWdxls5oDYKt",
      "title": "Fill in validity circuit",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/67",
      "state": "MERGED",
      "author": "junyechen1996",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "Reviewer's note: stacked PR on #66 .",
      "createdAt": "2024-02-27T14:24:53Z",
      "updatedAt": "2024-02-28T17:15:36Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "c10fdcec3d228ac364515f2d29b327e92c5e7a8a",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "junyec/fill-validity-circuit",
      "headRefOid": "1142db8d007fd347a79599945d9479421e03a1e0",
      "closedAt": "2024-02-28T17:15:33Z",
      "mergedAt": "2024-02-28T17:15:33Z",
      "mergedBy": "junyechen1996",
      "mergeCommit": {
        "oid": "797e5c7b1a76fe448d3b60300dc697eb98938ed0"
      },
      "comments": [
        {
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "body": "Things that are still open:\r\n\r\n- Wording about evaluating polynomial at random point: https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/67#discussion_r1504898519\r\n- Mention range check at the beginning of FLP circuit: https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/67#discussion_r1504905892\r\n- The term \"quadratic check\": https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/67#discussion_r1504888793\r\n- Mention success bit: https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/67#discussion_r1504883073",
          "createdAt": "2024-02-28T00:36:59Z",
          "updatedAt": "2024-02-28T00:36:59Z"
        },
        {
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "body": "Made a final pass and squashed.",
          "createdAt": "2024-02-28T11:46:29Z",
          "updatedAt": "2024-02-28T11:46:29Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJWdxls5xhwu-",
          "commit": {
            "abbreviatedOid": "607f99e"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-27T19:49:01Z",
          "updatedAt": "2024-02-27T20:13:35Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "```suggestion\r\n| bit_checked_len       | int     | Number of field elements in the encoded measurement that are expected to be bits. |\r\n```",
              "createdAt": "2024-02-27T19:49:01Z",
              "updatedAt": "2024-02-27T20:13:36Z"
            },
            {
              "originalPosition": 16,
              "body": "```suggestion\r\nEvaluation of the validity circuit begins by unpacking the encoded measurement into the following components:\r\n```",
              "createdAt": "2024-02-27T19:49:44Z",
              "updatedAt": "2024-02-27T20:13:36Z"
            },
            {
              "originalPosition": 21,
              "body": "```suggestion\r\n  the bits for the range check of the L2 norm, the bits from the range check in wraparound\r\n```",
              "createdAt": "2024-02-27T19:50:58Z",
              "updatedAt": "2024-02-27T20:13:36Z"
            },
            {
              "originalPosition": 22,
              "body": "```suggestion\r\n  the bits from L2-norm check, the bits from the range check for each wraparound\r\n  check, and the success bits in wraparound checks.\r\n```",
              "createdAt": "2024-02-27T19:51:31Z",
              "updatedAt": "2024-02-27T20:13:36Z"
            },
            {
              "originalPosition": 22,
              "body": "Have we explained the concept of a \"success bit\"? If not, make sure we do before this point.",
              "createdAt": "2024-02-27T19:52:14Z",
              "updatedAt": "2024-02-27T20:13:36Z"
            },
            {
              "originalPosition": 26,
              "body": "Make sure the reader knows what \"joint randomness\" means before this point.",
              "createdAt": "2024-02-27T19:53:11Z",
              "updatedAt": "2024-02-27T20:13:36Z"
            },
            {
              "originalPosition": 35,
              "body": "nit: The hyphen is only used to disambiguate \"L2 norm\" in certain grammatical contexts. For example, if we write \"cool L2 norm\", we're not sure whether \"L2\" or \"norm\" is cool. If instead we write \"cool L2-norm\", then it's clear we mean \"L2 norm\" is cool.\r\n```suggestion\r\n  L2 norm range check, the reduced quadratic checks in wraparound check, and\r\n```",
              "createdAt": "2024-02-27T19:54:38Z",
              "updatedAt": "2024-02-27T20:13:36Z"
            },
            {
              "originalPosition": 35,
              "body": "I don't think the reader knows what a \"quadratic\" check is.",
              "createdAt": "2024-02-27T19:55:32Z",
              "updatedAt": "2024-02-27T20:13:36Z"
            },
            {
              "originalPosition": 41,
              "body": "Before we get to the technical details, we need to first say what the purpose is of checking that `bit_checked` is made up of bits.",
              "createdAt": "2024-02-27T20:00:06Z",
              "updatedAt": "2024-02-27T20:13:36Z"
            },
            {
              "originalPosition": 43,
              "body": "```suggestion\r\nevaluated at each element of `bit_checked`, with the coefficients computed\r\n```",
              "createdAt": "2024-02-27T20:00:30Z",
              "updatedAt": "2024-02-27T20:13:36Z"
            },
            {
              "originalPosition": 43,
              "body": "I don't think you mean \"coefficients\" here. We're evaluating a polynomial $p(r) = c_0 + c_1 r + c_1 + r^2 + \\cdots$ at a random point $r$: what are the ceofficients?",
              "createdAt": "2024-02-27T20:02:17Z",
              "updatedAt": "2024-02-27T20:13:36Z"
            },
            {
              "originalPosition": 46,
              "body": "I'd say let's save this note until we've handled the TODO below.\r\n\r\nIn fact, it may be worth adding an in line comment somewhere in `eval()` explaining the purpose of `shares_inv`.",
              "createdAt": "2024-02-27T20:03:08Z",
              "updatedAt": "2024-02-27T20:13:36Z"
            },
            {
              "originalPosition": 52,
              "body": "```suggestion\r\nThe validity circuit verifies two properties of the L2 norm reported by the Client:\r\n```",
              "createdAt": "2024-02-27T20:04:36Z",
              "updatedAt": "2024-02-27T20:13:36Z"
            },
            {
              "originalPosition": 39,
              "body": "The jump  to the next subusbusections is rather abrupt. We need some fence posting here to let the reader know how the remainder is organized.",
              "createdAt": "2024-02-27T20:05:38Z",
              "updatedAt": "2024-02-27T20:13:36Z"
            },
            {
              "originalPosition": 55,
              "body": "I don't think variable `sq_norm_v_bits` has not been defined? Ask yourself if you actually need to define it in order to convey what's going on.\r\n\r\nI think we should try to explain what's going on without referring to variables in the circuit. What would help is an explanation of how range checking works in PINE. That way all you need to do here is say that the circuit decodes the bit-encoding of the reported norm and performs the range check.\r\n\r\nLikewise for \"wraparound check\" section below. the explanation of how range checking works should go somewhere towards the top of the \"FLP Circuit\" section.",
              "createdAt": "2024-02-27T20:07:03Z",
              "updatedAt": "2024-02-27T20:13:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5xjDkW",
          "commit": {
            "abbreviatedOid": "9484ca7"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-27T23:33:27Z",
          "updatedAt": "2024-02-28T00:34:04Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "Added a note about \"joint randomness\" is shared between the Client and Aggregators.",
              "createdAt": "2024-02-27T23:33:27Z",
              "updatedAt": "2024-02-28T00:34:04Z"
            },
            {
              "originalPosition": 41,
              "body": "Done.",
              "createdAt": "2024-02-27T23:41:38Z",
              "updatedAt": "2024-02-28T00:34:04Z"
            },
            {
              "originalPosition": 43,
              "body": "Coefficients is a bad word, I was thinking about random linear combination, and the joint randomness is the coefficient multiplied with the each polynomial. I corrected the wording there.",
              "createdAt": "2024-02-27T23:52:05Z",
              "updatedAt": "2024-02-28T00:34:04Z"
            },
            {
              "originalPosition": 46,
              "body": "Yes... I had this comment about `shares_inv` initially because I already pasted the reference implementation code in, and was basically explaining the code there. I removed this comment for now.",
              "createdAt": "2024-02-27T23:52:56Z",
              "updatedAt": "2024-02-28T00:34:04Z"
            },
            {
              "originalPosition": 55,
              "body": "I added a section at the beginning of FLP circuit about range check.",
              "createdAt": "2024-02-28T00:19:26Z",
              "updatedAt": "2024-02-28T00:34:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5xjR6F",
          "commit": {
            "abbreviatedOid": "607f99e"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-28T00:34:50Z",
          "updatedAt": "2024-02-28T00:34:51Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "I quickly mentioned it, but also referred to {{encode-wr-checks}}, which has yet to be filled.",
              "createdAt": "2024-02-28T00:34:50Z",
              "updatedAt": "2024-02-28T00:34:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5xjSAU",
          "commit": {
            "abbreviatedOid": "607f99e"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-28T00:35:21Z",
          "updatedAt": "2024-02-28T00:35:21Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "I couldn't really come up with a better name than \"quadratic check\"... So I used the term in the paper.",
              "createdAt": "2024-02-28T00:35:21Z",
              "updatedAt": "2024-02-28T00:35:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5xjkXQ",
          "commit": {
            "abbreviatedOid": "c0998e1"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Great, just some minor suggestions.",
          "createdAt": "2024-02-28T02:04:23Z",
          "updatedAt": "2024-02-28T02:11:49Z",
          "comments": [
            {
              "originalPosition": 52,
              "body": "```suggestion\r\nverified the `v` bits and `u` bits are indeed composed of bits (as described in {{valid-bit-check}}), the Aggregators\r\n```",
              "createdAt": "2024-02-28T02:04:23Z",
              "updatedAt": "2024-02-28T02:11:49Z"
            },
            {
              "originalPosition": 59,
              "body": "```suggestion\r\n`2`. This is because the available `v` bits can naturally bound `value - B1` to be\r\n```",
              "createdAt": "2024-02-28T02:04:47Z",
              "updatedAt": "2024-02-28T02:11:49Z"
            },
            {
              "originalPosition": 45,
              "body": "Perfect!",
              "createdAt": "2024-02-28T02:04:53Z",
              "updatedAt": "2024-02-28T02:11:49Z"
            },
            {
              "originalPosition": 55,
              "body": "The explanation is great. I think we can now simplify this text accordingly, by not mentioning variables. Also, I suggest describing what the circuit actuall does here:\r\n\r\n> Equality check: The squared norm of the gradient is equal to the value reported by the Client. For this, the Aggregators decode their shares of the bit-representation of the squared norm (as defined above in {{valid-bit-check}}), compute their shares of the squared norm from their shares of the gradient, and check that the values are equal.\r\n> Range check: The squared norm reported by the Client is in the desired range. For this, the Aggregators run the range check described in {{range-check}}.\r\n\r\nLikewise for the other \"sub-checks\".",
              "createdAt": "2024-02-28T02:11:12Z",
              "updatedAt": "2024-02-28T02:11:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5xjl5U",
          "commit": {
            "abbreviatedOid": "607f99e"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-28T02:12:40Z",
          "updatedAt": "2024-02-28T02:12:40Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "That's fine for now, I think connecting it to the paper is the main thing we need.",
              "createdAt": "2024-02-28T02:12:40Z",
              "updatedAt": "2024-02-28T02:12:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5xjmAG",
          "commit": {
            "abbreviatedOid": "607f99e"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-28T02:13:14Z",
          "updatedAt": "2024-02-28T02:13:14Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "Once you're satisfied it's defined, feel free to resolve this.",
              "createdAt": "2024-02-28T02:13:14Z",
              "updatedAt": "2024-02-28T02:13:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5xpJyc",
          "commit": {
            "abbreviatedOid": "1142db8"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-02-28T15:45:27Z",
          "updatedAt": "2024-02-28T15:45:27Z",
          "comments": []
        }
      ]
    },
    {
      "number": 68,
      "id": "PR_kwDOJWdxls5oGzK5",
      "title": "Resolve issue #65",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/68",
      "state": "MERGED",
      "author": "junyechen1996",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "Resolve issue #65: conflicting definitions of `encoded_gradient`.",
      "createdAt": "2024-02-27T22:27:06Z",
      "updatedAt": "2024-02-27T23:03:16Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "6014969b4a715f3fdad1c0a55a27b975eb065831",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "junyec/issue-65",
      "headRefOid": "6f3d0d8fb1bf353aabc51287ff969886ad29dc29",
      "closedAt": "2024-02-27T23:03:14Z",
      "mergedAt": "2024-02-27T23:03:14Z",
      "mergedBy": "junyechen1996",
      "mergeCommit": {
        "oid": "56200091243c369989be66a88e09b10fa7cd4408"
      },
      "comments": [
        {
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "body": "Squashed.",
          "createdAt": "2024-02-27T23:03:09Z",
          "updatedAt": "2024-02-27T23:03:09Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJWdxls5xixMi",
          "commit": {
            "abbreviatedOid": "2aabfde"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-02-27T22:29:12Z",
          "updatedAt": "2024-02-27T22:30:20Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "Generally \"simple\" words, like \"and\", \"or\", \"the\", \"a\", etc., are not capitalized in titles.\r\n```suggestion\r\n### Encoding Gradient and L2-Norm Check {#encode-gradient-and-norm}\r\n```",
              "createdAt": "2024-02-27T22:29:12Z",
              "updatedAt": "2024-02-27T22:30:20Z"
            },
            {
              "originalPosition": 34,
              "body": "While we're here, should this be `wr_check_results`?\r\n```suggestion\r\n        wr_check_results = Pine.Flp.Valid.run_wr_checks(\r\n```",
              "createdAt": "2024-02-27T22:30:16Z",
              "updatedAt": "2024-02-27T22:30:20Z"
            }
          ]
        }
      ]
    },
    {
      "number": 69,
      "id": "PR_kwDOJWdxls5oLJ6a",
      "title": "Fill in multiproof feature and  VDAF overview",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/69",
      "state": "MERGED",
      "author": "junyechen1996",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "Reviewer's note: stacked PR on #67 .",
      "createdAt": "2024-02-28T13:44:37Z",
      "updatedAt": "2024-02-29T01:27:12Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "fb6223c0d473b0f5a4d6662d15c9bd6247d87f66",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "junyec/fill-vdaf-overview",
      "headRefOid": "975244054ab41b782b6afbc6f12838d22a217395",
      "closedAt": "2024-02-29T01:27:01Z",
      "mergedAt": "2024-02-29T01:27:01Z",
      "mergedBy": "junyechen1996",
      "mergeCommit": {
        "oid": "6f704c7bd6eaedfc530eab42a2137c3b9081e35f"
      },
      "comments": [
        {
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "body": "It might still be a bit verbose, a lot of it is trying to illustrate how to generate joint randomness. Given how we introduce wraparound and verification joint randomness at the beginning (deriving the parts, and applying them to XOF to obtain the seed), maybe in the intro of sharding and preparation, we just say for example: \"The Client uses the secret shares of the encoded gradient and range-checked norm to generate the wraparound joint randomness\", and omit the details?",
          "createdAt": "2024-02-28T21:11:18Z",
          "updatedAt": "2024-02-28T21:13:10Z"
        },
        {
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "body": "Squashed.",
          "createdAt": "2024-02-29T01:27:11Z",
          "updatedAt": "2024-02-29T01:27:11Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJWdxls5xpJF2",
          "commit": {
            "abbreviatedOid": "376829e"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-02-28T15:44:15Z",
          "updatedAt": "2024-02-28T15:44:15Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJWdxls5xpJoq",
          "commit": {
            "abbreviatedOid": "376829e"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Whoops, I didn't mean to approve yet :(",
          "createdAt": "2024-02-28T15:45:13Z",
          "updatedAt": "2024-02-28T15:45:13Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJWdxls5xpL_4",
          "commit": {
            "abbreviatedOid": "376829e"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "I think the overview of the VDAF is too low-level. Remember: your goal is to teach the reader how the algorithm works, not to specify it.\r\n\r\nWherever possible, I would draw parallels to Prio3. Something like:\r\n> The verification joint randomness is derived similar to the joint randomness in Prio3: each Aggregator applies the XOF to its share of the encoded measurement to derive its \"part\"; and the parts are hashed together, using the XOF once more, to get the seed for deriving the joint randomness itself.\r\n>\r\n> The wraparound joint ranodness is generated in much the same way, except that the only the gradient and the range-checked norm are used to derive the parts. (The rest of the encoded measurement depends on this the wrapparound joint randomness.)",
          "createdAt": "2024-02-28T15:49:18Z",
          "updatedAt": "2024-02-28T18:18:16Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "```suggestion\r\nLike Prio3 {{Section 7.1.2 of !VDAF}}, PINE supports generation and verification of multiple FLPs. The goal is to reduce soundness error (Corollary\r\n```",
              "createdAt": "2024-02-28T15:49:18Z",
              "updatedAt": "2024-02-28T18:18:16Z"
            },
            {
              "originalPosition": 5,
              "body": "I think this should be a subsection of the \"The PINE VDAF\" section. Technically the fact that we run the FLP multiple times in PINE is orthogonal to the details of the FLP.\r\n\r\nIn fact, I don't think we need a section for this. We could just move this paragraph down to the VDAF section.",
              "createdAt": "2024-02-28T15:51:59Z",
              "updatedAt": "2024-02-28T18:18:16Z"
            },
            {
              "originalPosition": 29,
              "body": "Grammar\r\n```suggestion\r\nThis section describes PINE VDAF for {{ROCT23}}, a one-round VDAF with no aggregation parameter. It takes a set of Client gradients expressed as vectors of\r\n```",
              "createdAt": "2024-02-28T15:53:17Z",
              "updatedAt": "2024-02-28T18:18:16Z"
            },
            {
              "originalPosition": 30,
              "body": "```suggestion\r\nfloating point values, and computes an elemen-twise summation of valid gradients\r\n```",
              "createdAt": "2024-02-28T15:53:40Z",
              "updatedAt": "2024-02-28T18:18:16Z"
            },
            {
              "originalPosition": 31,
              "body": "grammar: What is configured by the user parameters, the norm or the gradients?\r\n```suggestion\r\nwith bounded L2-norm, configured by the user parameters in {{pine-user-param}}. The\r\n```",
              "createdAt": "2024-02-28T15:54:10Z",
              "updatedAt": "2024-02-28T18:18:16Z"
            },
            {
              "originalPosition": 35,
              "body": "```suggestion\r\nderived. There are two kinds of joint randomness used:\r\n\r\n* \"Wraparound joint randomness\": This is used to generate the random vectors in\r\n```",
              "createdAt": "2024-02-28T15:54:26Z",
              "updatedAt": "2024-02-28T18:18:16Z"
            },
            {
              "originalPosition": 36,
              "body": "```suggestion\r\n  the wraparound checks that both the Clients and Aggregators need to derive on\r\n```",
              "createdAt": "2024-02-28T15:55:14Z",
              "updatedAt": "2024-02-28T18:18:16Z"
            },
            {
              "originalPosition": 40,
              "body": "A little simpler\r\n```suggestion\r\n* \"Verification joint randomness\": These are the field elements used by the\r\n  Client and Aggregators to evaluate the FLP circuit.\r\n```",
              "createdAt": "2024-02-28T15:56:05Z",
              "updatedAt": "2024-02-28T18:18:16Z"
            },
            {
              "originalPosition": 42,
              "body": "What we mean by \"this computation\" is not clear in context.",
              "createdAt": "2024-02-28T15:56:51Z",
              "updatedAt": "2024-02-28T18:18:16Z"
            },
            {
              "originalPosition": 44,
              "body": "Match the terminology of the VDAF draft\r\n```suggestion\r\nIn order for the Client to shard its gradient into input shares for the\r\n```",
              "createdAt": "2024-02-28T16:00:42Z",
              "updatedAt": "2024-02-28T18:18:16Z"
            },
            {
              "originalPosition": 46,
              "body": "```suggestion\r\nAggregators:\r\n\r\n1. Each Client first encodes its gradient and the range-checked L2-norm results\r\n```",
              "createdAt": "2024-02-28T16:00:53Z",
              "updatedAt": "2024-02-28T18:18:16Z"
            },
            {
              "originalPosition": 48,
              "body": "```suggestion\r\n1. Then it derives the wraparound joint randomness to run the wraparound checks. It\r\n```",
              "createdAt": "2024-02-28T16:01:14Z",
              "updatedAt": "2024-02-28T18:18:16Z"
            },
            {
              "originalPosition": 199,
              "body": "what is the \"hash function\"?",
              "createdAt": "2024-02-28T18:13:46Z",
              "updatedAt": "2024-02-28T18:18:16Z"
            },
            {
              "originalPosition": 210,
              "body": "```suggestion\r\n   run wraparound checks. Each Aggregator derives an XOF seed --- it's wraparound randomness \"part\" --- from its secret\r\n```",
              "createdAt": "2024-02-28T18:14:40Z",
              "updatedAt": "2024-02-28T18:18:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5xsIBI",
          "commit": {
            "abbreviatedOid": "e12c5e0"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "@cjpatton I reworked the overview a bit. Please take a look again.",
          "createdAt": "2024-02-28T20:44:10Z",
          "updatedAt": "2024-02-28T21:07:53Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "The norm.",
              "createdAt": "2024-02-28T20:44:10Z",
              "updatedAt": "2024-02-28T21:07:53Z"
            },
            {
              "originalPosition": 42,
              "body": "I removed this line. It doesn't say much.",
              "createdAt": "2024-02-28T20:44:36Z",
              "updatedAt": "2024-02-28T21:07:53Z"
            },
            {
              "originalPosition": 199,
              "body": "Reworked this paragraph here.",
              "createdAt": "2024-02-28T20:44:59Z",
              "updatedAt": "2024-02-28T21:07:53Z"
            },
            {
              "originalPosition": 210,
              "body": "Reworded this part.",
              "createdAt": "2024-02-28T21:04:42Z",
              "updatedAt": "2024-02-28T21:07:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5xsRNN",
          "commit": {
            "abbreviatedOid": "376829e"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-28T21:08:20Z",
          "updatedAt": "2024-02-28T21:08:20Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Moved it to the VDAF section.",
              "createdAt": "2024-02-28T21:08:20Z",
              "updatedAt": "2024-02-28T21:08:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5xtDe-",
          "commit": {
            "abbreviatedOid": "426eb0c"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-28T23:21:45Z",
          "updatedAt": "2024-02-28T23:30:41Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "```suggestion\r\n  their own. It is generated in much the same way as the verification joint\r\n```",
              "createdAt": "2024-02-28T23:21:46Z",
              "updatedAt": "2024-02-28T23:30:41Z"
            },
            {
              "originalPosition": 39,
              "body": "```suggestion\r\nNext, it derives the wraparound joint randomness for the wraparound\r\n```",
              "createdAt": "2024-02-28T23:22:27Z",
              "updatedAt": "2024-02-28T23:30:41Z"
            },
            {
              "originalPosition": 43,
              "body": "You've already said this above.\r\n```suggestion\r\nchecks as described above. The encoded\r\n```",
              "createdAt": "2024-02-28T23:24:05Z",
              "updatedAt": "2024-02-28T23:30:41Z"
            },
            {
              "originalPosition": 45,
              "body": "```suggestion\r\ninput to the FLP circuit, that will be secret-shared to (1) be sent as input shares\r\n```",
              "createdAt": "2024-02-28T23:25:10Z",
              "updatedAt": "2024-02-28T23:30:41Z"
            },
            {
              "originalPosition": 45,
              "body": "```suggestion\r\ninput to the FLP circuit, that will be secret-shared to (1) be sent as input shares\r\n```",
              "createdAt": "2024-02-28T23:25:37Z",
              "updatedAt": "2024-02-28T23:30:41Z"
            },
            {
              "originalPosition": 48,
              "body": "```suggestion\r\nfor the Aggregators, and (2) derive the verification joint randomness as described above. The proof\r\n```",
              "createdAt": "2024-02-28T23:26:18Z",
              "updatedAt": "2024-02-28T23:30:41Z"
            },
            {
              "originalPosition": 54,
              "body": "```suggestion\r\nshares (the secret shares of the encoded Client gradient), and also reject\r\n```",
              "createdAt": "2024-02-28T23:27:32Z",
              "updatedAt": "2024-02-28T23:30:41Z"
            },
            {
              "originalPosition": 56,
              "body": "Like the last paragraph, avoid saying things twice. Make sure to highlight the differences between what the Client computes versus what each Aggregator computes.",
              "createdAt": "2024-02-28T23:28:22Z",
              "updatedAt": "2024-02-28T23:30:41Z"
            },
            {
              "originalPosition": 60,
              "body": "```suggestion\r\nfor other Aggregators, and also the wraparound joint randomness parts for the\r\n```",
              "createdAt": "2024-02-28T23:28:42Z",
              "updatedAt": "2024-02-28T23:30:41Z"
            },
            {
              "originalPosition": 69,
              "body": "```suggestion\r\nNext, each Aggregator sums up their shares of the encoded gradients and sends the aggregate share to the Collector. Finally, the Collector sums up the\r\n```",
              "createdAt": "2024-02-28T23:29:46Z",
              "updatedAt": "2024-02-28T23:30:41Z"
            },
            {
              "originalPosition": 74,
              "body": "```suggestion\r\nof multiple FLPs. The goal is to improve robustness of PINE (Corollary 3.13 in\r\n```",
              "createdAt": "2024-02-28T23:30:27Z",
              "updatedAt": "2024-02-28T23:30:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5xtdeC",
          "commit": {
            "abbreviatedOid": "426eb0c"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-29T00:56:58Z",
          "updatedAt": "2024-02-29T00:56:59Z",
          "comments": [
            {
              "originalPosition": 56,
              "body": "Done.",
              "createdAt": "2024-02-29T00:56:59Z",
              "updatedAt": "2024-02-29T00:56:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5xth27",
          "commit": {
            "abbreviatedOid": "9752440"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-02-29T01:16:58Z",
          "updatedAt": "2024-02-29T01:26:13Z",
          "comments": []
        }
      ]
    },
    {
      "number": 70,
      "id": "PR_kwDOJWdxls5oO5kt",
      "title": "Move old text it its own file",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/70",
      "state": "MERGED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Keep it for copy-paste value.",
      "createdAt": "2024-02-29T00:15:41Z",
      "updatedAt": "2024-02-29T01:19:04Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "797e5c7b1a76fe448d3b60300dc697eb98938ed0",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "cjpatton/clean-up-1",
      "headRefOid": "cdd4dcb051ef0dec377458f00745bd6c0151ce01",
      "closedAt": "2024-02-29T01:19:04Z",
      "mergedAt": "2024-02-29T01:19:04Z",
      "mergedBy": "cjpatton",
      "mergeCommit": {
        "oid": "fb6223c0d473b0f5a4d6662d15c9bd6247d87f66"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJWdxls5xtd9B",
          "commit": {
            "abbreviatedOid": "cdd4dcb"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-02-29T00:58:51Z",
          "updatedAt": "2024-02-29T00:58:51Z",
          "comments": []
        }
      ]
    },
    {
      "number": 71,
      "id": "PR_kwDOJWdxls5oR80I",
      "title": "Fill the section about encoding wraparound check",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/71",
      "state": "MERGED",
      "author": "junyechen1996",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-02-29T11:09:43Z",
      "updatedAt": "2024-03-01T02:12:53Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "29513dae2b19a108860a800757e9edff32c12d7c",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "junyec/fill-encode-wr-check",
      "headRefOid": "d61c9f1b95d13b68c608b6cedd575fbd8484990f",
      "closedAt": "2024-03-01T02:12:50Z",
      "mergedAt": "2024-03-01T02:12:50Z",
      "mergedBy": "junyechen1996",
      "mergeCommit": {
        "oid": "fa786cc99251d807477301400fd8f343a4380e28"
      },
      "comments": [
        {
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "body": "Squashed.",
          "createdAt": "2024-03-01T02:12:30Z",
          "updatedAt": "2024-03-01T02:12:30Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJWdxls5xww7v",
          "commit": {
            "abbreviatedOid": "289eb60"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-29T11:17:55Z",
          "updatedAt": "2024-02-29T11:22:35Z",
          "comments": [
            {
              "originalPosition": 84,
              "body": "I haven't spelled out the derivation of `wr_check_bound` in this PR.",
              "createdAt": "2024-02-29T11:17:56Z",
              "updatedAt": "2024-02-29T11:22:35Z"
            },
            {
              "originalPosition": 76,
              "body": "This signature matches our reference implementation.",
              "createdAt": "2024-02-29T11:18:11Z",
              "updatedAt": "2024-02-29T11:22:35Z"
            },
            {
              "originalPosition": 90,
              "body": "I moved counting success bits into this section, since it matches our reference implementation. Running wraparound checks should only contain computing the dot products.",
              "createdAt": "2024-02-29T11:18:46Z",
              "updatedAt": "2024-02-29T11:22:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5xyA6K",
          "commit": {
            "abbreviatedOid": "289eb60"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-29T13:49:27Z",
          "updatedAt": "2024-02-29T13:54:50Z",
          "comments": [
            {
              "originalPosition": 34,
              "body": "```suggestion\r\ngenerate the random vectors, the Client needs to run the wraparound check\r\n```",
              "createdAt": "2024-02-29T13:49:28Z",
              "updatedAt": "2024-02-29T13:54:50Z"
            },
            {
              "originalPosition": 43,
              "body": "```suggestion\r\n`num_wr_checks` times. Each wraparound check works as follows.\r\n```",
              "createdAt": "2024-02-29T13:50:01Z",
              "updatedAt": "2024-02-29T13:54:50Z"
            },
            {
              "originalPosition": 13,
              "body": "This basically says the same thing as the \"Range Check\" section below. What is your goal exactly?",
              "createdAt": "2024-02-29T13:54:29Z",
              "updatedAt": "2024-02-29T13:54:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5x1LMF",
          "commit": {
            "abbreviatedOid": "289eb60"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-29T19:59:28Z",
          "updatedAt": "2024-02-29T19:59:28Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "This section is more about Client encoding the range check. While the {{valid-range-check}} talks about what the Aggregator does to verify the range check.",
              "createdAt": "2024-02-29T19:59:28Z",
              "updatedAt": "2024-02-29T19:59:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5x1aAV",
          "commit": {
            "abbreviatedOid": "289eb60"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-29T20:38:17Z",
          "updatedAt": "2024-02-29T20:38:17Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "I cut some texts in {{valid-range-check}}.",
              "createdAt": "2024-02-29T20:38:17Z",
              "updatedAt": "2024-02-29T20:38:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5x2xg6",
          "commit": {
            "abbreviatedOid": "d61c9f1"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-03-01T01:54:37Z",
          "updatedAt": "2024-03-01T02:11:26Z",
          "comments": []
        }
      ]
    },
    {
      "number": 72,
      "id": "PR_kwDOJWdxls5oSBWQ",
      "title": "Clean up some texts for wraparound checks",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/72",
      "state": "MERGED",
      "author": "junyechen1996",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "We have conflicting references of \"wraparound check results\", e.g., \"Encoding range-checked wraparound check results\", which are the bits of the range-checked result in wraparound check, and we also have \"wraparound check results\", that we typically mean the dot products from running wraparound tests.\r\n\r\nHow about we use \"check\" on the entire wraparound \"check\" section, i.e., it is checking for wraparound, similar to L2-norm \"check\". And we also have the quadratic \"check\" and success count \"check\" in wraparound checks.\r\nFor the dot product computation, we will refer to it as wraparound \"test\". I think we already did this in a couple of places, but just weren't consistent about it.",
      "createdAt": "2024-02-29T11:22:19Z",
      "updatedAt": "2024-03-04T15:26:44Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "31126a90c743bf5007ffff50200abd8129f72a23",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "junyec/wr-wording",
      "headRefOid": "6b59a9fd1ad3eb0a829af7a18cf395d28552a7ef",
      "closedAt": "2024-03-04T15:26:42Z",
      "mergedAt": "2024-03-04T15:26:42Z",
      "mergedBy": "junyechen1996",
      "mergeCommit": {
        "oid": "4696aecf3be815d182e5b2aed97e12b9400ca9b5"
      },
      "comments": [
        {
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "body": "@cjpatton If you like this idea, I can make a pass over the variables (mainly `num_wr_checks` -> `num_wr_tests`)  and reference implementations.",
          "createdAt": "2024-02-29T11:23:28Z",
          "updatedAt": "2024-02-29T11:23:28Z"
        },
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "> We have conflicting references of \"wraparound check results\", e.g., \"Encoding range-checked wraparound check results\", which are the bits of the range-checked result in wraparound check, and we also have \"wraparound check results\", that we typically mean the dot products from running wraparound tests.\r\n> \r\n> How about we use \"check\" on the entire wraparound \"check\" section, i.e., it is checking for wraparound, similar to L2-norm \"check\". And we also have the quadratic \"check\" and success count \"check\" in wraparound checks. For the dot product computation, we will refer to it as wraparound \"test\". I think we already did this in a couple of places, but just weren't consistent about it.\r\n\r\nI'd prefer to use one term: either \"check\" or \"test\". Mixing them would be confusing.\r\n\r\nInstead, I think our goal should be to make sure the distinction is clear in context: one is encoded in the in the input (shares), the other is computed from the input (shares).",
          "createdAt": "2024-02-29T13:58:23Z",
          "updatedAt": "2024-02-29T13:58:23Z"
        },
        {
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "body": "> Instead, I think our goal should be to make sure the distinction is clear in context: one is encoded in the in the input (shares), the other is computed from the input (shares).\r\n\r\nGot it. I reworked this PR and tried to clarify the distinction between them.",
          "createdAt": "2024-03-04T10:09:49Z",
          "updatedAt": "2024-03-04T10:09:49Z"
        },
        {
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "body": "Squashed.",
          "createdAt": "2024-03-04T15:26:38Z",
          "updatedAt": "2024-03-04T15:26:38Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJWdxls5yHaMq",
          "commit": {
            "abbreviatedOid": "b2d45cb"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-03-04T15:01:22Z",
          "updatedAt": "2024-03-04T15:01:48Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "```suggestion\r\nthe tuple of range-checked, wraparound check results that will be sent to the\r\n```",
              "createdAt": "2024-03-04T15:01:22Z",
              "updatedAt": "2024-03-04T15:01:48Z"
            }
          ]
        }
      ]
    },
    {
      "number": 73,
      "id": "PR_kwDOJWdxls5oTZ9m",
      "title": "Pass of intro, conventions, and overview",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/73",
      "state": "MERGED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-02-29T14:41:20Z",
      "updatedAt": "2024-02-29T21:26:15Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "cae7b81511ec50ee6e4561b846f704c2ac127201",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "cjpatton/pass-3",
      "headRefOid": "c5f0dae78f8b62dfb49caa2190341b4f46697ddb",
      "closedAt": "2024-02-29T21:26:15Z",
      "mergedAt": "2024-02-29T21:26:15Z",
      "mergedBy": "cjpatton",
      "mergeCommit": {
        "oid": "29513dae2b19a108860a800757e9edff32c12d7c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJWdxls5x1NE_",
          "commit": {
            "abbreviatedOid": "e85b052"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-02-29T20:04:22Z",
          "updatedAt": "2024-02-29T20:05:33Z",
          "comments": [
            {
              "originalPosition": 168,
              "body": "```suggestion\r\n{{ROCT23}} devises a probabilistic test for this purpose. A random vector over\r\n```",
              "createdAt": "2024-02-29T20:04:23Z",
              "updatedAt": "2024-02-29T20:05:33Z"
            }
          ]
        }
      ]
    },
    {
      "number": 74,
      "id": "PR_kwDOJWdxls5ob9kc",
      "title": "Fix an undefined variable in `prep_init()`",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/74",
      "state": "MERGED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Prevented by #75.",
      "createdAt": "2024-03-01T17:56:20Z",
      "updatedAt": "2024-03-02T11:56:33Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "fa786cc99251d807477301400fd8f343a4380e28",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "cjpatton/fix-tests",
      "headRefOid": "e7315f74c3360557e5cb52bfe866decf059428fc",
      "closedAt": "2024-03-02T11:56:33Z",
      "mergedAt": "2024-03-02T11:56:33Z",
      "mergedBy": "junyechen1996",
      "mergeCommit": {
        "oid": "16d7a0cbc544bc09c1dcb88c2d9f018c5ac5d06e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJWdxls5yALLT",
          "commit": {
            "abbreviatedOid": "e7315f7"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-03-02T11:55:39Z",
          "updatedAt": "2024-03-02T11:56:22Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Sorry. I didn't re-run tests because I was finishing the spec in an environment where I don't have Sage :)",
              "createdAt": "2024-03-02T11:55:39Z",
              "updatedAt": "2024-03-02T11:56:22Z"
            }
          ]
        }
      ]
    },
    {
      "number": 76,
      "id": "PR_kwDOJWdxls5ocU06",
      "title": "Add unit tests for wraparound and squared norm bounds",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/76",
      "state": "MERGED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Stacked on #74.\r\n\r\nAlso, clean up the parameters of `PineValid()`.",
      "createdAt": "2024-03-01T19:11:26Z",
      "updatedAt": "2024-03-02T11:57:27Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "cjpatton/fix-tests",
      "baseRefOid": "e7315f74c3360557e5cb52bfe866decf059428fc",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "cjpatton/poc-unit-tests-for-op-params",
      "headRefOid": "87fef535b08f524d59b62f3a164932a734beb718",
      "closedAt": "2024-03-02T11:57:27Z",
      "mergedAt": "2024-03-02T11:57:27Z",
      "mergedBy": "junyechen1996",
      "mergeCommit": {
        "oid": "66e8b6492ea2ba8647afb65896d48463ae10f05d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJWdxls5yALN6",
          "commit": {
            "abbreviatedOid": "87fef53"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-03-02T11:57:18Z",
          "updatedAt": "2024-03-02T11:57:18Z",
          "comments": []
        }
      ]
    },
    {
      "number": 77,
      "id": "PR_kwDOJWdxls5oe3-o",
      "title": "[For main] Add unit tests for wraparound and squared norm bounds",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/77",
      "state": "MERGED",
      "author": "junyechen1996",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-03-02T11:59:05Z",
      "updatedAt": "2024-03-02T12:02:16Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "16d7a0cbc544bc09c1dcb88c2d9f018c5ac5d06e",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "cjpatton/fix-tests",
      "headRefOid": "e3f30682ebcb7966a51e526472d033507e2b7b6e",
      "closedAt": "2024-03-02T12:02:16Z",
      "mergedAt": "2024-03-02T12:02:16Z",
      "mergedBy": "junyechen1996",
      "mergeCommit": {
        "oid": "31126a90c743bf5007ffff50200abd8129f72a23"
      },
      "comments": [
        {
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "body": "I accidentally merged previous PR https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/76 into this branch, so opening another PR to merge it into main.",
          "createdAt": "2024-03-02T12:02:10Z",
          "updatedAt": "2024-03-02T12:02:10Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 78,
      "id": "PR_kwDOJWdxls5omiUk",
      "title": "Field size check for range check and wraparound check",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/78",
      "state": "MERGED",
      "author": "junyechen1996",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-03-04T15:05:04Z",
      "updatedAt": "2024-03-04T20:51:17Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "4696aecf3be815d182e5b2aed97e12b9400ca9b5",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "junyec/field-size-check",
      "headRefOid": "f7a06a7687d4d1b79d41151bd0b8fcf0737108e7",
      "closedAt": "2024-03-04T20:51:15Z",
      "mergedAt": "2024-03-04T20:51:15Z",
      "mergedBy": "junyechen1996",
      "mergeCommit": {
        "oid": "f304b013bfccea483411fc8324b043208541f624"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJWdxls5yHfdq",
          "commit": {
            "abbreviatedOid": "112e631"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-04T15:06:32Z",
          "updatedAt": "2024-03-04T15:06:35Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "nit: Given we seem to use `wr_check_bound + 1` more than `wr_check_bound`, maybe we change the range check bounds for wraparound check to be `[-wr_check_bound + 1, wr_check_bound]`, and avoid the `-1` when we compute it? Currently the `wr_check_bound` is computed as:\r\n\r\n```\r\nself.Field(\r\n            next_power_of_2(math.ceil(alpha * encoded_norm_bound_unsigned) + 1)\r\n            - 1\r\n        )\r\n```\r\n\r\nIt will make this if block a bit cleaner.",
              "createdAt": "2024-03-04T15:06:32Z",
              "updatedAt": "2024-03-04T15:10:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5yINkQ",
          "commit": {
            "abbreviatedOid": "112e631"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-03-04T16:23:43Z",
          "updatedAt": "2024-03-04T16:23:46Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "That sounds fine. You may need to end up some unit tests?",
              "createdAt": "2024-03-04T16:23:43Z",
              "updatedAt": "2024-03-04T16:23:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5yJJIe",
          "commit": {
            "abbreviatedOid": "112e631"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-04T18:22:02Z",
          "updatedAt": "2024-03-04T18:22:03Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "I made this change, and added some unit tests.",
              "createdAt": "2024-03-04T18:22:03Z",
              "updatedAt": "2024-03-04T18:22:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5yKVQ7",
          "commit": {
            "abbreviatedOid": "f7a06a7"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-03-04T20:49:38Z",
          "updatedAt": "2024-03-04T20:49:38Z",
          "comments": []
        }
      ]
    },
    {
      "number": 79,
      "id": "PR_kwDOJWdxls5ooy0X",
      "title": "Ack Guy and Kunal",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/79",
      "state": "MERGED",
      "author": "junyechen1996",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-03-04T20:50:11Z",
      "updatedAt": "2024-03-04T20:51:36Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "4696aecf3be815d182e5b2aed97e12b9400ca9b5",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "junyec/ack",
      "headRefOid": "f6a8c8120742f067dad11b567957b0c8272a00ba",
      "closedAt": "2024-03-04T20:51:34Z",
      "mergedAt": "2024-03-04T20:51:34Z",
      "mergedBy": "junyechen1996",
      "mergeCommit": {
        "oid": "3e3bff0de25b5b9fbb5b099a09ae00dc18e7a281"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJWdxls5yKVrD",
          "commit": {
            "abbreviatedOid": "f6a8c81"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-03-04T20:50:48Z",
          "updatedAt": "2024-03-04T20:50:48Z",
          "comments": []
        }
      ]
    },
    {
      "number": 80,
      "id": "PR_kwDOJWdxls5pBBrx",
      "title": "flp: Unify computation of bit length for range checks",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/80",
      "state": "MERGED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The number of bits for each range check is equal to the number of bits required the number of possible values.",
      "createdAt": "2024-03-07T21:03:22Z",
      "updatedAt": "2024-03-07T21:28:09Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "f71ddd11cacb0079733c3c84911fdb472cb30edd",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "cjpatton/cleanup",
      "headRefOid": "5c28a6e041203b652ff74f37051ecad036144199",
      "closedAt": "2024-03-07T21:28:09Z",
      "mergedAt": "2024-03-07T21:28:09Z",
      "mergedBy": "cjpatton",
      "mergeCommit": {
        "oid": "998a0a5c43aee00125369b65182ad311ce1fb548"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJWdxls5yp02n",
          "commit": {
            "abbreviatedOid": "8e5f378"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-03-07T21:17:03Z",
          "updatedAt": "2024-03-07T21:18:10Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "There should be some places in the draft that also has `encoded_sq_norm_bound`, can you change those too?",
              "createdAt": "2024-03-07T21:17:03Z",
              "updatedAt": "2024-03-07T21:18:10Z"
            },
            {
              "originalPosition": 84,
              "body": "An alternative is to use `bit_length()` in python. I learned that from David when I implemented `MultiHotHistogram`: https://github.com/cfrg/draft-irtf-cfrg-vdaf/blob/main/poc/flp_generic.py#L699",
              "createdAt": "2024-03-07T21:17:41Z",
              "updatedAt": "2024-03-07T21:18:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5yp4gw",
          "commit": {
            "abbreviatedOid": "8e5f378"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-07T21:24:53Z",
          "updatedAt": "2024-03-07T21:24:53Z",
          "comments": [
            {
              "originalPosition": 84,
              "body": "Done!",
              "createdAt": "2024-03-07T21:24:53Z",
              "updatedAt": "2024-03-07T21:24:53Z"
            }
          ]
        }
      ]
    },
    {
      "number": 81,
      "id": "PR_kwDOJWdxls5pNq67",
      "title": "Improve wraparound check parameter search",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/81",
      "state": "MERGED",
      "author": "junyechen1996",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "The improvements come as:\r\n- We now look for the smallest r_succ that satisfies soundness, then searches for alpha (if possible) that can satisfy ZK.\r\n- Then combine with dimension to compute the number of proofs to satisfy the overall soundness.\r\n\r\nTurns out with num_frac_bits = 24, neither Field56, nor Field48 can satisfy the field size requirement in wraparound checks.",
      "createdAt": "2024-03-11T08:52:56Z",
      "updatedAt": "2024-04-10T09:01:21Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "998a0a5c43aee00125369b65182ad311ce1fb548",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "junyec/improve-wr-param-search",
      "headRefOid": "d8d51e368af5cf874ebd3359ee1832c7658d37c2",
      "closedAt": "2024-04-10T09:01:19Z",
      "mergedAt": "2024-04-10T09:01:19Z",
      "mergedBy": "junyechen1996",
      "mergeCommit": {
        "oid": "f803bb9034a4ed6f85b9ef37180ae07ffcaebb6f"
      },
      "comments": [
        {
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "body": "Even with `r = 1500`, we cannot find possible `alpha` that can satisfy 2^-100 ZK error for Field48 and Field56, when `num_frac_bits = 24`, but it's possible for `num_frac_bits = 15`, \r\n\r\n```\r\n|r         |r_succ    |l2_norm   |frac_bits |field     |-log2(eta)     |-log2(zk)      |-log2(sound)   |overhead  |alpha               |\r\n|:---------|:---------|:---------|:---------|:---------|:--------------|:--------------|:--------------|:---------|:-------------------|\r\n|1500      |971       |1         |15        |Field48   |3              |376            |99             |27000     |1.6920026163616637  |\r\n|1500      |971       |1         |15        |Field56   |3              |376            |99             |27000     |1.6920026163616637  |\r\n|1500      |971       |1         |15        |Field64   |3              |376            |99             |27000     |1.6920026163616637  |\r\n|1500      |971       |1         |24        |Field64   |3              |376            |99             |40500     |1.6920026163616637  |\r\n|1500      |971       |1         |15        |Field128  |3              |376            |99             |27000     |1.6920026163616637  |\r\n|1500      |971       |1         |24        |Field128  |3              |376            |99             |40500     |1.6920026163616637  |\r\n```",
          "createdAt": "2024-03-11T08:54:26Z",
          "updatedAt": "2024-03-11T08:54:26Z"
        },
        {
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "body": "With `num_frac_bits = 20`, `Field56`, there are some interesting outputs (`num_wr_successes < num_wr_checks`):\r\n\r\n```\r\nParameters to satisfy 2^-100 soundness and 2^-100 ZK error\r\nFailed to find alpha in [0.8325546111576977, 10.0] with any combination of num_wr_checks and num_wr_successes, for user parameters l2_norm_bound = 1, num_frac_bits = 20, field = Field48.\r\nDisplaying feasible set of wraparound check and user parameters:\r\n|l2_norm   |frac_bits |field     |num_wr_checks  |num_wr_successes    |alpha               |-log2(eta)     |-log2(zk)      |-log2(sound)   |overhead  |\r\n|:---------|:---------|:---------|:--------------|:-------------------|:-------------------|:--------------|:--------------|:--------------|:---------|\r\n|1         |15        |Field48   |100            |100                 |8.639207325093722   |106            |99             |100            |2100      |\r\n|1         |15        |Field56   |100            |100                 |8.639207325093722   |106            |99             |100            |2100      |\r\n|1         |20        |Field56   |150            |140                 |3.2676572925689347  |14             |100            |99             |3600      |\r\n|1         |15        |Field64   |100            |100                 |8.639207325093722   |106            |99             |100            |2100      |\r\n|1         |20        |Field64   |100            |100                 |8.639207325093722   |106            |99             |100            |2600      |\r\n|1         |24        |Field64   |100            |100                 |8.639207325093722   |106            |99             |100            |3000      |\r\n|1         |15        |Field128  |100            |100                 |8.639207325093722   |106            |99             |100            |2100      |\r\n|1         |20        |Field128  |100            |100                 |8.639207325093722   |106            |99             |100            |2600      |\r\n|1         |24        |Field128  |100            |100                 |8.639207325093722   |106            |99             |100            |3000      |\r\n\r\nDisplaying full VDAF parameters:\r\n|l2_norm   |frac_bits |dimension |chunk_len |field     |proofs    |num_wr_checks  |num_wr_successes    |-log2(zk) |-log2(sound)        |\r\n|:---------|:---------|:---------|:---------|:---------|:---------|:--------------|:-------------------|:---------|:-------------------|\r\n|1         |15        |1000      |57        |Field48   |3         |100            |100                 |99        |99                  |\r\n|1         |15        |10000     |110       |Field48   |3         |100            |100                 |99        |99                  |\r\n|1         |15        |100000    |319       |Field48   |3         |100            |100                 |99        |99                  |\r\n|1         |15        |1000      |57        |Field56   |3         |100            |100                 |99        |99                  |\r\n|1         |15        |10000     |110       |Field56   |3         |100            |100                 |99        |99                  |\r\n|1         |15        |100000    |319       |Field56   |3         |100            |100                 |99        |99                  |\r\n|1         |20        |1000      |69        |Field56   |3         |150            |140                 |100       |99                  |\r\n|1         |20        |10000     |117       |Field56   |3         |150            |140                 |100       |99                  |\r\n|1         |20        |100000    |322       |Field56   |3         |150            |140                 |100       |99                  |\r\n|1         |15        |1000      |57        |Field64   |2         |100            |100                 |99        |99                  |\r\n|1         |15        |10000     |110       |Field64   |2         |100            |100                 |99        |99                  |\r\n|1         |15        |100000    |319       |Field64   |2         |100            |100                 |99        |99                  |\r\n|1         |20        |1000      |61        |Field64   |2         |100            |100                 |99        |99                  |\r\n|1         |20        |10000     |113       |Field64   |2         |100            |100                 |99        |99                  |\r\n|1         |20        |100000    |320       |Field64   |2         |100            |100                 |99        |99                  |\r\n|1         |24        |1000      |64        |Field64   |2         |100            |100                 |99        |99                  |\r\n|1         |24        |10000     |114       |Field64   |2         |100            |100                 |99        |99                  |\r\n|1         |24        |100000    |321       |Field64   |2         |100            |100                 |99        |99                  |\r\n|1         |15        |1000      |57        |Field128  |1         |100            |100                 |99        |99                  |\r\n|1         |15        |10000     |110       |Field128  |1         |100            |100                 |99        |99                  |\r\n|1         |15        |100000    |319       |Field128  |1         |100            |100                 |99        |99                  |\r\n|1         |20        |1000      |61        |Field128  |1         |100            |100                 |99        |99                  |\r\n|1         |20        |10000     |113       |Field128  |1         |100            |100                 |99        |99                  |\r\n|1         |20        |100000    |320       |Field128  |1         |100            |100                 |99        |99                  |\r\n|1         |24        |1000      |64        |Field128  |1         |100            |100                 |99        |99                  |\r\n|1         |24        |10000     |114       |Field128  |1         |100            |100                 |99        |99                  |\r\n|1         |24        |100000    |321       |Field128  |1         |100            |100                 |99        |99                  |\r\n```\r\n",
          "createdAt": "2024-03-22T11:57:32Z",
          "updatedAt": "2024-03-22T11:57:32Z"
        },
        {
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "body": "Open thread: https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/81#discussion_r1555717886. Not sure why after computing `GF(Field48.MODULUS)`, initializing a `Field` from an integer always makes `Field.val` be 0.",
          "createdAt": "2024-04-08T13:35:00Z",
          "updatedAt": "2024-04-08T13:35:00Z"
        },
        {
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "body": "Squashed.",
          "createdAt": "2024-04-09T21:14:39Z",
          "updatedAt": "2024-04-09T21:14:39Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJWdxls5zIWU9",
          "commit": {
            "abbreviatedOid": "33e57e2"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "I haven't worked my way through the code all the way yet, but I have a lot of comments and wanted to pause here. Two high level things:\r\n\r\n1. The code interleaves pretty printing with the actual logic for computing the parameters. It would be better if the parameters were computed first and stored in some data structure, then the data structure gets printted. That way the reader isn't distracted by irrelevant code.\r\n2. Let's get rid of the code for generating CSV. Note that I had suggested in an earlier PR that this might be more useful than pretty printing: I meant that we should do one or the other, not both. Let's wait to write code until we need it. If you prefer pretty printing, let's go with that.",
          "createdAt": "2024-03-12T16:25:24Z",
          "updatedAt": "2024-03-20T23:24:01Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "what does \"pmf\" stand for? (Document it.)",
              "createdAt": "2024-03-12T16:25:24Z",
              "updatedAt": "2024-03-20T23:24:01Z"
            },
            {
              "originalPosition": 26,
              "body": "what happens?\r\n\r\nYou might try `alpha^2`, i.e., replace the Python `**` operator with the Sage `^` operator.",
              "createdAt": "2024-03-20T22:18:24Z",
              "updatedAt": "2024-03-20T23:24:01Z"
            },
            {
              "originalPosition": 547,
              "body": "```suggestion\r\n# Field size, l2_norm_bound, and num_frac_bits affect the choice of wraparound\r\n```",
              "createdAt": "2024-03-20T22:28:37Z",
              "updatedAt": "2024-03-20T23:24:01Z"
            },
            {
              "originalPosition": 552,
              "body": "I would compute this by constructing`PineValid()` like we do elsewhere.",
              "createdAt": "2024-03-20T22:30:37Z",
              "updatedAt": "2024-03-20T23:24:01Z"
            },
            {
              "originalPosition": 556,
              "body": "More readable\r\n```suggestion\r\n        if field.MODULUS / 2 < encoded_norm_bound * max_num_clients:\r\n```",
              "createdAt": "2024-03-20T22:31:31Z",
              "updatedAt": "2024-03-20T23:24:01Z"
            },
            {
              "originalPosition": 544,
              "body": "Add a comment here to summarize what it is we want to assess.",
              "createdAt": "2024-03-20T22:34:33Z",
              "updatedAt": "2024-03-20T23:24:01Z"
            },
            {
              "originalPosition": 566,
              "body": "Add a comment here explaining what we're computing (the user parameters).",
              "createdAt": "2024-03-20T22:34:48Z",
              "updatedAt": "2024-03-20T23:24:01Z"
            },
            {
              "originalPosition": 565,
              "body": "Add a comment explaining what this is.",
              "createdAt": "2024-03-20T22:38:20Z",
              "updatedAt": "2024-03-20T23:24:01Z"
            },
            {
              "originalPosition": 580,
              "body": "Equivalent and more clear.\r\n```suggestion\r\n                        max_num_wr_checks,\r\n                        num_wr_checks_step)\r\n```",
              "createdAt": "2024-03-20T22:38:54Z",
              "updatedAt": "2024-03-20T23:24:01Z"
            },
            {
              "originalPosition": 533,
              "body": "This is really icky because we're not doing arithmetic in the right field. I think we should just pick candidate moduli for Field48 and Field64. Fortunately this is really easy with sage:\r\n```\r\n*[junyec/improve-wr-param-search][~/github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/poc]$ sage\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 SageMath version 9.8, Release Date: 2023-02-11                     \u2502\r\n\u2502 Using Python 3.11.1. Type \"help()\" for help.                       \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\nsage: 2^48.previous_prime()\r\n140737488355328\r\n```\r\n\r\nNote: more than likely this won't work for FLP, as we need to find a prime that is \"special\" (i.e., FFT-friendly). But it's good enough for now.",
              "createdAt": "2024-03-20T22:44:45Z",
              "updatedAt": "2024-03-20T23:24:01Z"
            },
            {
              "originalPosition": 575,
              "body": "Is this function really displaying \"user params\"? Note that there are two tables of output.",
              "createdAt": "2024-03-20T22:46:19Z",
              "updatedAt": "2024-03-20T23:24:01Z"
            },
            {
              "originalPosition": 302,
              "body": "Dimensions are also part of the user parameters, right?",
              "createdAt": "2024-03-20T22:47:26Z",
              "updatedAt": "2024-03-20T23:24:01Z"
            },
            {
              "originalPosition": 306,
              "body": "We might as well match the variable names used in the spec. Here and elsewhere.\r\n```suggestion\r\n      check parameters (if possible): `num_wr_checks` (the number of wraparound checks),\r\n      `num_wr_successes` (the number of successful wraparound checks), `alpha`.\r\n```",
              "createdAt": "2024-03-20T22:48:38Z",
              "updatedAt": "2024-03-20T23:24:01Z"
            },
            {
              "originalPosition": 297,
              "body": "Don't specify defaults if they're not exercised. Otherwise we're likely to create code rot.\r\n```suggestion\r\n                        max_num_wr_checks,\r\n                        num_wr_checks_step):\r\n```",
              "createdAt": "2024-03-20T22:55:16Z",
              "updatedAt": "2024-03-20T23:24:01Z"
            },
            {
              "originalPosition": 118,
              "body": "```suggestion\r\n      encode the wraparound check results. We pick the combination that gives the\r\n```",
              "createdAt": "2024-03-20T23:01:44Z",
              "updatedAt": "2024-03-20T23:24:01Z"
            },
            {
              "originalPosition": 122,
              "body": "```suggestion\r\n    # Global max `alpha`. This ensures a sufficiently low ZK error for all user parameters.\r\n```",
              "createdAt": "2024-03-20T23:05:29Z",
              "updatedAt": "2024-03-20T23:24:01Z"
            },
            {
              "originalPosition": 125,
              "body": "Why would this be a problem?",
              "createdAt": "2024-03-20T23:09:48Z",
              "updatedAt": "2024-03-20T23:24:01Z"
            },
            {
              "originalPosition": 78,
              "body": "```suggestion\r\ndef search_r_succ(target_soundness_bits, r):\r\n    '''\r\n    What does this thing do?\r\n    '''\r\n    prob = 0\r\n```",
              "createdAt": "2024-03-20T23:14:58Z",
              "updatedAt": "2024-03-20T23:24:01Z"
            },
            {
              "originalPosition": 90,
              "body": "```suggestion\r\n    # The code should never reach this point unless `target_soundness_bits` is 0, i.e., no\r\n```",
              "createdAt": "2024-03-20T23:16:42Z",
              "updatedAt": "2024-03-20T23:24:01Z"
            },
            {
              "originalPosition": 93,
              "body": "If that's true, then it is probably more appropriate to panic here.\r\n```suggestion\r\n    raise SomeKindOfException\r\n```",
              "createdAt": "2024-03-20T23:17:05Z",
              "updatedAt": "2024-03-20T23:24:01Z"
            },
            {
              "originalPosition": 80,
              "body": "I think I see what's going on here, but this is very hard to read. In this program we want to optimize for readability rather than performance. Let's just call `wr_sound()` and simplify accordingly.",
              "createdAt": "2024-03-20T23:22:11Z",
              "updatedAt": "2024-03-20T23:24:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls50ZV-m",
          "commit": {
            "abbreviatedOid": "f3a30bd"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "I refactored the code more based on the feedbacks:\r\n\r\n- I decoupled the search logic and printing logic, so now there are two functions that do the searching: `search_wr_params` and `search_vdaf_params` (not sure about the name of the second one, it's basically computing the number of proofs for FLP soundness), and for printing: `display_wr_params` and `display_vdaf_params`.\r\n- I won't compute the `max_alpha` given Lemma 3.3. Instead I used a fixed `max_alpha`, e.g., 10, and then do the binary searching of `alpha` between `min_alpha` and `max_alpha`, and delegate the field size checking of each `alpha` to `PineValid.__init__`. This makes the program a little more inefficient, but a lot cleaner, since we can leave Lemma 3.3 logic in `PineValid.__init__` completely.\r\n- Removed `bin_pmf`, instead I binary search `num_wr_successes`. This still runs reasonably fast.\r\n- Added more code comments.\r\n\r\nI squashed commits, since reviewing the new diff on top of the initial diff might get really confusing.",
          "createdAt": "2024-03-21T16:45:01Z",
          "updatedAt": "2024-03-22T11:56:07Z",
          "comments": [
            {
              "originalPosition": 125,
              "body": "`eta` is a probability itself, and shouldn't be greater than 1. Added a comment here.",
              "createdAt": "2024-03-21T16:45:01Z",
              "updatedAt": "2024-03-22T11:56:07Z"
            },
            {
              "originalPosition": 8,
              "body": "Removed this part to address the comment [here](https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/81/files#r1533036224).",
              "createdAt": "2024-03-22T10:54:56Z",
              "updatedAt": "2024-03-22T11:56:07Z"
            },
            {
              "originalPosition": 80,
              "body": "Removed this part. I used a binary search to find `num_wr_succcesses`. it should be reasonably fast.",
              "createdAt": "2024-03-22T10:55:25Z",
              "updatedAt": "2024-03-22T11:56:07Z"
            },
            {
              "originalPosition": 302,
              "body": "I put a dummy `dimension` in `user_params` now, so we are consistent with what are included in user parameters.",
              "createdAt": "2024-03-22T10:55:56Z",
              "updatedAt": "2024-03-22T11:56:07Z"
            },
            {
              "originalPosition": 533,
              "body": "Thanks. Added a comment here.",
              "createdAt": "2024-03-22T10:57:01Z",
              "updatedAt": "2024-03-22T11:56:07Z"
            },
            {
              "originalPosition": 575,
              "body": "I renamed `display_user_params` to `display_vdaf_params`, i.e., the full VDAF parameters for PINE (still not sure if this is the best name, or maybe `display_all_params`?).",
              "createdAt": "2024-03-22T11:03:05Z",
              "updatedAt": "2024-03-22T11:56:07Z"
            },
            {
              "originalPosition": 26,
              "body": "I just tried, it still gives me this error:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/Users/junyec/Desktop/dedisco_v2/draft-chen-cfrg-vdaf-pine/poc/find_wr_params.sage.py\", line 486, in <module>\r\n    wr_and_user_params = search_wr_params(target_bits,\r\n                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Users/junyec/Desktop/dedisco_v2/draft-chen-cfrg-vdaf-pine/poc/find_wr_params.sage.py\", line 177, in search_wr_params\r\n    if (bits_of_security(zk(num_wr_checks, num_wr_successes, eta)) <\r\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Users/junyec/Desktop/dedisco_v2/draft-chen-cfrg-vdaf-pine/poc/find_wr_params.sage.py\", line 85, in bits_of_security\r\n    return floor(-log(x)/log(_sage_const_2 ))\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/private/var/tmp/sage-10.1-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/functions/other.py\", line 595, in __call__\r\n    return _eval_floor_ceil(self, x, \"floor\", **kwds)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/private/var/tmp/sage-10.1-current/local/var/lib/sage/venv-python3.11.1/lib/python3.11/site-packages/sage/functions/other.py\", line 273, in _eval_floor_ceil\r\n    a = getattr(y_interval.lower(), method)()\r\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"sage/rings/real_mpfr.pyx\", line 3037, in sage.rings.real_mpfr.RealNumber.floor (build/cythonized/sage/rings/real_mpfr.c:23053)\r\nValueError: Calling floor() on infinity or NaN\r\n```",
              "createdAt": "2024-03-22T11:33:01Z",
              "updatedAt": "2024-03-22T11:56:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls51j6ZU",
          "commit": {
            "abbreviatedOid": "f3a30bd"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Huge improvement, thanks for the hard work. One blocking change request, which is to preoprly compute `Field48.gf` (likewise for `Field56.gf`).",
          "createdAt": "2024-04-01T23:37:48Z",
          "updatedAt": "2024-04-02T00:14:41Z",
          "comments": [
            {
              "originalPosition": 620,
              "body": "What's the \"aggregation requirement\"?",
              "createdAt": "2024-04-01T23:37:49Z",
              "updatedAt": "2024-04-02T00:14:41Z"
            },
            {
              "originalPosition": 604,
              "body": "Likewise below.\r\n```suggestion\r\n    gf = GF(MODULUS)\r\n```",
              "createdAt": "2024-04-01T23:44:05Z",
              "updatedAt": "2024-04-02T00:14:41Z"
            },
            {
              "originalPosition": 658,
              "body": "To what extent is this true? The higher the dimension, the more gadget calls? When we tuned the field size / number of proofs in https://github.com/cfrg/draft-irtf-cfrg-vdaf/issues/311, we ended up with a recommendation that does not consider the number of gadget calls. Is there anything about PINE that would lead us to a different conclusion?",
              "createdAt": "2024-04-01T23:53:03Z",
              "updatedAt": "2024-04-02T00:14:41Z"
            },
            {
              "originalPosition": 151,
              "body": "I'd add an assertion here that `min_alpha <= max_alpha`.",
              "createdAt": "2024-04-01T23:58:19Z",
              "updatedAt": "2024-04-02T00:14:41Z"
            },
            {
              "originalPosition": 157,
              "body": "Not immediately obvious to the reader why this `range()` is valid. (Answer: one more wraparound check results in one additional bit of soundness?)",
              "createdAt": "2024-04-02T00:00:04Z",
              "updatedAt": "2024-04-02T00:14:41Z"
            },
            {
              "originalPosition": 102,
              "body": "Do we ever expect the search space to be large, say millions of possible values? If not, I'd suggest making this iterative so that it's easier to read.",
              "createdAt": "2024-04-02T00:03:42Z",
              "updatedAt": "2024-04-02T00:14:41Z"
            },
            {
              "originalPosition": 165,
              "body": "It's good hygiene to name anonymous variables so that the reader knows what's being unpacked. (Replace \"thing\" with whatever this variable actually is.)\r\n```suggestion\r\n    for (l2_norm_bound, num_frac_bits, _thing, field) in user_params:\r\n```",
              "createdAt": "2024-04-02T00:07:19Z",
              "updatedAt": "2024-04-02T00:14:41Z"
            },
            {
              "originalPosition": 182,
              "body": "There are two binary searches in this program. Consider refactoring so that they use the same function.",
              "createdAt": "2024-04-02T00:09:39Z",
              "updatedAt": "2024-04-02T00:14:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls52Y4V3",
          "commit": {
            "abbreviatedOid": "f3a30bd"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-08T12:14:10Z",
          "updatedAt": "2024-04-08T13:33:53Z",
          "comments": [
            {
              "originalPosition": 604,
              "body": "I tried that for Field48 for example. And it fails with this assertion:\r\n\r\n```\r\nval = Field48(2**15)\r\nassert 2**15 == val.as_unsigned()\r\n```\r\n\r\nI checked the `val` property in `Field` becomes 0, after computing `self.gf(val)`. Any idea?",
              "createdAt": "2024-04-08T12:14:10Z",
              "updatedAt": "2024-04-08T13:33:53Z"
            },
            {
              "originalPosition": 658,
              "body": "How about we fix a max dimension we will use for PINE, and recommend number of proofs based on that?",
              "createdAt": "2024-04-08T12:17:31Z",
              "updatedAt": "2024-04-08T13:33:53Z"
            },
            {
              "originalPosition": 604,
              "body": "Side note: I don't think the initializer is performing any field operations, e.g. the computation of `sq_norm_bound`, etc.",
              "createdAt": "2024-04-08T12:31:52Z",
              "updatedAt": "2024-04-08T13:33:53Z"
            },
            {
              "originalPosition": 102,
              "body": "Changed it to linear search, and reduced max_num_wr_checks to 1000, so the runtime is still acceptable.",
              "createdAt": "2024-04-08T13:29:37Z",
              "updatedAt": "2024-04-08T13:33:53Z"
            },
            {
              "originalPosition": 182,
              "body": "I changed `search_num_wr_successes` to linear search. Having binary search for alpha helps with performance more if the alpha step is 0.1.",
              "createdAt": "2024-04-08T13:30:38Z",
              "updatedAt": "2024-04-08T13:33:53Z"
            },
            {
              "originalPosition": 620,
              "body": "Added comments here.",
              "createdAt": "2024-04-08T13:32:34Z",
              "updatedAt": "2024-04-08T13:33:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls52kL06",
          "commit": {
            "abbreviatedOid": "bd33974"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-09T14:22:06Z",
          "updatedAt": "2024-04-09T14:34:13Z",
          "comments": [
            {
              "originalPosition": 588,
              "body": "```suggestion\r\n    gf = GF(MODULUS)\r\n```",
              "createdAt": "2024-04-09T14:22:06Z",
              "updatedAt": "2024-04-09T14:34:13Z"
            },
            {
              "originalPosition": 597,
              "body": "```suggestion\r\n    gf = GF(MODULUS)\r\n```",
              "createdAt": "2024-04-09T14:22:18Z",
              "updatedAt": "2024-04-09T14:34:13Z"
            },
            {
              "originalPosition": 658,
              "body": "That sounds reasonable.",
              "createdAt": "2024-04-09T14:23:45Z",
              "updatedAt": "2024-04-09T14:34:13Z"
            },
            {
              "originalPosition": 604,
              "body": "Well this was a pretty fun bug!\r\n```\r\nsage: GF(2^48.previous_prime())\r\nFinite Field in z47 of size 2^47\r\nsage: GF((2^48).previous_prime())\r\nFinite Field of size 281474976710597\r\n```\r\nIt turns out that `2^48.previous_prime()` is evaluated as `2^(48.previous_prime()) == 2^47`. In fact, `GF(2^47)` is a finite field, just not a prime order finite field, which we need.\r\n\r\n`2**15` is represented as `0` in this field:\r\n\r\n```\r\nsage: f = GF(2^48.previous_prime())\r\nsage: f(0)\r\n0\r\nsage: f(1)\r\n1\r\nsage: f(2)\r\n0\r\nsage: f(3)\r\n1\r\nsage: f(2**15)\r\n0\r\n```",
              "createdAt": "2024-04-09T14:32:32Z",
              "updatedAt": "2024-04-09T14:34:13Z"
            },
            {
              "originalPosition": 604,
              "body": "`GF(2^47)` is known as an extension field. Its elements are actually represented as polynomials. I think what sage is doing is interpreting the input as the coefficient of a degree-0 polynomial in the field.",
              "createdAt": "2024-04-09T14:33:41Z",
              "updatedAt": "2024-04-09T14:34:13Z"
            },
            {
              "originalPosition": 606,
              "body": "```suggestion\r\n    gf = GF(MODULUS)\r\n```",
              "createdAt": "2024-04-09T14:34:09Z",
              "updatedAt": "2024-04-09T14:34:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls52kV9k",
          "commit": {
            "abbreviatedOid": "f3a30bd"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-09T14:35:13Z",
          "updatedAt": "2024-04-09T14:35:13Z",
          "comments": [
            {
              "originalPosition": 604,
              "body": "By the way, feel free to just not define `gf` ... that way the code fails noisily if we try to use it as a fully fledged field.",
              "createdAt": "2024-04-09T14:35:13Z",
              "updatedAt": "2024-04-09T14:35:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls52k-5z",
          "commit": {
            "abbreviatedOid": "f3a30bd"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-09T15:32:00Z",
          "updatedAt": "2024-04-09T15:32:01Z",
          "comments": [
            {
              "originalPosition": 604,
              "body": "Good catch, thanks! Not defining `gf` will not let me instantiate a field element from an integer though.",
              "createdAt": "2024-04-09T15:32:00Z",
              "updatedAt": "2024-04-09T15:32:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls52lPH9",
          "commit": {
            "abbreviatedOid": "f3a30bd"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-09T15:59:43Z",
          "updatedAt": "2024-04-09T15:59:43Z",
          "comments": [
            {
              "originalPosition": 604,
              "body": "It seemed to have changed the results too. It seems that for Field48 and above, we can just use a large alpha (e.g. 8.63), and for Field40, alpha is 1.90, num_wr_checks = 450, and num_wr_successes = 344.",
              "createdAt": "2024-04-09T15:59:43Z",
              "updatedAt": "2024-04-09T21:15:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls52lP_Q",
          "commit": {
            "abbreviatedOid": "a927069"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-04-09T16:00:49Z",
          "updatedAt": "2024-04-09T16:00:53Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "We could use [this field](https://github.com/divviup/libprio-rs/blob/bc8c3ec5feed9c6f68f113d148eff2788354d346/src/fp.rs#L346), which is known to be FFT-friendly. (It's the field used by Prio2.)",
              "createdAt": "2024-04-09T16:00:49Z",
              "updatedAt": "2024-04-09T16:00:53Z"
            }
          ]
        }
      ]
    },
    {
      "number": 82,
      "id": "PR_kwDOJWdxls5uClDx",
      "title": "Better field size requirement for wraparound check",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/82",
      "state": "MERGED",
      "author": "junyechen1996",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-04-29T17:05:59Z",
      "updatedAt": "2024-06-12T21:52:44Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "f803bb9034a4ed6f85b9ef37180ae07ffcaebb6f",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "junyec/wr-check-field-req",
      "headRefOid": "b88baf36fb6d7b9a3f98e1b0cdf99288b7c5eef4",
      "closedAt": "2024-06-11T22:47:58Z",
      "mergedAt": "2024-06-11T22:47:58Z",
      "mergedBy": "cjpatton",
      "mergeCommit": {
        "oid": "c12e02ae82ee20c4d1512d779d17bef444284e99"
      },
      "comments": [
        {
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "body": "Sorry @cjpatton the email notification slipped and I didn't address your comments completely. Please take a look at this thread again: https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/82#discussion_r1585306536. Thanks.",
          "createdAt": "2024-05-08T19:34:24Z",
          "updatedAt": "2024-05-08T19:34:24Z"
        },
        {
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "body": "Will merge it once the new version of the paper is officially on arxiv. ",
          "createdAt": "2024-05-08T20:40:19Z",
          "updatedAt": "2024-05-08T20:40:19Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJWdxls548Usd",
          "commit": {
            "abbreviatedOid": "c397c0b"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-29T17:06:38Z",
          "updatedAt": "2024-04-29T17:07:04Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "Decreasing it since it gives the same number of decimal digits as `num_frac_bits = 15`.",
              "createdAt": "2024-04-29T17:06:38Z",
              "updatedAt": "2024-04-29T17:07:04Z"
            },
            {
              "originalPosition": 5,
              "body": "Decreasing it so that `Field32` could theoretically work.",
              "createdAt": "2024-04-29T17:06:56Z",
              "updatedAt": "2024-04-29T17:07:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls54_t81",
          "commit": {
            "abbreviatedOid": "c397c0b"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-30T00:27:48Z",
          "updatedAt": "2024-04-30T00:27:52Z",
          "comments": [
            {
              "originalPosition": 3,
              "body": "Don't forget to update the comment above.",
              "createdAt": "2024-04-30T00:27:49Z",
              "updatedAt": "2024-04-30T00:27:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls55IKt9",
          "commit": {
            "abbreviatedOid": "c397c0b"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2024-04-30T18:24:03Z",
          "updatedAt": "2024-04-30T18:24:20Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "I'm not sure the math is correct. Expressing things in terms of $\\alpha$ and the bound $B$, we want:\r\n$q \\geq \\frac{B \\alpha^2}{4000}$, $q \\geq 2600 \\alpha \\sqrt{B}$, and $q \\geq 2r$.",
              "createdAt": "2024-04-30T18:24:03Z",
              "updatedAt": "2024-04-30T18:24:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls55NMrO",
          "commit": {
            "abbreviatedOid": "c397c0b"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-01T11:55:16Z",
          "updatedAt": "2024-05-01T11:55:16Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "Updated comments. I believe this is correct, so we fail if either fails:\r\n\r\n- q / num_wr_checks <= 2\r\n- q / wr_check_bound <= 2600\r\n- q / wr_check_bound / wr_check_bound <= 1/4000",
              "createdAt": "2024-05-01T11:55:16Z",
              "updatedAt": "2024-05-01T11:55:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls55OXC7",
          "commit": {
            "abbreviatedOid": "c397c0b"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-01T15:13:36Z",
          "updatedAt": "2024-05-01T15:13:36Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "Oh I see. I missed the $q \\geq 2r$ check above. \r\n\r\nLet's see if we can simplify this a bit. \r\n\r\nFirst, ideally we would do this computation in a way that doesn't require floating point arithmetic. Is it possible to rearange the inequalities such that the arithmetic is over integers?\r\n\r\nSecond, `q / wr_check_bound**2` is much more readable than `q / wr_check_bound / wr_check_bound`.",
              "createdAt": "2024-05-01T15:13:36Z",
              "updatedAt": "2024-05-01T15:13:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls55-Ti7",
          "commit": {
            "abbreviatedOid": "aa25703"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-05-08T18:29:49Z",
          "updatedAt": "2024-05-08T18:29:54Z",
          "comments": [
            {
              "originalPosition": 1,
              "body": "You probably didn't meant to check in this file.",
              "createdAt": "2024-05-08T18:29:50Z",
              "updatedAt": "2024-05-08T18:29:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls55-vEq",
          "commit": {
            "abbreviatedOid": "aa25703"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-08T19:32:34Z",
          "updatedAt": "2024-05-08T19:32:34Z",
          "comments": [
            {
              "originalPosition": 1,
              "body": "Yes I didn't... Removed it.",
              "createdAt": "2024-05-08T19:32:34Z",
              "updatedAt": "2024-05-08T19:32:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls55-vix",
          "commit": {
            "abbreviatedOid": "c397c0b"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-08T19:33:38Z",
          "updatedAt": "2024-05-08T19:33:38Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "Makes sense. I re-arranged it:\r\n\r\n```\r\nif (self.Field.MODULUS / num_wr_checks < 2 or\r\n            self.Field.MODULUS / self.wr_check_bound.as_unsigned() < 2600 or\r\n            self.wr_check_bound.as_unsigned()**2 / self.Field.MODULUS > 4000):\r\n```\r\n\r\nMy only concern is `self.wr_check_bound.as_unsigned()**2` overflows with this re-arrangement, that's why I opted for division instead of multiplication.",
              "createdAt": "2024-05-08T19:33:38Z",
              "updatedAt": "2024-05-08T19:33:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls55-yjz",
          "commit": {
            "abbreviatedOid": "c397c0b"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-08T19:41:39Z",
          "updatedAt": "2024-05-08T19:41:39Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "Works for me!",
              "createdAt": "2024-05-08T19:41:39Z",
              "updatedAt": "2024-05-08T19:41:39Z"
            }
          ]
        }
      ]
    },
    {
      "number": 83,
      "id": "PR_kwDOJWdxls5yKvuo",
      "title": "Add a GitHub action for running the unit tests",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/83",
      "state": "MERGED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Partially addresses #75.",
      "createdAt": "2024-06-11T23:28:53Z",
      "updatedAt": "2024-06-13T14:29:47Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "d7ed2add2a00255749c9550ee766e9fd2f7ccf32",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "cjpatton/ci",
      "headRefOid": "ba9b2ed46847e3db28761cb2efa083b8d912a2ed",
      "closedAt": "2024-06-13T14:29:47Z",
      "mergedAt": "2024-06-13T14:29:47Z",
      "mergedBy": "cjpatton",
      "mergeCommit": {
        "oid": "f1295e586d40a5d5c4d3506bc42fa6b12db2f48a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJWdxls5-FzTT",
          "commit": {
            "abbreviatedOid": "ba9b2ed"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-13T10:52:24Z",
          "updatedAt": "2024-06-13T10:52:24Z",
          "comments": []
        }
      ]
    },
    {
      "number": 84,
      "id": "PR_kwDOJWdxls5yKxlH",
      "title": "Define Pine48 and change the number of proofs for Pine64",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/84",
      "state": "CLOSED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Pine48 has three proofs and a 48-bit field. Not accounting for offline attacks, our current estimate suggests this yields at least 100 bits of security.\r\n\r\nBased on the same estimate, only two proofs are required to achieve the same level of security for Pine64.",
      "createdAt": "2024-06-11T23:38:17Z",
      "updatedAt": "2024-06-25T23:19:27Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "c12e02ae82ee20c4d1512d779d17bef444284e99",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "cjpatton/field48",
      "headRefOid": "898c7bf5d433dbb3f5bde8c67f0f09757f3edf6c",
      "closedAt": "2024-06-25T23:19:27Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 85,
      "id": "PR_kwDOJWdxls5yRkxP",
      "title": "Fix tests that fail after updating wraparound check field size requir\u2026",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/85",
      "state": "MERGED",
      "author": "junyechen1996",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "\u2026ement",
      "createdAt": "2024-06-12T18:40:31Z",
      "updatedAt": "2024-06-12T21:52:31Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "c12e02ae82ee20c4d1512d779d17bef444284e99",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "junyec/wr-check-field-test",
      "headRefOid": "256da9efc0eb4e20b3615a238f2e81ea25def053",
      "closedAt": "2024-06-12T21:52:28Z",
      "mergedAt": "2024-06-12T21:52:28Z",
      "mergedBy": "junyechen1996",
      "mergeCommit": {
        "oid": "d7ed2add2a00255749c9550ee766e9fd2f7ccf32"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJWdxls59__jw",
          "commit": {
            "abbreviatedOid": "7f91166"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-12T19:02:06Z",
          "updatedAt": "2024-06-12T19:02:09Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "If I recall correctly, this was picked because `num_frac_bits` is one bit larger than we can accommodate. Is that the case? If so, is the same test reproducible here?",
              "createdAt": "2024-06-12T19:02:06Z",
              "updatedAt": "2024-06-12T19:02:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5-AkxJ",
          "commit": {
            "abbreviatedOid": "7f91166"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-12T19:53:43Z",
          "updatedAt": "2024-06-12T19:53:43Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "Yes we cannot accommodate it because the old wraparound check field size requirement will fail. I've added tests to still test wraparound check field size requirement on line 215 to 224 (basically making `alpha` really big).",
              "createdAt": "2024-06-12T19:53:43Z",
              "updatedAt": "2024-06-12T19:53:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5-Amyy",
          "commit": {
            "abbreviatedOid": "7f91166"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-12T19:56:26Z",
          "updatedAt": "2024-06-12T19:56:29Z",
          "comments": [
            {
              "originalPosition": 45,
              "body": "It looks like we run this test with each test case. Is it helpful to test each test case with a big alpha? I wonder if it would make more sense to just add this as another test case that we expect to fail.",
              "createdAt": "2024-06-12T19:56:26Z",
              "updatedAt": "2024-06-12T19:56:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5-Axqx",
          "commit": {
            "abbreviatedOid": "7f91166"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-12T20:13:57Z",
          "updatedAt": "2024-06-12T20:13:57Z",
          "comments": [
            {
              "originalPosition": 45,
              "body": "Works for me. I added one test case that intentionally sets a large alpha.",
              "createdAt": "2024-06-12T20:13:57Z",
              "updatedAt": "2024-06-12T20:13:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls5-Ay2T",
          "commit": {
            "abbreviatedOid": "256da9e"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-12T20:16:40Z",
          "updatedAt": "2024-06-12T20:16:40Z",
          "comments": []
        }
      ]
    },
    {
      "number": 86,
      "id": "PR_kwDOJWdxls5zjw-C",
      "title": "Change the number of proofs for Pine64 from 3 to 2",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/86",
      "state": "MERGED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Based on our current estimate, two proofs are sufficient to achieve 100 bits of security.",
      "createdAt": "2024-06-25T23:22:07Z",
      "updatedAt": "2024-06-26T17:46:14Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "f1295e586d40a5d5c4d3506bc42fa6b12db2f48a",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "cjpatton/pine64",
      "headRefOid": "cb1f783743a91eebfc44b62d33ccc76e965b3a62",
      "closedAt": "2024-06-26T17:46:14Z",
      "mergedAt": "2024-06-26T17:46:14Z",
      "mergedBy": "cjpatton",
      "mergeCommit": {
        "oid": "924b07e49946fbc17fa873a74701434a1d4e9fa6"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJWdxls5_tKC4",
          "commit": {
            "abbreviatedOid": "cb1f783"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-26T17:29:17Z",
          "updatedAt": "2024-06-26T17:29:17Z",
          "comments": []
        }
      ]
    },
    {
      "number": 87,
      "id": "PR_kwDOJWdxls50wkGI",
      "title": "Change type of `l2_norm_bound` from `float` to `int`",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/87",
      "state": "MERGED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The caller is expected to compute it as `floor(b * 2**num_frac_bits)` where `b` is the real-valued L2-norm.",
      "createdAt": "2024-07-09T00:16:45Z",
      "updatedAt": "2024-07-12T16:33:18Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "924b07e49946fbc17fa873a74701434a1d4e9fa6",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "cjpatton/pine-config",
      "headRefOid": "947ae241ac168f9a4aa09c600cb9da4141f17aaa",
      "closedAt": "2024-07-12T16:33:18Z",
      "mergedAt": "2024-07-12T16:33:18Z",
      "mergedBy": "cjpatton",
      "mergeCommit": {
        "oid": "dfc91fb9ad8b3246a98e6515e86469cbd9e2fdb6"
      },
      "comments": [
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "@albertpl please take another look.",
          "createdAt": "2024-07-10T21:27:58Z",
          "updatedAt": "2024-07-10T21:27:58Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJWdxls6BORdX",
          "commit": {
            "abbreviatedOid": "c95ab9f"
          },
          "author": "albertpl",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-10T04:26:06Z",
          "updatedAt": "2024-07-10T04:26:14Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "In other languages,  likely we write another constructor/initializer, instead of having callers to implement this. In Python, perhaps `@classmethod`?",
              "createdAt": "2024-07-10T04:26:06Z",
              "updatedAt": "2024-07-10T04:26:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls6BUuaV",
          "commit": {
            "abbreviatedOid": "c95ab9f"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-10T16:27:08Z",
          "updatedAt": "2024-07-10T16:27:08Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "I'm not sure I understand. Do you mean computing `math.floor(1.0 * 2**self.num_frac_bits)`? \r\n\r\nThe challenge is that, in taskprov, we will encode `l2_norm_bound` as a `uint64`, not a float. So this is what the constructor will get.",
              "createdAt": "2024-07-10T16:27:08Z",
              "updatedAt": "2024-07-10T16:27:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls6BVUxO",
          "commit": {
            "abbreviatedOid": "c95ab9f"
          },
          "author": "albertpl",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-10T17:43:20Z",
          "updatedAt": "2024-07-10T17:43:20Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "Let me clarify. We can add the canonical implementation as class method for `PineValid`.\r\nSo we will have two ways to instantiate it. One with floating value `l2_norm_bound` and the other with `uint64`.",
              "createdAt": "2024-07-10T17:43:20Z",
              "updatedAt": "2024-07-10T17:43:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls6BVjk-",
          "commit": {
            "abbreviatedOid": "c95ab9f"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-10T18:17:03Z",
          "updatedAt": "2024-07-10T18:17:04Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "That's a good idea, will do.",
              "createdAt": "2024-07-10T18:17:03Z",
              "updatedAt": "2024-07-10T18:17:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls6BXrOF",
          "commit": {
            "abbreviatedOid": "947ae24"
          },
          "author": "albertpl",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-07-10T22:15:10Z",
          "updatedAt": "2024-07-10T22:15:10Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJWdxls6BqEGk",
          "commit": {
            "abbreviatedOid": "947ae24"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-07-12T16:22:23Z",
          "updatedAt": "2024-07-12T16:22:23Z",
          "comments": []
        }
      ]
    },
    {
      "number": 88,
      "id": "PR_kwDOJWdxls518BMk",
      "title": "Make sure l2_norm_bound is not negative",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/88",
      "state": "MERGED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The upper bits of the field are used for negative numbers. If l2_norm_bound is larger than the field modulus divided by 2, then it will be interpreted as a negative number.\r\n\r\nAlso rename `encode_f64_into_field()` to `encode_float_into_field()` since Python doesn't have an f64 type.",
      "createdAt": "2024-07-19T19:41:40Z",
      "updatedAt": "2024-07-19T20:57:01Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "dfc91fb9ad8b3246a98e6515e86469cbd9e2fdb6",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "cjpatton/neg-floats",
      "headRefOid": "15b8b7daed05012a79a0ad8dad4c6fc40225f093",
      "closedAt": "2024-07-19T20:57:01Z",
      "mergedAt": "2024-07-19T20:57:01Z",
      "mergedBy": "cjpatton",
      "mergeCommit": {
        "oid": "3454cf448c99f79e8193b70faaf3b378c34b82be"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJWdxls6Ce-f0",
          "commit": {
            "abbreviatedOid": "15b8b7d"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-07-19T20:33:59Z",
          "updatedAt": "2024-07-19T20:33:59Z",
          "comments": []
        }
      ]
    },
    {
      "number": 89,
      "id": "PR_kwDOJWdxls518B9i",
      "title": "Bump VERSION and generate test vectors",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/89",
      "state": "MERGED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-07-19T19:44:45Z",
      "updatedAt": "2024-07-19T20:57:15Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "dfc91fb9ad8b3246a98e6515e86469cbd9e2fdb6",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "cjpatton/bump",
      "headRefOid": "db02aae265ba5059d3194748becdfd43262c4f59",
      "closedAt": "2024-07-19T20:57:15Z",
      "mergedAt": "2024-07-19T20:57:15Z",
      "mergedBy": "cjpatton",
      "mergeCommit": {
        "oid": "f06d5344b0b9879d678e9b5ea01878b9a899dd9c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJWdxls6Ce-tV",
          "commit": {
            "abbreviatedOid": "db02aae"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-07-19T20:34:19Z",
          "updatedAt": "2024-07-19T20:34:19Z",
          "comments": []
        }
      ]
    },
    {
      "number": 90,
      "id": "PR_kwDOJWdxls53AWe4",
      "title": "Align reference code with draft-irtf-cfrg-vdaf-10",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/90",
      "state": "MERGED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We need https://github.com/cfrg/draft-irtf-cfrg-vdaf/pull/383 before we can merge this.\r\n\r\nRemove the submodule and require the user to install the reference code the VDAF draft via pip:\r\n\r\n```\r\nsage -pip install git+https://github.com/cfrg/draft-irtf-cfrg-vdaf@72227878#subdirectory=poc\r\n```\r\n\r\nThis installs a package `vdaf_poc` that can be imported from PINE. Hacking in the module by adding the submodule to Python's PATH is no longer necessary.\r\n\r\n- Replace class-factory patterns with standard Python OOP patterns. In particular, methods on `Vdaf` are no longer class methods, but methods on an instance of the class that is constructed with all the necessary parameters.\r\n\r\nEnforce type hints:\r\n\r\n```\r\nsage -python -m mypy *pine*.py\r\n```\r\n\r\nThis required minor changes to the code in some cases. For instance, previously we allowed `chunk_length` to be `None`, but the type is `int`, not `Optional[int]`. There are also situations where it's necessary to call `cast()` to tell the type checker that an `Optional[SomeType]` is a `SomeType` and not `None`.\r\n\r\nAnother notable change is that, in some cases, we were treating generic types as class constructors. In particular, we often want to be generic in the finite field, but then invoke the constructor for that type with the same variable. Python's type hints doesn't actually support this.\r\n\r\nFinally, rename `encode_gradient_and_norm()` to `encode()`, which is an abstract method of `Flp`. This was pointed out by the type checker.",
      "createdAt": "2024-07-31T14:43:37Z",
      "updatedAt": "2024-07-31T22:37:28Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "f06d5344b0b9879d678e9b5ea01878b9a899dd9c",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "cjpatton/vdaf-10",
      "headRefOid": "8d2f9730e13bd04d2f9eb084c9b87f607985bffb",
      "closedAt": "2024-07-31T20:18:28Z",
      "mergedAt": "2024-07-31T20:18:28Z",
      "mergedBy": "cjpatton",
      "mergeCommit": {
        "oid": "5dc22425079ca4b74ea4fc8a4363a761dd7d24cf"
      },
      "comments": [
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "Squashed and updated the VDAF repo commit to https://github.com/cfrg/draft-irtf-cfrg-vdaf/commit/fefc5a2f563e70e73a74d3c57b7145e0dd1c2e3f.",
          "createdAt": "2024-07-31T20:04:09Z",
          "updatedAt": "2024-07-31T20:04:09Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJWdxls6DwJj1",
          "commit": {
            "abbreviatedOid": "cb0394c"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-31T15:01:22Z",
          "updatedAt": "2024-07-31T15:01:23Z",
          "comments": [
            {
              "originalPosition": 432,
              "body": "Reviewer note: This was previously a class method. I decided to make it a regular function because it never actually used any of the class parameters.",
              "createdAt": "2024-07-31T15:01:22Z",
              "updatedAt": "2024-07-31T15:01:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls6DwKwP",
          "commit": {
            "abbreviatedOid": "cb0394c"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-31T15:03:15Z",
          "updatedAt": "2024-07-31T15:05:21Z",
          "comments": [
            {
              "originalPosition": 138,
              "body": "Reviewer note: This behavior no longer works because an `int` can't take `None` as a value. We could instead make `chunk_length: Optional[int]`, but I don't really think a default is necessary. Better to keep the code simple.",
              "createdAt": "2024-07-31T15:03:15Z",
              "updatedAt": "2024-07-31T15:05:21Z"
            },
            {
              "originalPosition": 648,
              "body": "Reviewer note: This is a situation where the code was taking advantage of Python's dynamic types. When we start enforcing type hints, the type of a variable is not supposed to change while it's in scope.",
              "createdAt": "2024-07-31T15:05:11Z",
              "updatedAt": "2024-07-31T15:05:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls6DxZg6",
          "commit": {
            "abbreviatedOid": "2259b7a"
          },
          "author": "albertpl",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Thanks for doing this. Just a few questions/comments.",
          "createdAt": "2024-07-31T17:36:45Z",
          "updatedAt": "2024-07-31T17:58:14Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Curiously. What is `@72227878` for? Doesn't look like branch name or commit.",
              "createdAt": "2024-07-31T17:36:45Z",
              "updatedAt": "2024-07-31T17:58:15Z"
            },
            {
              "originalPosition": 284,
              "body": "The new name suggests it implements `Valid.encode`. But actually they are not exactly the same. The latter requires both `encode_gradient_and_norm` and append results from `encode_wr_checks`, right?",
              "createdAt": "2024-07-31T17:54:30Z",
              "updatedAt": "2024-07-31T17:58:15Z"
            },
            {
              "originalPosition": 432,
              "body": "Maybe decorate with `@staticmethod`? ",
              "createdAt": "2024-07-31T17:57:09Z",
              "updatedAt": "2024-07-31T17:58:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls6DxnhC",
          "commit": {
            "abbreviatedOid": "2259b7a"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-31T18:07:18Z",
          "updatedAt": "2024-07-31T18:07:19Z",
          "comments": [
            {
              "originalPosition": 284,
              "body": "yeesssss, good catch! I'll revert.",
              "createdAt": "2024-07-31T18:07:18Z",
              "updatedAt": "2024-07-31T18:07:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls6DxoKs",
          "commit": {
            "abbreviatedOid": "2259b7a"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-31T18:08:26Z",
          "updatedAt": "2024-07-31T18:08:26Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "It's a truncated commit, it refers to a commit in the draft-irtf-cfrg-vdaf repo. We'll eventually replace this with the next tag, which will be draft-irtf-cfrg-vdaf-11.",
              "createdAt": "2024-07-31T18:08:26Z",
              "updatedAt": "2024-07-31T18:08:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls6DxogW",
          "commit": {
            "abbreviatedOid": "2259b7a"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-31T18:08:58Z",
          "updatedAt": "2024-07-31T18:08:58Z",
          "comments": [
            {
              "originalPosition": 432,
              "body": "Why?",
              "createdAt": "2024-07-31T18:08:58Z",
              "updatedAt": "2024-07-31T18:08:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls6DyF1O",
          "commit": {
            "abbreviatedOid": "2259b7a"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-31T19:15:13Z",
          "updatedAt": "2024-07-31T19:15:13Z",
          "comments": [
            {
              "originalPosition": 284,
              "body": "Done.",
              "createdAt": "2024-07-31T19:15:13Z",
              "updatedAt": "2024-07-31T19:15:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls6DyLlo",
          "commit": {
            "abbreviatedOid": "07c2cb2"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "One question about the difference between all uppercase properties and all lowercase properties.",
          "createdAt": "2024-07-31T19:30:01Z",
          "updatedAt": "2024-07-31T19:36:12Z",
          "comments": [
            {
              "originalPosition": 318,
              "body": "```suggestion\r\n    def run_wr_checks(self, encoded_gradient: list[F], wr_joint_rand_xof: Xof):\r\n```",
              "createdAt": "2024-07-31T19:30:46Z",
              "updatedAt": "2024-07-31T19:36:12Z"
            },
            {
              "originalPosition": 353,
              "body": "```suggestion\r\n    def encode_wr_checks(self, encoded_gradient: list[F], wr_joint_rand_xof: Xof):\r\n```",
              "createdAt": "2024-07-31T19:31:12Z",
              "updatedAt": "2024-07-31T19:36:12Z"
            },
            {
              "originalPosition": 155,
              "body": "What's the difference between all lowercase properties and all uppercase properties?",
              "createdAt": "2024-07-31T19:33:37Z",
              "updatedAt": "2024-07-31T19:36:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls6DyQZU",
          "commit": {
            "abbreviatedOid": "07c2cb2"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-31T19:41:12Z",
          "updatedAt": "2024-07-31T19:41:12Z",
          "comments": [
            {
              "originalPosition": 155,
              "body": "None. I've been using all caps for things that are constants, but we've blurred this somewhat in this codebase. We should try to be consistent.",
              "createdAt": "2024-07-31T19:41:12Z",
              "updatedAt": "2024-07-31T19:41:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls6DyPIR",
          "commit": {
            "abbreviatedOid": "c0c0b2a"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-31T19:38:18Z",
          "updatedAt": "2024-07-31T19:43:20Z",
          "comments": [
            {
              "originalPosition": 180,
              "body": "```suggestion\r\n                        shares_inv: F) -> F:\r\n```",
              "createdAt": "2024-07-31T19:38:18Z",
              "updatedAt": "2024-07-31T19:43:20Z"
            },
            {
              "originalPosition": 353,
              "body": "```suggestion\r\n    def encode_wr_checks(self, encoded_gradient: list[F], wr_joint_rand_xof: Xof) -> tuple[list[F], list[F]]:\r\n```",
              "createdAt": "2024-07-31T19:41:27Z",
              "updatedAt": "2024-07-31T19:43:20Z"
            },
            {
              "originalPosition": 388,
              "body": "```suggestion\r\n    def truncate(self, meas: list[F]) -> list[F]:\r\n```\r\n\r\nFor consistency, since `decode` has return type annotated as well.",
              "createdAt": "2024-07-31T19:41:59Z",
              "updatedAt": "2024-07-31T19:43:20Z"
            },
            {
              "originalPosition": 318,
              "body": "```suggestion\r\n    def run_wr_checks(self, encoded_gradient: list[F], wr_joint_rand_xof: Xof) -> list[F]:\r\n```",
              "createdAt": "2024-07-31T19:42:26Z",
              "updatedAt": "2024-07-31T19:43:20Z"
            },
            {
              "originalPosition": 262,
              "body": "```suggestion\r\n    def parallel_sum(self, mul_inputs: list[F]) -> F:\r\n```",
              "createdAt": "2024-07-31T19:42:39Z",
              "updatedAt": "2024-07-31T19:43:20Z"
            },
            {
              "originalPosition": 231,
              "body": "```suggestion\r\n                       shares_inv: F) -> tuple[F, F]:\r\n```",
              "createdAt": "2024-07-31T19:42:58Z",
              "updatedAt": "2024-07-31T19:43:20Z"
            },
            {
              "originalPosition": 203,
              "body": "```suggestion\r\n                        shares_inv: F) -> tuple[F, F]:\r\n```",
              "createdAt": "2024-07-31T19:43:15Z",
              "updatedAt": "2024-07-31T19:43:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls6DyZq3",
          "commit": {
            "abbreviatedOid": "2259b7a"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-31T20:03:30Z",
          "updatedAt": "2024-07-31T20:03:30Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Updated to fefc5a2f563e70e73a74d3c57b7145e0dd1c2e3f.",
              "createdAt": "2024-07-31T20:03:30Z",
              "updatedAt": "2024-07-31T20:03:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls6DzNcJ",
          "commit": {
            "abbreviatedOid": "cb0394c"
          },
          "author": "albertpl",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-31T22:36:09Z",
          "updatedAt": "2024-07-31T22:36:09Z",
          "comments": [
            {
              "originalPosition": 432,
              "body": "It is merged. But to answer your question, without the decorations, it could be confused as instance method.",
              "createdAt": "2024-07-31T22:36:09Z",
              "updatedAt": "2024-07-31T22:37:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls6DzNz6",
          "commit": {
            "abbreviatedOid": "cb0394c"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-31T22:37:28Z",
          "updatedAt": "2024-07-31T22:37:28Z",
          "comments": [
            {
              "originalPosition": 432,
              "body": "It's no longer a method on a class or an instance of a class: it's just a normal function",
              "createdAt": "2024-07-31T22:37:28Z",
              "updatedAt": "2024-07-31T22:37:28Z"
            }
          ]
        }
      ]
    },
    {
      "number": 91,
      "id": "PR_kwDOJWdxls53AabK",
      "title": "Add GitHub Actions for linting and type checking",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/91",
      "state": "MERGED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #75.\r\nBased on #90 (merge that first).\r\n\r\nAlso, put the tests in a module so that we can use the unittest module to invoke the unit tests.",
      "createdAt": "2024-07-31T14:51:51Z",
      "updatedAt": "2024-07-31T20:23:24Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "5dc22425079ca4b74ea4fc8a4363a761dd7d24cf",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "cjpatton/ci-improvements",
      "headRefOid": "cc624fde95fff38bbf4723a7ea55f6a8279705a5",
      "closedAt": "2024-07-31T20:23:24Z",
      "mergedAt": "2024-07-31T20:23:24Z",
      "mergedBy": "cjpatton",
      "mergeCommit": {
        "oid": "e7ff306f5cef9aa698fdf8e4f5c5b3626873edc5"
      },
      "comments": [
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "Rebased.",
          "createdAt": "2024-07-31T20:06:15Z",
          "updatedAt": "2024-07-31T20:06:15Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJWdxls6DyHJn",
          "commit": {
            "abbreviatedOid": "f9f3058"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-31T19:18:36Z",
          "updatedAt": "2024-07-31T19:18:37Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "TODO: Update once https://github.com/cfrg/draft-irtf-cfrg-vdaf/pull/383 is merged.",
              "createdAt": "2024-07-31T19:18:36Z",
              "updatedAt": "2024-07-31T19:18:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls6DySgx",
          "commit": {
            "abbreviatedOid": "f9f3058"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-07-31T19:45:17Z",
          "updatedAt": "2024-07-31T19:45:17Z",
          "comments": []
        }
      ]
    },
    {
      "number": 92,
      "id": "PR_kwDOJWdxls53B26p",
      "title": "Split squared norm equality check into a separate FLP",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/92",
      "state": "MERGED",
      "author": "albertpl",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This implements #53.",
      "createdAt": "2024-07-31T18:49:46Z",
      "updatedAt": "2024-09-05T16:45:34Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "e7ff306f5cef9aa698fdf8e4f5c5b3626873edc5",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "albertpl/perform-normcheck-once",
      "headRefOid": "346826191b9169bd25372bcc66f43c434da1086d",
      "closedAt": "2024-08-09T21:39:46Z",
      "mergedAt": "2024-08-09T21:39:46Z",
      "mergedBy": "albertpl",
      "mergeCommit": {
        "oid": "b7e986ebc97d806fb2c2f1362ede74bfff196486"
      },
      "comments": [
        {
          "author": "albertpl",
          "authorAssociation": "COLLABORATOR",
          "body": "I suppose we need thorough security review on this approach. \r\nThe intuition is that `eval_norm_check` doesn't depend on joint randomness. Although we still use joint randomness to combine results of all sub-circuits, the degree of the joint randomness doesn't change. So this won't make it easy to guess the joint randomness (if the guess is uniformly distributed)?",
          "createdAt": "2024-07-31T18:53:40Z",
          "updatedAt": "2024-07-31T18:54:56Z"
        },
        {
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "body": "> This like it adds a flag to make the squared norm equality and range checks optional? That's not quite what we need.\r\n> \r\n> The circuit checks for five properties, as shown here:\r\n> \r\n> https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/blob/f06d5344b0b9879d678e9b5ea01878b9a899dd9c/poc/flp_pine.py#L230-L234\r\n> \r\n> We always need to check all five of these properties: it's not acceptable to skip the squared norm equality or range check under any circumstances.\r\n> \r\n> The idea behind #53 is that that we can split out the squared norm equality check into its own circuit. We would then generate FLPs for two circuits: one for the squared norm equality check and another for all the other checks. This saves us computation because the squared norm equality check can be done without joint randomness, so we only need to generate one proof for it.\r\n\r\nAgreed. The current interface for `PineValid` makes it seem like norm equality check is optional. I think we should have one `Valid` circuit that just does the squared norm equality check which doesn't need joint randomness, something like `PineValidSquaredNormEqualityCheck`, and another `Valid` circuit that computes all other checks that require joint randomness, something like `PineValidOtherChecks`..?",
          "createdAt": "2024-07-31T19:49:19Z",
          "updatedAt": "2024-07-31T19:49:19Z"
        },
        {
          "author": "albertpl",
          "authorAssociation": "COLLABORATOR",
          "body": "Let me double confirm.\r\n\r\n* FLP1: squared norm equality check\r\n* FLP2: all the other checks\r\n\r\nIn the context of multiple proofs, we will produce 1 proof for FLP1 and `num_proofs` proofs for FLP2. Both FLPs are consisted of `ParallelSum` gadget. These proofs are then concatenated. \r\n\r\n",
          "createdAt": "2024-07-31T21:44:18Z",
          "updatedAt": "2024-07-31T21:44:18Z"
        },
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "Confirmed! Note you'll need to rebase this PR.",
          "createdAt": "2024-07-31T21:46:54Z",
          "updatedAt": "2024-07-31T21:46:54Z"
        },
        {
          "author": "albertpl",
          "authorAssociation": "COLLABORATOR",
          "body": "Still WIP.  \r\nI will be out of office for the rest of the week. So plan to get it ready for review early next week. ",
          "createdAt": "2024-08-01T04:25:25Z",
          "updatedAt": "2024-08-01T04:26:59Z"
        },
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks @albertpl, this is heading in the right direction :)",
          "createdAt": "2024-08-01T16:10:52Z",
          "updatedAt": "2024-08-01T16:10:52Z"
        },
        {
          "author": "albertpl",
          "authorAssociation": "COLLABORATOR",
          "body": "Rewrite this PR. May need more polishing but I want to collect feedback to make sure I am on the right track. \r\nPls take another look.",
          "createdAt": "2024-08-05T23:09:24Z",
          "updatedAt": "2024-08-06T00:24:31Z"
        },
        {
          "author": "albertpl",
          "authorAssociation": "COLLABORATOR",
          "body": "> It seems like the pattern you want to follow is: PineValid implements the functionality shared by both circuits, then sub-classes implement the circuit-specific functionality. This pattern might make sense, but as it is, I think base class PineValid is doing too much:\r\nNot all parameters set by the constructor are relevant to both circuits\r\nThe base class includes the sub-circuits that are used by PineValidOtherChecks but not by PineValidSquaredNormEqualityCheck\r\nThe base class includes encoding routines that are not relevant to both\r\nI'd like to see a cleaner separation of the two circuits.\r\n\r\n\r\n* I relocated all the evaluation sub-circuits.\r\n* but the encoding routines are shared by both circuits such that both can be used individually.\r\n* most of parameters are shared by both too. One reason is that we initialize them together, with dependencies on each other. Two initialization of these parameters would be a little bit tricky? Lots of the parameters are used by the shared routines as well, e.g. `unpack_encoded_measurement`.\r\n\r\n",
          "createdAt": "2024-08-07T22:40:37Z",
          "updatedAt": "2024-08-07T22:40:37Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJWdxls6DyFCX",
          "commit": {
            "abbreviatedOid": "d2025e5"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "This like it adds a flag to make the squared norm equality and range checks optional? That's not quite what we need.\r\n\r\nThe circuit checks for five properties, as shown here:\r\nhttps://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/blob/f06d5344b0b9879d678e9b5ea01878b9a899dd9c/poc/flp_pine.py#L230-L234\r\n\r\nWe always need to check all five of these properties: it's not acceptable to skip the squared norm equality or range check under any circumstances.\r\n\r\nThe idea behind #53 is that that we can split out the squared norm equality check into its own circuit. We would then generate FLPs for two circuits: one for the squared norm equality check and another for all the other checks. This saves us computation because the squared norm equality check can be done without joint randomness, so we only need to generate one proof for it.",
          "createdAt": "2024-07-31T19:13:10Z",
          "updatedAt": "2024-07-31T19:13:10Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJWdxls6EUvI6",
          "commit": {
            "abbreviatedOid": "f20fc3b"
          },
          "author": "albertpl",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-06T00:04:18Z",
          "updatedAt": "2024-08-06T00:23:38Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "How do you guys run these linting tools?",
              "createdAt": "2024-08-06T00:04:19Z",
              "updatedAt": "2024-08-06T00:23:38Z"
            },
            {
              "originalPosition": 28,
              "body": "Based on [this](https://github.com/cfrg/draft-irtf-cfrg-vdaf/pull/382) PR.",
              "createdAt": "2024-08-06T00:15:59Z",
              "updatedAt": "2024-08-06T00:23:38Z"
            },
            {
              "originalPosition": 24,
              "body": "Alternatively we can factor the common codes into some utility class and use \"has-a\" relationship. ",
              "createdAt": "2024-08-06T00:17:45Z",
              "updatedAt": "2024-08-06T00:23:38Z"
            },
            {
              "originalPosition": 28,
              "body": "The optimal `chunk_length` can be quite different between `PineValidSquaredNormEqualityCheck` and `PineValidOtherChecks`. It makes senses to introduce a new parameter?",
              "createdAt": "2024-08-06T00:21:14Z",
              "updatedAt": "2024-08-06T00:23:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls6EUzrl",
          "commit": {
            "abbreviatedOid": "f20fc3b"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-06T00:29:53Z",
          "updatedAt": "2024-08-06T00:29:53Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "I think most of them are available through `brew`.",
              "createdAt": "2024-08-06T00:29:53Z",
              "updatedAt": "2024-08-06T00:29:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls6EUz10",
          "commit": {
            "abbreviatedOid": "f20fc3b"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-06T00:30:56Z",
          "updatedAt": "2024-08-06T00:30:57Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "That seems sensible to me!",
              "createdAt": "2024-08-06T00:30:56Z",
              "updatedAt": "2024-08-06T00:30:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls6EU0Ug",
          "commit": {
            "abbreviatedOid": "f20fc3b"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-06T00:33:53Z",
          "updatedAt": "2024-08-06T00:33:54Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "I'm worried about this Makefile diverging from the CI definitions. We should either:\r\n1. Have CI call this Makefile\r\n2. Have no Makefile at all.\r\n\r\nI'd prefer the second one. If you want the Makefile for convenience, then you could include this in your local directory and add it to .gitignore so you don't accidentally check it in.",
              "createdAt": "2024-08-06T00:33:54Z",
              "updatedAt": "2024-08-06T00:33:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls6EU0fG",
          "commit": {
            "abbreviatedOid": "559cd27"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-06T00:34:55Z",
          "updatedAt": "2024-08-06T00:34:56Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "What's your goal here? ",
              "createdAt": "2024-08-06T00:34:56Z",
              "updatedAt": "2024-08-06T00:34:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls6EVPrg",
          "commit": {
            "abbreviatedOid": "f20fc3b"
          },
          "author": "albertpl",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-06T02:37:39Z",
          "updatedAt": "2024-08-06T02:37:39Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Not installation part. So we just manually invoke those commands?",
              "createdAt": "2024-08-06T02:37:39Z",
              "updatedAt": "2024-08-06T02:37:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls6EVTBX",
          "commit": {
            "abbreviatedOid": "f20fc3b"
          },
          "author": "albertpl",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-06T02:51:53Z",
          "updatedAt": "2024-08-06T02:51:53Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "So we ask users to figure out how to run these steps by reading the CI workflow? And possibly reading man page for each command? e.g. \r\n\r\nIn `workflow/lint-python.yml`, it runs the command with `--diff --exit-code`\r\n`autopep8 --diff --exit-code *.py tests/*.py`\r\n\r\nbut we can use `--in-place` to automatically update before commit\r\n`sage -python -m autopep8 -i *.py tests/*.py`\r\n\r\nI was hoping to automate these steps to minimize developers' efforts. \r\nBut I see your concerns too.  Although, if we make changes in CI, I am wondering if we can simply update the Makefile. Otherwise *everyone* else has to figure out the changes anyway.\r\n\r\n\r\nIn any case, this is unrelated change. I just reverted the change (there was a basic Makefile).",
              "createdAt": "2024-08-06T02:51:53Z",
              "updatedAt": "2024-08-06T03:19:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls6EVUio",
          "commit": {
            "abbreviatedOid": "f20fc3b"
          },
          "author": "albertpl",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-06T02:58:42Z",
          "updatedAt": "2024-08-06T02:58:42Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "Just want to mention the alternative approach I have considered.",
              "createdAt": "2024-08-06T02:58:42Z",
              "updatedAt": "2024-08-06T02:58:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls6EZWGD",
          "commit": {
            "abbreviatedOid": "22358e0"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-08-06T12:59:59Z",
          "updatedAt": "2024-08-06T13:12:39Z",
          "comments": [
            {
              "originalPosition": 156,
              "body": "```suggestion\r\n    def eval_norm_range_check(self,\r\n```\r\n\r\n?",
              "createdAt": "2024-08-06T12:59:59Z",
              "updatedAt": "2024-08-06T13:12:39Z"
            },
            {
              "originalPosition": 24,
              "body": "I think we can stick with the approach in the base VDAF poc.",
              "createdAt": "2024-08-06T13:06:15Z",
              "updatedAt": "2024-08-06T13:12:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls6Eq9qX",
          "commit": {
            "abbreviatedOid": "cfe821a"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "I've gone through the FLP bits and have some suggestions there. I'll take a look at the VDAF bits once we've resolved the FLP part.\r\n\r\nThanks for working on this!",
          "createdAt": "2024-08-07T18:04:16Z",
          "updatedAt": "2024-08-07T18:18:04Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "It seems like the pattern you want to follow is: `PineValid` implements the functionality shared by both circuits, then sub-classes implement the circuit-specific functionality. This pattern might make sense, but as it is, I think base class `PineValid` is doing too much:\r\n\r\n1. Not all parameters set by the constructor are relevant to both circuits\r\n2. The base class includes the sub-circuits that are used by `PineValidOtherChecks` but not by `PineValidSquaredNormEqualityCheck`\r\n3. The base class includes encoding routines that are not relevant to both\r\n\r\nI'd like to see a cleaner separation of the two circuits.",
              "createdAt": "2024-08-07T18:04:16Z",
              "updatedAt": "2024-08-07T18:18:04Z"
            },
            {
              "originalPosition": 40,
              "body": "1. I think some of the details in this docucomment are still relevant?\r\n2. Wrap lines at 80 characters",
              "createdAt": "2024-08-07T18:04:51Z",
              "updatedAt": "2024-08-07T18:18:04Z"
            },
            {
              "originalPosition": 146,
              "body": "Wrap lines at 80 characters",
              "createdAt": "2024-08-07T18:06:28Z",
              "updatedAt": "2024-08-07T18:18:04Z"
            },
            {
              "originalPosition": 227,
              "body": "Readability: naming the variables we don't need would help I think:\r\n```python\r\n(encoded_gradient,\r\n _bit_checked,\r\n_wr_check_results,\r\n...\r\n_wr_check_g) = self.unpack_measurement(meas)\r\n```\r\n",
              "createdAt": "2024-08-07T18:08:38Z",
              "updatedAt": "2024-08-07T18:18:04Z"
            },
            {
              "originalPosition": 88,
              "body": "We should try to distinguish between \"measurement\" and \"encoded measurement\" \r\n```suggestion\r\n    def unpack_encoded_measurement(self,\r\n```",
              "createdAt": "2024-08-07T18:09:17Z",
              "updatedAt": "2024-08-07T18:18:04Z"
            },
            {
              "originalPosition": 237,
              "body": "Hmm, the name `PineValidOtherChecks` is a little confusing. If I may make a suggestion:\r\n\r\n* Circuit `PineValid` is the \"main\" circuit that checks for bounded L2 norm. It assumes that the squared norm of the encoded gradient is equal to the value claimed by the prover.\r\n* `SquaredNormEqualityCheck`: checks that the squared norm is equal to the value claimed by the prover.\r\n",
              "createdAt": "2024-08-07T18:15:31Z",
              "updatedAt": "2024-08-07T18:18:04Z"
            },
            {
              "originalPosition": 102,
              "body": "This test encodes the measurement each iteration of the for loop. What about encoding outside the for loop?",
              "createdAt": "2024-08-07T18:17:14Z",
              "updatedAt": "2024-08-07T18:18:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls6ErRcU",
          "commit": {
            "abbreviatedOid": "cfe821a"
          },
          "author": "albertpl",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-07T18:43:50Z",
          "updatedAt": "2024-08-07T18:43:50Z",
          "comments": [
            {
              "originalPosition": 237,
              "body": "So you suggest we rename the base class, perhaps from `PineValid` -> `PineValidBase` or something else?",
              "createdAt": "2024-08-07T18:43:50Z",
              "updatedAt": "2024-08-07T18:43:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls6EraEm",
          "commit": {
            "abbreviatedOid": "cfe821a"
          },
          "author": "albertpl",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-07T19:00:26Z",
          "updatedAt": "2024-08-07T19:00:26Z",
          "comments": [
            {
              "originalPosition": 146,
              "body": "Is this enforced in any linting rule?\r\n> Wrap lines at 80 characters",
              "createdAt": "2024-08-07T19:00:26Z",
              "updatedAt": "2024-08-07T19:00:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls6ErqOt",
          "commit": {
            "abbreviatedOid": "cfe821a"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-07T19:38:39Z",
          "updatedAt": "2024-08-07T19:38:39Z",
          "comments": [
            {
              "originalPosition": 146,
              "body": "It doesn't appear to be at the moment.",
              "createdAt": "2024-08-07T19:38:39Z",
              "updatedAt": "2024-08-07T19:38:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls6Er4mS",
          "commit": {
            "abbreviatedOid": "f20fc3b"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-07T20:11:38Z",
          "updatedAt": "2024-08-07T20:11:39Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Yes.",
              "createdAt": "2024-08-07T20:11:38Z",
              "updatedAt": "2024-08-07T20:11:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls6Er5Il",
          "commit": {
            "abbreviatedOid": "f20fc3b"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-07T20:12:50Z",
          "updatedAt": "2024-08-07T20:12:51Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "At the moment the \"users\" are just us :) I think for now we shouldn't try over do it on tooling, since this is likely to change quickly while we develop. Less is more?",
              "createdAt": "2024-08-07T20:12:51Z",
              "updatedAt": "2024-08-07T20:12:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls6EsdJf",
          "commit": {
            "abbreviatedOid": "cfe821a"
          },
          "author": "albertpl",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-07T21:39:37Z",
          "updatedAt": "2024-08-07T21:39:37Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "I split & moved these details to its subclasses, s.t. we don't have to duplicate these documents. What do you think?",
              "createdAt": "2024-08-07T21:39:37Z",
              "updatedAt": "2024-08-07T21:39:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls6Eseey",
          "commit": {
            "abbreviatedOid": "cfe821a"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-07T21:44:02Z",
          "updatedAt": "2024-08-07T21:44:03Z",
          "comments": [
            {
              "originalPosition": 237,
              "body": "`PineValidBase` sounds reasonable.",
              "createdAt": "2024-08-07T21:44:02Z",
              "updatedAt": "2024-08-07T21:44:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls6EspK2",
          "commit": {
            "abbreviatedOid": "cfe821a"
          },
          "author": "albertpl",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-07T22:24:29Z",
          "updatedAt": "2024-08-07T22:24:29Z",
          "comments": [
            {
              "originalPosition": 102,
              "body": "Encoding requires an instant of `flp`, which is created inside the loop?\r\nSo test with one `flp` to encode and then create another `flp` to test the rest. A little bit weird?",
              "createdAt": "2024-08-07T22:24:29Z",
              "updatedAt": "2024-08-07T22:24:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls6Esr10",
          "commit": {
            "abbreviatedOid": "cfe821a"
          },
          "author": "albertpl",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-07T22:35:21Z",
          "updatedAt": "2024-08-07T22:35:21Z",
          "comments": [
            {
              "originalPosition": 146,
              "body": "OK. I add `--max-line` to my local config. ",
              "createdAt": "2024-08-07T22:35:21Z",
              "updatedAt": "2024-08-07T22:35:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls6EtPM8",
          "commit": {
            "abbreviatedOid": "f20fc3b"
          },
          "author": "albertpl",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-08T00:28:48Z",
          "updatedAt": "2024-08-08T00:28:48Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "* I relocated all the evaluation sub-circuits.\r\n* But the encoding routines are shared by both circuits such that both can be used individually.\r\n* Also Most of parameters are shared by both too. One reason is that we initialize them together, with dependencies on each other. Two initialization of these parameters would be a little bit tricky? Lots of the parameters are used by the shared routines as well, e.g. unpack_encoded_measurement.",
              "createdAt": "2024-08-08T00:28:48Z",
              "updatedAt": "2024-08-08T00:28:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls6E3Huh",
          "commit": {
            "abbreviatedOid": "7af462f"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Looks good overall! Just some nit-picky stuff",
          "createdAt": "2024-08-08T23:30:18Z",
          "updatedAt": "2024-08-09T00:12:30Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "Thanks. I'll suggest where I think things can be split up more, if needed.",
              "createdAt": "2024-08-08T23:30:18Z",
              "updatedAt": "2024-08-09T00:12:30Z"
            },
            {
              "originalPosition": 40,
              "body": "I don't think this is necessary to say: the API already says this is an abstract base class.",
              "createdAt": "2024-08-08T23:30:58Z",
              "updatedAt": "2024-08-09T00:12:30Z"
            },
            {
              "originalPosition": 267,
              "body": "I believe `run_wr_checks()` and `encode_wr_checks()` are only relevant to `PineValid`: for `PineSquaredNormEqualityCheck` all we need is `encoded_gradient`, `sq_nrom_v_bits`, and `sq_norm_u_bits`, correct?",
              "createdAt": "2024-08-08T23:56:07Z",
              "updatedAt": "2024-08-09T00:12:30Z"
            },
            {
              "originalPosition": 291,
              "body": "```suggestion\r\n    \"\"\"\r\n    PINE validation circuit that computes the squared L2-norm result\r\n```",
              "createdAt": "2024-08-08T23:56:41Z",
              "updatedAt": "2024-08-09T00:12:30Z"
            },
            {
              "originalPosition": 290,
              "body": "```suggestion\r\nclass PineValidSquaredNormEqualityCheck(\r\n        PineValidBase[F]\r\n    ):\r\n```",
              "createdAt": "2024-08-08T23:57:05Z",
              "updatedAt": "2024-08-09T00:12:30Z"
            },
            {
              "originalPosition": 291,
              "body": "```suggestion\r\n    \"\"\"\r\n    PINE validation circuit that computes the squared L2-norm result\r\n```",
              "createdAt": "2024-08-08T23:57:07Z",
              "updatedAt": "2024-08-09T00:12:30Z"
            },
            {
              "originalPosition": 322,
              "body": "```suggestion\r\n```",
              "createdAt": "2024-08-08T23:57:31Z",
              "updatedAt": "2024-08-09T00:12:30Z"
            },
            {
              "originalPosition": 334,
              "body": "Trailing whitespace (make sure there isn't anymore in this PR)",
              "createdAt": "2024-08-08T23:57:58Z",
              "updatedAt": "2024-08-09T00:12:30Z"
            },
            {
              "originalPosition": 324,
              "body": "nit: I generally prefer including the parentheses when unpacking a struct\r\n```suggestion\r\n        (encoded_gradient, _bit_checked, _wr_check_results, sq_norm_v_bits, \\\r\n```",
              "createdAt": "2024-08-08T23:58:44Z",
              "updatedAt": "2024-08-09T00:12:30Z"
            },
            {
              "originalPosition": 327,
              "body": "I think encapsulating `eval_norm_equality_check` was useful when we had three sub-circuits computing 5 results. Here I don't think it helps readability. I suggest inlining the code here.",
              "createdAt": "2024-08-08T23:59:50Z",
              "updatedAt": "2024-08-09T00:12:30Z"
            },
            {
              "originalPosition": 353,
              "body": "```suggestion\r\n        PineValidBase[F]\r\n    ):\r\n    \"\"\"\r\n    Validity circuit for all other checks in PINE, including\r\n```",
              "createdAt": "2024-08-09T00:00:19Z",
              "updatedAt": "2024-08-09T00:12:30Z"
            },
            {
              "originalPosition": 353,
              "body": "```suggestion\r\n    PineValidBase[F]\r\n):\r\n    \"\"\"Validity circuit for all checks for PINE except the squared norm quality check. This includes\r\n```",
              "createdAt": "2024-08-09T00:00:55Z",
              "updatedAt": "2024-08-09T00:12:30Z"
            },
            {
              "originalPosition": 102,
              "body": "Weird may be preferable. We know that the encoding step is expensive, so we might save a lot on unit tests if we only encode once.\r\n\r\nCI takes something like 10 seconds, which is quite slow for unittests. I'm not sure though if this change is the reason.",
              "createdAt": "2024-08-09T00:03:58Z",
              "updatedAt": "2024-08-09T00:12:30Z"
            },
            {
              "originalPosition": 41,
              "body": "Idea: it might be nice to construct these FLPs once. Could we do something like this:\r\n```python\r\n(self.valid_squared_norm_equality, self.valid) = pine_flp.construct_circuits(field, l2_Norm_bound, ...)\r\n```",
              "createdAt": "2024-08-09T00:06:10Z",
              "updatedAt": "2024-08-09T00:12:30Z"
            },
            {
              "originalPosition": 49,
              "body": "Do we actually need to store `valid_squared_norm_equality` in `self`?",
              "createdAt": "2024-08-09T00:08:58Z",
              "updatedAt": "2024-08-09T00:12:30Z"
            },
            {
              "originalPosition": 165,
              "body": "This is visually hard to parse: the two lines look like different input parameters. Here and below.\r\n```suggestion\r\n            self.flp_squared_norm_equality.PROOF_LEN +\r\n                self.flp.PROOF_LEN * self.PROOFS\r\n```",
              "createdAt": "2024-08-09T00:11:14Z",
              "updatedAt": "2024-08-09T00:12:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls6E3WEh",
          "commit": {
            "abbreviatedOid": "cfe821a"
          },
          "author": "albertpl",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-09T00:45:31Z",
          "updatedAt": "2024-08-09T00:45:32Z",
          "comments": [
            {
              "originalPosition": 102,
              "body": "How much we can save here? `dimension=4`. I can reduce num_wr_check if that really matter",
              "createdAt": "2024-08-09T00:45:31Z",
              "updatedAt": "2024-08-09T00:45:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls6E3WmF",
          "commit": {
            "abbreviatedOid": "7af462f"
          },
          "author": "albertpl",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-09T00:47:11Z",
          "updatedAt": "2024-08-09T00:47:11Z",
          "comments": [
            {
              "originalPosition": 267,
              "body": "We also need `unpack_encoded_measurement` which depends on lots of parameters. Unless we want to duplicate this in both `PineSquaredNormEqualityCheck` and `PineValid`. So lesser of two evils is to keep `unpack_encoded_measurement` in the base class. \r\n\r\nAlso moving all encoding routines to `PineValid` will render `PineSquaredNormEqualityCheck` unable to test by itself. So we always need to create `PineValid` to encode & then test `PineSquaredNormEqualityCheck`.\r\n",
              "createdAt": "2024-08-09T00:47:11Z",
              "updatedAt": "2024-08-09T00:49:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls6E3juM",
          "commit": {
            "abbreviatedOid": "7af462f"
          },
          "author": "albertpl",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-09T02:04:40Z",
          "updatedAt": "2024-08-09T02:04:40Z",
          "comments": [
            {
              "originalPosition": 49,
              "body": "removed",
              "createdAt": "2024-08-09T02:04:40Z",
              "updatedAt": "2024-08-09T02:04:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls6E3jwn",
          "commit": {
            "abbreviatedOid": "7af462f"
          },
          "author": "albertpl",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-09T02:04:54Z",
          "updatedAt": "2024-08-09T02:04:54Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "done",
              "createdAt": "2024-08-09T02:04:54Z",
              "updatedAt": "2024-08-09T02:04:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls6E3kJi",
          "commit": {
            "abbreviatedOid": "7af462f"
          },
          "author": "albertpl",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-09T02:07:24Z",
          "updatedAt": "2024-08-09T02:07:24Z",
          "comments": [
            {
              "originalPosition": 267,
              "body": "I move all encoding functions to `PineValid`.",
              "createdAt": "2024-08-09T02:07:24Z",
              "updatedAt": "2024-08-09T02:07:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls6E3kUn",
          "commit": {
            "abbreviatedOid": "cfe821a"
          },
          "author": "albertpl",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-09T02:08:37Z",
          "updatedAt": "2024-08-09T02:08:37Z",
          "comments": [
            {
              "originalPosition": 102,
              "body": "nvm. done.",
              "createdAt": "2024-08-09T02:08:37Z",
              "updatedAt": "2024-08-09T02:08:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls6E8u4Y",
          "commit": {
            "abbreviatedOid": "b8ca084"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-09T15:39:06Z",
          "updatedAt": "2024-08-09T15:54:36Z",
          "comments": [
            {
              "originalPosition": 216,
              "body": "spelling and trailing whitespace\r\n```suggestion\r\n    Validity circuit for all checks for PINE except the squared norm quality\r\n    check. The result is only valid if the circuit\r\n    `PineValidSquaredNormEqualityCheck` is also valid.\r\n```",
              "createdAt": "2024-08-09T15:39:06Z",
              "updatedAt": "2024-08-09T15:54:36Z"
            },
            {
              "originalPosition": 267,
              "body": "Awesome, I think that makes more sense. ",
              "createdAt": "2024-08-09T15:42:14Z",
              "updatedAt": "2024-08-09T15:54:36Z"
            },
            {
              "originalPosition": 35,
              "body": "nit: call `construct_circuits()` and iterate over the outputs:\r\n```python\r\ncircuits = construct_circuits(BLAH)\r\nfor v in circuits:\r\n    BLAH\r\n```",
              "createdAt": "2024-08-09T15:43:50Z",
              "updatedAt": "2024-08-09T15:54:36Z"
            },
            {
              "originalPosition": 13,
              "body": "Make sure the code is consistent about \"squared norm equality\" versus \"norm equality\". Either is fine with me, but consistency is important for readability.",
              "createdAt": "2024-08-09T15:45:02Z",
              "updatedAt": "2024-08-09T15:54:36Z"
            },
            {
              "originalPosition": 466,
              "body": "Idea: We could move the code from `PineValiBase.__init__` here. Then all each circuit's constructor needs to do is copy the parameters it needs and construct the ones that are specific to it.",
              "createdAt": "2024-08-09T15:51:14Z",
              "updatedAt": "2024-08-09T15:54:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls6E845T",
          "commit": {
            "abbreviatedOid": "b8ca084"
          },
          "author": "albertpl",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-09T15:59:34Z",
          "updatedAt": "2024-08-09T15:59:34Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "I stick with \"norm equality\".",
              "createdAt": "2024-08-09T15:59:34Z",
              "updatedAt": "2024-08-09T15:59:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls6E9D_M",
          "commit": {
            "abbreviatedOid": "b8ca084"
          },
          "author": "albertpl",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-09T16:21:08Z",
          "updatedAt": "2024-08-09T16:21:08Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "Rename `PineValidSquaredNormEqualityCheck` to `PineValidNormEquality`. \r\nThe comments may still refer to \"squared norm check equality\", let me know you don't like this as well.",
              "createdAt": "2024-08-09T16:21:08Z",
              "updatedAt": "2024-08-09T16:21:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls6E9Pka",
          "commit": {
            "abbreviatedOid": "b8ca084"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-09T16:45:49Z",
          "updatedAt": "2024-08-09T16:45:49Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "Comments are fine, thanks",
              "createdAt": "2024-08-09T16:45:49Z",
              "updatedAt": "2024-08-09T16:45:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls6E9bPC",
          "commit": {
            "abbreviatedOid": "b8ca084"
          },
          "author": "albertpl",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-09T17:16:02Z",
          "updatedAt": "2024-08-09T17:16:03Z",
          "comments": [
            {
              "originalPosition": 466,
              "body": "Both critics share lots of parameters. Unless we want these two circuits to have different `MEAS_LEN`,  `PineValidNormEquality` has to carry `num_wr_checks`. So goes to other parameters.\r\n\r\nWhat parameters do you want to split out of base class?\r\n\r\n\r\nThe base class should initializer the shared parameters. Having some external method to do this work is not a good practice.\r\n\r\nAnd each constructor of the subclass already does \"construct the ones that are specific to it.\" as of now.",
              "createdAt": "2024-08-09T17:16:02Z",
              "updatedAt": "2024-08-09T17:16:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls6E91DO",
          "commit": {
            "abbreviatedOid": "7af462f"
          },
          "author": "albertpl",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-09T18:13:21Z",
          "updatedAt": "2024-08-09T18:13:21Z",
          "comments": [
            {
              "originalPosition": 290,
              "body": "I tried but the lint step automatically revert this change. Let me bypass the lint step.\r\nIf you have some lint config that can share, it would be great.",
              "createdAt": "2024-08-09T18:13:21Z",
              "updatedAt": "2024-08-09T18:13:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls6E91o3",
          "commit": {
            "abbreviatedOid": "b8ca084"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-09T18:15:01Z",
          "updatedAt": "2024-08-09T18:15:01Z",
          "comments": [
            {
              "originalPosition": 466,
              "body": "Fair points. The thing that bothers me about this code is that we're doing the same computation twice, that is calling the base class constructor twice. Obviously performance doesn't matter for the reference code, it's just not very tidy. Feel free to disregard.",
              "createdAt": "2024-08-09T18:15:01Z",
              "updatedAt": "2024-08-09T18:15:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls6E93FX",
          "commit": {
            "abbreviatedOid": "1f3c0e0"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM modulo one byte of trailing whitespace",
          "createdAt": "2024-08-09T18:19:12Z",
          "updatedAt": "2024-08-09T18:19:51Z",
          "comments": [
            {
              "originalPosition": 151,
              "body": "trailing whitespace\r\n```suggestion\r\n        * The result is only valid if the other circuit\r\n```",
              "createdAt": "2024-08-09T18:19:12Z",
              "updatedAt": "2024-08-09T18:19:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls6E946x",
          "commit": {
            "abbreviatedOid": "b8ca084"
          },
          "author": "albertpl",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-09T18:23:06Z",
          "updatedAt": "2024-08-09T18:23:06Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "done",
              "createdAt": "2024-08-09T18:23:06Z",
              "updatedAt": "2024-08-09T18:23:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls6E98ge",
          "commit": {
            "abbreviatedOid": "7af462f"
          },
          "author": "albertpl",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-09T18:33:21Z",
          "updatedAt": "2024-08-09T18:33:21Z",
          "comments": [
            {
              "originalPosition": 290,
              "body": "This does fail [autopep8 check](https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/actions/runs/10323919100/job/28582293557?pr=92) the lint check. So I have to revert.\r\n\r\nN.B. this is automatically suggested by `autopep8 --diff --exit-code *.py tests/*.py`, as defined in CI.",
              "createdAt": "2024-08-09T18:33:21Z",
              "updatedAt": "2024-08-09T18:33:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls6E-KC-",
          "commit": {
            "abbreviatedOid": "7af462f"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-09T19:12:02Z",
          "updatedAt": "2024-08-09T19:12:02Z",
          "comments": [
            {
              "originalPosition": 290,
              "body": "Oh no, sorry about the conflicting feedback!",
              "createdAt": "2024-08-09T19:12:02Z",
              "updatedAt": "2024-08-09T19:12:02Z"
            }
          ]
        }
      ]
    },
    {
      "number": 93,
      "id": "PR_kwDOJWdxls54KVPL",
      "title": "Update code for generating test vectors",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/93",
      "state": "MERGED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The upstream repo now contains a tool for generating test vectors for a VDAF. It also includes some improvements to testing FLPs and VDAFs.",
      "createdAt": "2024-08-12T22:31:25Z",
      "updatedAt": "2024-08-14T21:35:20Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "39b43bf76582297e7cc20777134552c46a23d251",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "cjpatton/fix-test-vec",
      "headRefOid": "27ec09bfead8c6788826f6a3259a07709221e5f5",
      "closedAt": "2024-08-14T21:35:19Z",
      "mergedAt": "2024-08-14T21:35:19Z",
      "mergedBy": "cjpatton",
      "mergeCommit": {
        "oid": "214dfb85f9114a0ef7b5e5ea074fa4c1df81fa00"
      },
      "comments": [
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "Rebased and re-generated the test vectors.",
          "createdAt": "2024-08-13T16:42:40Z",
          "updatedAt": "2024-08-13T16:42:40Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJWdxls6FcLLh",
          "commit": {
            "abbreviatedOid": "2a759fa"
          },
          "author": "albertpl",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-08-14T17:09:01Z",
          "updatedAt": "2024-08-14T21:28:38Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Remove the Makefile as well?",
              "createdAt": "2024-08-14T17:09:01Z",
              "updatedAt": "2024-08-14T21:28:38Z"
            }
          ]
        }
      ]
    },
    {
      "number": 94,
      "id": "PR_kwDOJWdxls54QPBT",
      "title": "Fix test vector issue",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/94",
      "state": "MERGED",
      "author": "albertpl",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "# Issue\r\n\r\n`input_shares` in test vector is not produced correctly. This change is introduced in #92.  Thanks to @cjpatton for reporting this issue.\r\n\r\n\r\n# Changes\r\n\r\nRevert the specific change and regenerate test vectors\r\n\r\n# Tests\r\n\r\nCompare the test vectors against the one produced before #92.\r\n",
      "createdAt": "2024-08-13T16:15:30Z",
      "updatedAt": "2024-09-05T16:45:43Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "b7e986ebc97d806fb2c2f1362ede74bfff196486",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "albertpl/fix-test-vector-issue",
      "headRefOid": "3151dd37934c4abaefad922eed1ed291e74b2b8c",
      "closedAt": "2024-08-13T16:37:44Z",
      "mergedAt": "2024-08-13T16:37:44Z",
      "mergedBy": "cjpatton",
      "mergeCommit": {
        "oid": "39b43bf76582297e7cc20777134552c46a23d251"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJWdxls6FRu9u",
          "commit": {
            "abbreviatedOid": "3151dd3"
          },
          "author": "albertpl",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Will use \"squash and merge\" option this time.",
          "createdAt": "2024-08-13T16:19:28Z",
          "updatedAt": "2024-08-13T16:19:28Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJWdxls6FR43u",
          "commit": {
            "abbreviatedOid": "3151dd3"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Excellent, thanks! My implementation is now consuming these vectors properly.",
          "createdAt": "2024-08-13T16:37:30Z",
          "updatedAt": "2024-08-13T16:37:30Z",
          "comments": []
        }
      ]
    },
    {
      "number": 96,
      "id": "PR_kwDOJWdxls54an0Y",
      "title": "Reduce bit twiddling in `run_wr_checks()`",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/96",
      "state": "MERGED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Each wraparound check result is computed by taking the dot product of the encoded gradient and a random vector. To generate the vectors, we iterate over the output of an XOF two bits at a time. This minimizes the amount of XOF output we need to generate, but keeping track of where we are in the bit slice costs a fair bit of bit twiddling under the hood.\r\n\r\nThis computation requires iterating over the encoded gradient for each wraparound tests. We can avoid some bit twiddling if we can avoid splitting bytes of XOF output across iterations.\r\n\r\nDivide the gradient into chunks of at most four elements, and for each chunk, consume a byte of XOF output (8 bits per byte, 2 bits per element). This strategy wastes a few bits per test if the gradient length is not a power of four. Overall we end up generating\r\n\r\n```\r\nchunk_count(4, dimension) * NUM_WR_CHECKS\r\n```\r\n\r\nbytes of XOF output instead of\r\n\r\n```\r\nchunk_count(4, dimension * NUM_WR_CHECKS)\r\n```\r\n\r\nHowever, this trade-off appears to be worth it: In Daphne's benchmarks, this saves 17% on encode time.\r\n\r\nThis is a breaking change because it changes the order in which we consume the output of the XOF.",
      "createdAt": "2024-08-14T23:48:48Z",
      "updatedAt": "2024-08-22T18:48:14Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "214dfb85f9114a0ef7b5e5ea074fa4c1df81fa00",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "cjpatton/opt-bit-fiddling",
      "headRefOid": "c77135de18e5ca2d9ddda3e8e8459c04cd9ac301",
      "closedAt": "2024-08-22T18:48:14Z",
      "mergedAt": "2024-08-22T18:48:14Z",
      "mergedBy": "cjpatton",
      "mergeCommit": {
        "oid": "cb699d761bb546a73a309ba8f04d6b79e469ec76"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJWdxls6FlptZ",
          "commit": {
            "abbreviatedOid": "c77135d"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "Thanks for the investigation. I have one suggestion, and also would like Albert to take a look on this one to see if we see some similar improvement in Swift.",
          "createdAt": "2024-08-15T20:10:06Z",
          "updatedAt": "2024-08-15T20:10:58Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "Will accessing `encoded_gradient` (which is a large array) in each wraparound check have cache performance hit? Is there any performance benefit of keeping dimension as the outer loop?",
              "createdAt": "2024-08-15T20:10:06Z",
              "updatedAt": "2024-08-15T20:10:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls6FmOad",
          "commit": {
            "abbreviatedOid": "c77135d"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-15T21:36:18Z",
          "updatedAt": "2024-08-15T21:36:18Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "It's worth investigating! My intuition is that since we're writing to wr_check_result, but reading from encoded_gradient, it's better to keep wr_check_result in cache longer.",
              "createdAt": "2024-08-15T21:36:18Z",
              "updatedAt": "2024-08-15T21:36:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls6FmS7y",
          "commit": {
            "abbreviatedOid": "c77135d"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-15T21:46:53Z",
          "updatedAt": "2024-08-15T21:46:53Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "I could be wrong though, @albertpl should try both.",
              "createdAt": "2024-08-15T21:46:53Z",
              "updatedAt": "2024-08-15T21:46:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls6Fws5w",
          "commit": {
            "abbreviatedOid": "c77135d"
          },
          "author": "albertpl",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-08-17T18:54:05Z",
          "updatedAt": "2024-08-17T18:54:13Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "My experiments is consistent with what @cjpatton said, although it is not significant (~3%). Didn't dig too much into this. But I agree with @cjpatton's intuition, i.e. we need to allocate `wr_check_results` first and deal with more miss for it. ",
              "createdAt": "2024-08-17T18:54:06Z",
              "updatedAt": "2024-08-17T18:54:13Z"
            }
          ]
        }
      ]
    },
    {
      "number": 97,
      "id": "PR_kwDOJWdxls54emgS",
      "title": "Use squaring gadget to compute the squared norm",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/97",
      "state": "MERGED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Based on #96 (merge that first).\r\n\r\nThe `PineValidNormEquality` circuit uses the `Mul` gadget to square each element of the encoded gradient, i.e., `Mul(x, x) = x^2`. We could instead use `PolyEval` to square each `x`, which reduces the arity of gadget by a factor of 2. This pays off especially when we use `ParallelSum`, as the arity counts against the size of the proof and verifier.\r\n\r\nIn Daphne's benchmarks, this improves prove time 14% and query time by 50% after re-tuning the chunk length so that the proof and verifier are as large as before. (We see a more modest improvement with a smaller chunk length.) This equates in a 3% improvement in shard time and a 5% improvement in prep time.",
      "createdAt": "2024-08-15T15:13:25Z",
      "updatedAt": "2024-08-22T18:53:34Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "cb699d761bb546a73a309ba8f04d6b79e469ec76",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "cjpatton/opt-square-gadget",
      "headRefOid": "3bb2b1ee9ba4177ea42473fb18684dba73237d9a",
      "closedAt": "2024-08-22T18:53:34Z",
      "mergedAt": "2024-08-22T18:53:34Z",
      "mergedBy": "cjpatton",
      "mergeCommit": {
        "oid": "1f83eb71ad66f128387008f1b21727270c019715"
      },
      "comments": [
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "Rebased.",
          "createdAt": "2024-08-22T18:49:40Z",
          "updatedAt": "2024-08-22T18:49:40Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJWdxls6FkzGs",
          "commit": {
            "abbreviatedOid": "a13ae3e"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-08-15T18:00:58Z",
          "updatedAt": "2024-08-15T18:02:03Z",
          "comments": [
            {
              "originalPosition": 59,
              "body": "I think we can combine the functionality into `parallel_sum`, parameterized by `gadget.arity`, so we can put the right amount of inputs into the chunk? Something like:\r\n\r\n```\r\n        g = self.GADGETS[0]\r\n        s = self.field(0)\r\n        while len(inputs) >=  g.ARITY * self.chunk_length:\r\n            (chunk, inputs) = front(g.ARITY * self.chunk_length, inputs)\r\n            s += g.eval(self.field, chunk)\r\n        if len(inputs) > 0:\r\n            chunk = self.field.zeros(g.ARITY * self.chunk_length)\r\n            for i in range(len(inputs)):\r\n                chunk[i] = mul_inputs[i]\r\n            s += g.eval(self.field, chunk)\r\n        return s\r\n```\r\n\r\nwhere `inputs` is `mul_inputs` for `Mul` gadget, and is `encoded_gradient` for `PolyEval` gadget.",
              "createdAt": "2024-08-15T18:00:58Z",
              "updatedAt": "2024-08-15T18:02:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls6FmSzf",
          "commit": {
            "abbreviatedOid": "a13ae3e"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-15T21:46:27Z",
          "updatedAt": "2024-08-15T21:46:27Z",
          "comments": [
            {
              "originalPosition": 59,
              "body": "Good idea, done.",
              "createdAt": "2024-08-15T21:46:27Z",
              "updatedAt": "2024-08-15T21:46:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls6Fwug5",
          "commit": {
            "abbreviatedOid": "d3b9d2d"
          },
          "author": "albertpl",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Great work!\r\nThis cut down the number of wire polynomials by half! So ~ half the FFT operations.",
          "createdAt": "2024-08-17T20:01:01Z",
          "updatedAt": "2024-08-17T20:01:57Z",
          "comments": []
        }
      ]
    },
    {
      "number": 99,
      "id": "PR_kwDOJWdxls55kPIL",
      "title": "Generate more test vectors",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/99",
      "state": "MERGED",
      "author": "junyechen1996",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "Test dimension not a even number, and num_wr_checks not an even number",
      "createdAt": "2024-08-27T12:29:39Z",
      "updatedAt": "2024-08-29T20:27:29Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "1f83eb71ad66f128387008f1b21727270c019715",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "junyec/more-test-vec",
      "headRefOid": "7ec264947ca0b50c262e47c2e5c5ca7e9229ccda",
      "closedAt": "2024-08-29T20:27:27Z",
      "mergedAt": "2024-08-29T20:27:27Z",
      "mergedBy": "junyechen1996",
      "mergeCommit": {
        "oid": "010a5eb688d094c3729a5897ab692d3ce6d9c606"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJWdxls6G-iKm",
          "commit": {
            "abbreviatedOid": "5aa1ad5"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-27T21:56:36Z",
          "updatedAt": "2024-08-27T22:01:10Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "It might be more useful to test a lower success threshold\r\n```suggestion\r\n        (19, 75, 50)\r\n```",
              "createdAt": "2024-08-27T21:56:36Z",
              "updatedAt": "2024-08-27T22:01:10Z"
            },
            {
              "originalPosition": 11,
              "body": "Let's also test different numbers of fractional bits.",
              "createdAt": "2024-08-27T22:01:02Z",
              "updatedAt": "2024-08-27T22:01:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls6G-jgI",
          "commit": {
            "abbreviatedOid": "5aa1ad5"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-27T22:01:47Z",
          "updatedAt": "2024-08-27T22:01:50Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "Let's also add a dimension that's more realistic, say ~250?",
              "createdAt": "2024-08-27T22:01:47Z",
              "updatedAt": "2024-08-27T22:01:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls6HSrQh",
          "commit": {
            "abbreviatedOid": "7ec2649"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-08-29T18:44:37Z",
          "updatedAt": "2024-08-29T18:44:37Z",
          "comments": []
        }
      ]
    },
    {
      "number": 100,
      "id": "PR_kwDOJWdxls56nHHj",
      "title": "Multiproof for norm equality check",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/100",
      "state": "MERGED",
      "author": "junyechen1996",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-09-06T03:00:54Z",
      "updatedAt": "2024-09-12T12:57:44Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "010a5eb688d094c3729a5897ab692d3ce6d9c606",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "junyec/norm-check-multiproof",
      "headRefOid": "d74b565ad94db071fd80f0d3fae62c733293c0f3",
      "closedAt": "2024-09-12T12:57:42Z",
      "mergedAt": "2024-09-12T12:57:41Z",
      "mergedBy": "junyechen1996",
      "mergeCommit": {
        "oid": "4f24d761484c701f9a4309800378ca5e0f583123"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJWdxls6Ij3ui",
          "commit": {
            "abbreviatedOid": "23047e6"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good to me. I'd suggest adding a unit test to exercise multiple squared norm equality proofs, if we go with 1 proof for Field64.",
          "createdAt": "2024-09-09T23:22:18Z",
          "updatedAt": "2024-09-09T23:25:07Z",
          "comments": [
            {
              "originalPosition": 176,
              "body": "What's the motivation for this change? `1` may be a reasonable default given that this part isn't subject to offline attacks.",
              "createdAt": "2024-09-09T23:22:18Z",
              "updatedAt": "2024-09-09T23:25:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls6IruyJ",
          "commit": {
            "abbreviatedOid": "23047e6"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-09-10T17:07:37Z",
          "updatedAt": "2024-09-10T17:07:42Z",
          "comments": [
            {
              "originalPosition": 176,
              "body": "I'm actually trying to test the case where `num_proofs_norm_equality > 1`. Maybe I can just an instance in the tests directly.",
              "createdAt": "2024-09-10T17:07:37Z",
              "updatedAt": "2024-09-10T17:07:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls6Irx7_",
          "commit": {
            "abbreviatedOid": "23047e6"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-09-10T17:10:44Z",
          "updatedAt": "2024-09-10T17:10:44Z",
          "comments": [
            {
              "originalPosition": 176,
              "body": "That would be better.",
              "createdAt": "2024-09-10T17:10:44Z",
              "updatedAt": "2024-09-10T17:10:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls6ItMA1",
          "commit": {
            "abbreviatedOid": "b0b178e"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-09-10T19:10:37Z",
          "updatedAt": "2024-09-10T19:12:36Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "nit: I don't think it's necessary to define a sub-class. For this test you could just call `Pine()` I think.",
              "createdAt": "2024-09-10T19:10:37Z",
              "updatedAt": "2024-09-10T19:12:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls6IuQGs",
          "commit": {
            "abbreviatedOid": "b0b178e"
          },
          "author": "albertpl",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-09-10T21:37:45Z",
          "updatedAt": "2024-09-10T21:37:45Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJWdxls6JGmgW",
          "commit": {
            "abbreviatedOid": "b0b178e"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-09-12T12:50:26Z",
          "updatedAt": "2024-09-12T12:50:27Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "Good call. I have to remove the `@abstractmethod` decoration on `__init__` for this to work.",
              "createdAt": "2024-09-12T12:50:26Z",
              "updatedAt": "2024-09-12T12:50:27Z"
            }
          ]
        }
      ]
    },
    {
      "number": 101,
      "id": "PR_kwDOJWdxls57TTFO",
      "title": "Generate test vectors for XofHmacSha256Aes128 and Field32",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/101",
      "state": "MERGED",
      "author": "junyechen1996",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-09-12T13:03:07Z",
      "updatedAt": "2024-09-13T17:13:11Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "4f24d761484c701f9a4309800378ca5e0f583123",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "junyec/xof-hmac-sha256-aes128-test-vec",
      "headRefOid": "5b48cf13091e862fc63a63afc526a2b41e853c82",
      "closedAt": "2024-09-13T13:56:09Z",
      "mergedAt": "2024-09-13T13:56:08Z",
      "mergedBy": "junyechen1996",
      "mergeCommit": {
        "oid": "cc656f88bac62f891eb0930cca4e5186a4b023b5"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJWdxls6JH1Ws",
          "commit": {
            "abbreviatedOid": "28042a8"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good to me!",
          "createdAt": "2024-09-12T14:39:18Z",
          "updatedAt": "2024-09-12T14:53:25Z",
          "comments": [
            {
              "originalPosition": 1,
              "body": "Do we need this? If so, can you add a brief explanation to the commit message?",
              "createdAt": "2024-09-12T14:39:18Z",
              "updatedAt": "2024-09-12T14:53:25Z"
            },
            {
              "originalPosition": 42,
              "body": "Suggestion: From the point of view of the API, it's a good idea to provide safe defaults wherever we can and not let the user override them. We think 4 proofs is probably too low for Field32. Thus a \"safer\" API for `Pine32HmacSha256Aes128` would not let the user do this.\r\n\r\nThat said, I understand the motivation for generating test vectors with fewer proofs. An alternative would be invoke the constructor for `Pine` instead and manually specify the field and XOF.",
              "createdAt": "2024-09-12T14:52:08Z",
              "updatedAt": "2024-09-12T14:53:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls6JHL1A",
          "commit": {
            "abbreviatedOid": "3da5b43"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-09-12T13:41:14Z",
          "updatedAt": "2024-09-13T12:34:14Z",
          "comments": [
            {
              "originalPosition": 1,
              "body": "Ah forgot to post my review: If I don't add this, I get the following error:\r\n\r\n```\r\nfield32.py:1: error: Skipping analyzing \"sage.all\": module is installed, but missing library stubs or py.typed marker  [import-untyped]\r\n```",
              "createdAt": "2024-09-13T12:20:49Z",
              "updatedAt": "2024-09-13T12:34:14Z"
            },
            {
              "originalPosition": 42,
              "body": "Ok. I removed `num_proofs` from `Pine32HmacSha256Aes128`, initially I was following what we allowed in taskprov. And I will use `Pine` to create custom `Pine32HmacSha256Aes128`.",
              "createdAt": "2024-09-13T12:34:06Z",
              "updatedAt": "2024-09-13T12:34:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOJWdxls6JRuG3",
          "commit": {
            "abbreviatedOid": "5b48cf1"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-09-13T13:19:46Z",
          "updatedAt": "2024-09-13T13:19:46Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOJWdxls6JTwk4",
          "commit": {
            "abbreviatedOid": "5b48cf1"
          },
          "author": "albertpl",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-09-13T17:13:03Z",
          "updatedAt": "2024-09-13T17:13:11Z",
          "comments": [
            {
              "originalPosition": 101,
              "body": "We probably want to add XOF type into the test parameter as well?\r\n\r\nSince this is closed, let me open another PR.\r\n\r\n(I misread, no overlap of test vectors)",
              "createdAt": "2024-09-13T17:13:03Z",
              "updatedAt": "2024-09-13T17:16:51Z"
            }
          ]
        }
      ]
    },
    {
      "number": 102,
      "id": "PR_kwDOJWdxls57Uk-_",
      "title": "Bump to draft-irtf-cfrg-vdaf-11",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/102",
      "state": "MERGED",
      "author": "cjpatton",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Based on #101 (merge that first).",
      "createdAt": "2024-09-12T15:26:19Z",
      "updatedAt": "2024-09-17T19:30:28Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "cc656f88bac62f891eb0930cca4e5186a4b023b5",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "cjpatton/vdaf-draft-11",
      "headRefOid": "4ca0a419e936094ea237ea71514423cfa9c385d2",
      "closedAt": "2024-09-17T19:30:27Z",
      "mergedAt": "2024-09-17T19:30:27Z",
      "mergedBy": "cjpatton",
      "mergeCommit": {
        "oid": "aa1f01e9606951033c60c9fc362556f44fd90ad1"
      },
      "comments": [
        {
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "body": "@junyechen1996 note that I also update the reference in the doc.",
          "createdAt": "2024-09-13T14:52:49Z",
          "updatedAt": "2024-09-13T14:52:49Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOJWdxls6JRMVZ",
          "commit": {
            "abbreviatedOid": "7d56bc1"
          },
          "author": "junyechen1996",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-09-13T12:24:17Z",
          "updatedAt": "2024-09-13T12:24:17Z",
          "comments": []
        }
      ]
    },
    {
      "number": 103,
      "id": "PR_kwDOJWdxls574TzD",
      "title": "Add non-standard XOF name into test vector file name",
      "url": "https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/103",
      "state": "OPEN",
      "author": "junyechen1996",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "Addresses comment https://github.com/junyechen1996/draft-chen-cfrg-vdaf-pine/pull/101#discussion_r1759217115. Can cut draft-01 after this PR.",
      "createdAt": "2024-09-18T10:22:44Z",
      "updatedAt": "2024-09-18T18:48:43Z",
      "baseRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "baseRefName": "main",
      "baseRefOid": "aa1f01e9606951033c60c9fc362556f44fd90ad1",
      "headRepository": "junyechen1996/draft-chen-cfrg-vdaf-pine",
      "headRefName": "junyec/xof-hmac-sha256-aes128-test-vec",
      "headRefOid": "2bd4e0ac023bc1f365257b30b2901fde55538668",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOJWdxls6J5VhQ",
          "commit": {
            "abbreviatedOid": "2bd4e0a"
          },
          "author": "cjpatton",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-09-18T18:48:43Z",
          "updatedAt": "2024-09-18T18:48:43Z",
          "comments": []
        }
      ]
    }
  ]
}